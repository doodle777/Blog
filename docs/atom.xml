<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MAY THE FORCE BE WITH YOU</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.duanxu.tech/"/>
  <updated>2018-12-07T12:53:27.561Z</updated>
  <id>http://blog.duanxu.tech/</id>
  
  <author>
    <name>Duan Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建Git服务器</title>
    <link href="http://blog.duanxu.tech/2017/08/31/2017/2017-08-31-%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://blog.duanxu.tech/2017/08/31/2017/2017-08-31-搭建Git服务器/</id>
    <published>2017-08-31T06:55:30.000Z</published>
    <updated>2018-12-07T12:53:27.561Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p>GitHub就是一个免费托管开源代码的远程仓库。托管在GitHUb上的。</p><p>搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。</p><p>假设你已经有sudo权限的用户账号，下面，正式开始安装。</p><h4 id="Step1-安装git"><a href="#Step1-安装git" class="headerlink" title="Step1 安装git"></a>Step1 安装git</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get install git</span><br></pre></td></tr></table></figure><h4 id="Step2-创建一个git用户，用来运行git服务"><a href="#Step2-创建一个git用户，用来运行git服务" class="headerlink" title="Step2 创建一个git用户，用来运行git服务"></a>Step2 创建一个git用户，用来运行git服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo adduser git</span><br></pre></td></tr></table></figure><h4 id="Step3-创建证书登录："><a href="#Step3-创建证书登录：" class="headerlink" title="Step3 创建证书登录："></a>Step3 创建证书登录：</h4><p>对于每个需要登录的用户，需要收集用户的公钥。输入命令：<figure class="highlight ls"><figcaption><span>-al ~/.ssh```，如果列表中有文件```id_rsa.pub```或```id_dsa.pub```，那么这个文件就是用户的公钥，否则需要生成一个公钥：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```shell</span><br><span class="line">$ ssh-keygen -t rsa -C "xxx@yyy.com"</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/xxxx/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /Users/xxxx/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /Users/xxxx/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">-------------------------------------- xxxx@yyy.com</span><br></pre></td></tr></table></figure></p><p>之后，在<figure class="highlight plain"><figcaption><span>id_rsa.pub```等文件，其中```id_rsa.pub```便是我们需要的公钥文件。收集所有需要登录的用户的公钥，把所有公钥导入到服务器的```/home/git/.ssh/authorized_keys```文件里，一行一个。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### Step4 初始化Git仓库</span><br><span class="line"></span><br><span class="line">先选定一个目录作为Git仓库，假定是```/gitRepo/sample.git```，在```/gitRepo```目录下输入命令：</span><br><span class="line">```shell</span><br><span class="line">$ sudo git init --bare sample.git</span><br></pre></td></tr></table></figure></p><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo chown -R git:git sample.git</span><br></pre></td></tr></table></figure></p><h4 id="Step5-禁用shell登录"><a href="#Step5-禁用shell登录" class="headerlink" title="Step5 禁用shell登录"></a>Step5 禁用shell登录</h4><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```shell</span><br><span class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure></p><p>改为：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure></p><p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p><h4 id="Step6-克隆远程仓库"><a href="#Step6-克隆远程仓库" class="headerlink" title="Step6 克隆远程仓库"></a>Step6 克隆远程仓库</h4><p>现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone git@server:/gitRepo/sample.git</span><br><span class="line">Cloning into 'sample'...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br></pre></td></tr></table></figure></p><p>剩下的push操作就像我们平时用GitHub一样了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitHub就是一个免费托管开源代码的远程仓库。托管在GitHUb上的。&lt;/p&gt;
&lt;p&gt;搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的a
      
    
    </summary>
    
      <category term="Linux" scheme="http://blog.duanxu.tech/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.duanxu.tech/tags/Linux/"/>
    
      <category term="Git" scheme="http://blog.duanxu.tech/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Thunderbird邮件ExQuilla插件license过期解决办法</title>
    <link href="http://blog.duanxu.tech/2017/08/20/2017/2017-08-20-Ubuntu%E4%B8%8BThunderbird%E9%82%AE%E4%BB%B6ExQuilla%E6%8F%92%E4%BB%B6license%E8%BF%87%E6%9C%9F%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://blog.duanxu.tech/2017/08/20/2017/2017-08-20-Ubuntu下Thunderbird邮件ExQuilla插件license过期解决办法/</id>
    <published>2017-08-20T06:41:30.000Z</published>
    <updated>2018-12-06T19:56:06.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p>Linux上只用Web版处理邮件，就是因为找不到太好的能支持Exchange的邮件客户端。在网上无意中发现了<a href="https://addons.mozilla.org/zh-CN/thunderbird/addon/exquilla-exchange-web-services/" target="_blank" rel="noopener">ExQuilla</a> 这个Thunderbird的插件，试用了一下还是不错的，很方便，不过只能免费试用60天。</p><p>网上能找到的解决办法都是用老版本的Thunderbird，搭配老版本的ExQuilla，但版本都太老了点。</p><p>另外一种办法是破解license，原来的注册码的结构是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EX0,*@*,2015-03-19,80324c6d8724c3e4cd0111b51a5718ad</span><br></pre></td></tr></table></figure></p><p>可以看到，注册码被用逗号分成了四个部分：</p><ol><li>第一部分是注册类型，EX0是免费给的试用类型，我不知道EX1、EX2是什么情况，但试了下，EX1是可以用的</li><li>第二部分是邮件，<em>@</em>是免费给的60天试用的，这里要填有效的Exchange邮箱，可以在选项里Valid Emails里看到</li><li>第三部分是license过期日期。</li><li>第四部分是校验码，分别是前三个部分再加上**<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">例如，注册类型EX1、Exchange邮箱xxx@xxx.com，到期日期2016-12-31(注意这里的到期日期是未来你想用到什么时候)，可以计算出MD5的值</span><br><span class="line">EX1,xxx@xxx.com,2016-12-31,356B4B5C</span><br><span class="line">将上面字符串(邮件填写自己的，日期是到期时间)，用md5工具加密，生成加密串，这个加密串是32位的。在线MD5加密工具:[站长之家MD5加密][2]</span><br><span class="line"> </span><br><span class="line">把生成的加密串放到注册码的第四部分如下：</span><br></pre></td></tr></table></figure></li></ol><p>EX1,<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>,2016-12-31,4decad8da20e0118311e5861775eb6a7<br><code>`</code><br>把这个替换原来的注册码就成功了，本例中可以一直用到2016-12-31<br>Thunderbird -&gt; Tools -&gt; ExQuilla for Microsoft Exchange -&gt; ExQuilla license options -&gt; 在顶部输入栏内，替换新的完整的注册码，重启Thunderbird即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux上只用Web版处理邮件，就是因为找不到太好的能支持Exchange的邮件客户端。在网上无意中发现了&lt;a href=&quot;https://addons.mozilla.org/zh-CN/thu
      
    
    </summary>
    
      <category term="Ubuntu" scheme="http://blog.duanxu.tech/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.duanxu.tech/tags/Ubuntu/"/>
    
      <category term="Thunderbird" scheme="http://blog.duanxu.tech/tags/Thunderbird/"/>
    
      <category term="ExQuilla" scheme="http://blog.duanxu.tech/tags/ExQuilla/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架学习笔记(1) ArrayList</title>
    <link href="http://blog.duanxu.tech/2017/05/01/2017/2017-05-01-JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)-ArrayList/"/>
    <id>http://blog.duanxu.tech/2017/05/01/2017/2017-05-01-JAVA集合框架学习笔记(1)-ArrayList/</id>
    <published>2017-05-01T11:45:30.000Z</published>
    <updated>2018-12-07T12:37:18.046Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>ArrayList 是Java集合框架中最常用的一类，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类定义&quot;&gt;&lt;a href=&quot;#类定义&quot; class=&quot;headerlink&quot; title=&quot;类定义&quot;&gt;&lt;/a&gt;类定义&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.duanxu.tech/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.duanxu.tech/tags/Java/"/>
    
      <category term="Framework" scheme="http://blog.duanxu.tech/tags/Framework/"/>
    
      <category term="ArrayList" scheme="http://blog.duanxu.tech/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架学习笔记(0) Overview</title>
    <link href="http://blog.duanxu.tech/2017/05/01/2017/2017-05-01-JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(0)-Overview/"/>
    <id>http://blog.duanxu.tech/2017/05/01/2017/2017-05-01-JAVA集合框架学习笔记(0)-Overview/</id>
    <published>2017-05-01T11:29:30.000Z</published>
    <updated>2018-12-07T12:37:12.021Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><div style="text-align: center"><br><img src="/images/201705/2017050101.gif"><br></div><ul><li>Collection<ul><li>List<ul><li>AbstractList<ul><li>Vector<ul><li>Stack</li></ul></li><li>ArrayList</li><li>LinkedList</li></ul></li></ul></li><li>Set<ul><li>AbstractSet<ul><li>HashSet<ul><li>LinkedHashSet</li></ul></li><li>TreeSet</li></ul></li></ul></li></ul></li><li>Map<ul><li>AbstractMap<ul><li>HashMap<ul><li>LinkedHashMap</li></ul></li><li>WeakHashMap</li><li>HashTable</li><li>IdentityHashMap</li><li>TreeMap</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/201705/2017050101.gif&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Coll
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.duanxu.tech/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.duanxu.tech/tags/Java/"/>
    
      <category term="Framework" scheme="http://blog.duanxu.tech/tags/Framework/"/>
    
      <category term="Collection" scheme="http://blog.duanxu.tech/tags/Collection/"/>
    
  </entry>
  
  <entry>
    <title>[转]Java核心技术点之注解</title>
    <link href="http://blog.duanxu.tech/2017/03/30/2017/2017-03-30-%E8%BD%AC-Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%E6%B3%A8%E8%A7%A3/"/>
    <id>http://blog.duanxu.tech/2017/03/30/2017/2017-03-30-转-Java核心技术点之注解/</id>
    <published>2017-03-30T12:45:30.000Z</published>
    <updated>2018-12-07T12:36:52.249Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p><a href="http://www.cnblogs.com/absfree/p/5295861.html" target="_blank" rel="noopener">原文链接：Java核心技术点之注解</a></p><p>本博文是对Java中注解相关知识点的简单总结，若有叙述不清晰或是不准确的地方，希望大家可以指正，谢谢大家：）</p><h2 id="一、什么是注解"><a href="#一、什么是注解" class="headerlink" title="一、什么是注解"></a>一、什么是注解</h2><p>我们大家都知道Java代码中使用注释是为了向以后阅读这份代码的人解释说明一些事情，注解是注释的升级版，它可以向编译器、虚拟机等解释说明一些事情。比如我们非常熟悉的@Override就是一种元注解，它的作用是告诉编译器它所注解的方法是重写父类的方法，这样编译器就会去检查父类是否存在这个方法，以及这个方法的签名与父类是否相同。</p><p>也就是说，注解是描述Java代码的代码，它能够被编译器解析，注解处理工具在运行时也能够解析注解。我们在Java源文件中使用注释，是为了以后我们或他人再来读这段代码时，能够更好地理解它。Javadoc工具可以解析我们在源代码中为类、方法、变量等添加的描述信息，并根据这些描述信息自动生成一个HTML文档，这些自动生成的文档即可作为API帮助文档。只要我们为类、方法等添加的描述信息符合Javadoc要求的语法，我们就能够使用Javadoc工具根据我们的描述信息自动生成一个帮助文档。而注解比java注释和Javadoc要强大得多，它们三者之间的重大的区别在于，Java注释和Javadoc描述所发挥的作用仅仅到编译时就止步了，而注解直到运行时都能够发挥作用。</p><p>我们知道，使用“transient”关键字可以告诉编译器这个域不可序列化。相比于用”transient“这样的关键字修饰一个属性，注解为我们提供了为类/方法/属性/变量添加描述信息的更通用的方式，而这些描述信息对于开发者、自动化工具、Java编译器和Java运行时来说都是有意义的，也就是说他们都能“读懂”注解信息。”transient“关键字是一个修饰符，而注解也是一种修饰符。除了传递信息，我们也可以使用注解生成代码。我们可以使用注解，然后让注解解析工具来解析它们，以此来生成一些”模板化“的代码。比如Hibernate、Spring、Axis这些框架大量使用了注解，来避免一些重复的工作。</p><h2 id="二、元注解"><a href="#二、元注解" class="headerlink" title="二、元注解"></a>二、元注解</h2><p>元注解即用来描述注解的注解，比如以下代码中我们使用“@Target”元注解来说明MethodInfo这个注解只能应用于对方法进行注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MethodInfo &#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们来具体介绍一下几种元注解。</p><h3 id="1-Documented"><a href="#1-Documented" class="headerlink" title="1. Documented"></a>1. Documented</h3><p>当一个注解类型被@Documented元注解所描述时，那么无论在哪里使用这个注解，都会被Javadoc工具文档化。我们来看一下它的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Documented &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从以上代码中可以看到，定义注解使用@interface关键字，这就好比我们定义类时使用class关键字，定义接口时使用interface关键字一样，注解也是一种类型。这个元注解被@Documented修饰，表示它本身也会被文档化。@Retention元注解的值RetentionPolicy.RUNTIME表示@Documented这个注解能保留到运行时；@Target元注解的值ElementType.ANNOTATION_TYPE表示@Documented这个注解只能够用来描述注解类型。</p><h3 id="2-Inherited"><a href="#2-Inherited" class="headerlink" title="2. Inherited"></a>2. Inherited</h3><p>   表明被修饰的注解类型是自动继承的。具体解释如下：若一个注解类型被Inherited元注解所修饰，则当用户在一个类声明中查询该注解类型时，若发现这个类声明中不包含这个注解类型，则会自动在这个类的父类中查询相应的注解类型，这个过程会被重复，直到该注解类型被找到或是查找完了Object类还未找到。这个元注解的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inherited &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   我们可以看到这个元注解类型被@Documented所注解，能够保留到运行时，只能用来描述注解类型。</p><h3 id="3-Retention"><a href="#3-Retention" class="headerlink" title="3. Retention"></a>3. Retention</h3><p>我们在上面已经见到个这个元注解，它表示一个注解类型会被保留到什么时候，比如以下代码表示Developer注解会被保留到运行时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Developer &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Retention元注解的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   我们在使用@Retention时，后面括号里的内容即表示他的取值，从以上定义我们可以看到，取值的类型为RetentionPolicy，这是一个枚举类型，它可以取以下值：</p><ul><li>SOURCE：表示在编译时这个注解会被移除，不会包含在编译后产生的class文件中；</li><li>CLASS：表示这个注解会被包含在class文件中，但在运行时会被移除；</li><li>RUNTIME：表示这个注解会被保留到运行时，在运行时可以JVM访问到，我们可以在运行时通过反射解析这个注解。</li></ul><h3 id="4-Target"><a href="#4-Target" class="headerlink" title="4. Target"></a>4. Target</h3><p>这个元注解说明了被修饰的注解的应用范围，也就是被修饰的注解可以用来注解哪些程序元素，它的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上定义我们可以看到它也会保留到运行时，而且它的取值是为ElementType[]类型（一个数组，意思是可以指定多个值），ElementType是一个枚举类型，它可以取以下值：</p><ul><li>TYPE：表示可以用来注解类、接口、注解类型或枚举类型；</li><li>PACKAGE：可以用来注解包；</li><li>PARAMETER：可以用来注解参数；</li><li>ANNOTATION_TYPE：可以用来注解 注解类型；</li><li>METHOD：可以用来注解方法；</li><li>FIELD：可以用来注解属性（包括枚举常量）；</li><li>CONSTRUCTOR：可以用来注解构造器；</li><li>LOCAL_VARIABLE：可用来注解局部变量。</li></ul><h2 id="三、常见内建注解"><a href="#三、常见内建注解" class="headerlink" title="三、常见内建注解"></a>三、常见内建注解</h2><p>Java本身内建了一些注解，下面我们来介绍一下我们在日常开发中比较常见的注解：@Override、@Deprecated、@SuppressWarnings。相信我们大家或多或少都使用过这三个注解，下面我们一起再重新认识一下它们。</p><h3 id="1-Override注解"><a href="#1-Override注解" class="headerlink" title="1. @Override注解"></a>1. @Override注解</h3><p>我们先来看一下这个注解类型的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从它的定义我们可以看到，这个注解可以被用来修饰方法，并且它只在编译时有效，在编译后的class文件中便不再存在。这个注解的作用我们大家都不陌生，那就是告诉编译器被修饰的方法是重写的父类的中的相同签名的方法，编译器会对此做出检查，若发现父类中不存在这个方法或是存在的方法签名不同，则会报错。 </p><h3 id="2-Deprecated"><a href="#2-Deprecated" class="headerlink" title="2. @Deprecated"></a>2. @Deprecated</h3><p>这个注解的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从它的定义我们可以知道，它会被文档化，能够保留到运行时，能够修饰构造方法、属性、局部变量、方法、包、参数、类型。这个注解的作用是告诉编译器被修饰的程序元素已被“废弃”，不再建议用户使用。</p><h3 id="3-SuppressWarnings"><a href="#3-SuppressWarnings" class="headerlink" title="3. @SuppressWarnings"></a>3. @SuppressWarnings</h3><p>这个注解我们也比较常用到，先来看下它的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它能够修饰的程序元素包括类型、属性、方法、参数、构造器、局部变量，只能存活在源码时，取值为String[]。它的作用是告诉编译器忽略指定的警告信息，它可以取的值如下所示：</p><ul><li>deprecation：忽略使用了废弃的类或方法时的警告；</li><li>unchecked：执行了未检查的转换；</li><li>fallthrough：swich语句款中case忘加break从而直接“落入”下一个case；</li><li>path：类路径或原文件路径等不存在；</li><li>serial：可序列化的类缺少serialVersionUID；</li><li>finally：存在不能正常执行的finally子句；</li><li>all：以上所有情况产生的警告均忽略。</li></ul><p>这个注解的使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarning</span>(value=&#123;<span class="string">"deprecation"</span>, <span class="string">"unchecked"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myMethos</span><span class="params">()</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>通过使用以上注解，我们告诉编译器忽略myMethod方法中由于使用了废弃的类或方法或是做了未检查的转换而产生的警告。 </p><h2 id="四、自定义注解"><a href="#四、自定义注解" class="headerlink" title="四、自定义注解"></a>四、自定义注解</h2><p>我们可以创建我们自己的注解类型并使用它。请看下面的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MethodInfo &#123;</span><br><span class="line">    <span class="function">String <span class="title">author</span><span class="params">()</span> <span class="keyword">default</span> "absfree"</span>;</span><br><span class="line">    <span class="function">String <span class="title">date</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">version</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   在自定义注解时，有以下几点需要我们了解：</p><p>注解类型是通过”@interface“关键字定义的；<br>在”注解体“中，所有的方法均没有方法体且只允许public和abstract这两种修饰符号（不加修饰符缺省为public），注解方法不允许有throws子句；<br>注解方法的返回值只能为以下几种：原始数据类型）, String, Class, 枚举类型, 注解和它们的一维数组，可以为方法指定默认返回值。</p><p>我们再把上面提到过的@SuppressWarnings这个注解类型的定义拿出来看一下，这个注解类型是系统为我们定义好的，它的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，它只定义了一个注解方法value()，它的返回值类型为String[]，没有指定默认返回值。我们使用@SuppressWarnings这个注解所用的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(value=&#123;<span class="string">"value1"</span>, <span class="string">"value2"</span>, ...&#125;)</span><br></pre></td></tr></table></figure><p>也就是在注解类型名称后的括号内为每个注解方法指定返回值就可以使用这个注解。下面我们来看看怎么使用我们自定义的注解类型@MethodInfo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MethodInfo</span>(author=<span class="string">"absfree"</span>, date=<span class="string">"20160410"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Using custom annotation..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么现在问题来了，我们使用的自定义注解对于编译器或是虚拟机来说是有意义的吗（编译器或是虚拟机能读懂吗）？显然我们什么都不做的话，编译器或者虚拟机是读不懂我们的自定义注解的。下面我们来介绍以下注解的解析，让编译器或虚拟机能够读懂我们的自定义注解。</p><h2 id="五、注解的解析"><a href="#五、注解的解析" class="headerlink" title="五、注解的解析"></a>五、注解的解析</h2><h3 id="1-编译时解析"><a href="#1-编译时解析" class="headerlink" title="1. 编译时解析"></a>1. 编译时解析</h3><p>编译时注解指的是@Retention的值为CLASS的注解，对于这类注解的解析，我们只需做以下两件事：</p><ul><li>自定义类继承 AbstractProcessor类；</li><li>重写其中的 process 函数。</li></ul><p>实际上，编译器在编译时会自动查找所有继承自 AbstractProcessor 的类，然后调用他们的 process 方法。因此我们只要做好上面两件事，编译器就会主动去解析我们的编译时注解。现在，我们把上面定义的MethodInfo的Retention改为CLASS，我们就可以按照以下代码来解析它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123; <span class="string">"com.custom.customannotation.MethodInfo"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInfoProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TypeElement typeElement : annotations) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Element element : env.getElementsAnnotatedWith(typeElement)) &#123;</span><br><span class="line">                MethodInfo methodInfo = element.getAnnotation(MethodInfo.class);</span><br><span class="line">                map.put(element.getEnclosingElement().toString(), methodInfo.author());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SupportedAnnotationTypes注解描述了Processor要解析的注解的名字。process 函数的annotations参数表示 表示待处理的注解集，env表示当前或是之前的运行环境。process函数的返回值表示annotations中的注解是否被这个Processor接受。</p><ol start="2"><li>运行时注解解析</li></ol><p>首先我们把MethodInfo注解类型中Retention的值改回原来的RUNTIME，接下来我们介绍如何通过反射机制在运行时解析我们的自定义注解类型。</p><p>java.lang.reflect包中有一个AnnotatedElement接口，这个接口定义了用于获取注解信息的几个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">getAnnotation</span><span class="params">(Class annotationClass)</span> <span class="comment">//返回该程序元素的指定类型的注解，若不存在这个类型的注解则返回null</span></span></span><br><span class="line"><span class="function">Annotation[] <span class="title">getAnnotations</span><span class="params">()</span> <span class="comment">//返回修饰该程序元素的所有注解</span></span></span><br><span class="line"><span class="function">Annotation[] <span class="title">getDeclaredAnnotations</span><span class="params">()</span> <span class="comment">//返回直接修饰该元素的所有注解</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span> <span class="comment">//当该程序元素被指定类型注解修饰时，返回true，否则返回false</span></span></span><br></pre></td></tr></table></figure><p>   解析我们上面的自定义注解MethodInfo的相关示例代码如下(AnnotationParser.java)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationParser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = AnnotationTest.class;</span><br><span class="line">            <span class="keyword">for</span> (Method method : cls.getMethods()) &#123;</span><br><span class="line">                MethodInfo methodInfo = method.getAnnotation(MethodInfo.class);</span><br><span class="line">                <span class="keyword">if</span> (methodInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"method name:"</span> + method.getName());</span><br><span class="line">                    System.out.println(<span class="string">"method author:"</span> + methodInfo.author());</span><br><span class="line">                    System.out.println(<span class="string">"method date:"</span> + methodInfo.date());</span><br><span class="line">                    System.out.println(<span class="string">"method version:"</span> + methodInfo.version());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行以上代码我们可以得到以下输出：</p><blockquote><p>method name:main<br>method author:absfree<br>method date:20160410<br>method version:1  </p></blockquote><p> 这说明我们已经成功解析了自定义注解。关于注解有点我们需要明确的是，作为描述代码本身的一种元数据，注解是一种”被动“的信息。也就是说，必须由编译器或虚拟机来“主动”解析它，它才能发挥自己的作用。</p><h2 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h2><ol><li><p>Java Documention</p></li><li><p><a href="http://a.codekk.com/detail/Android/Trinea/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20Java%20%E6%B3%A8%E8%A7%A3%20Annotation%22" target="_blank" rel="noopener">公共技术点之Java注解</a></p></li><li><p><a href="http://gityuan.com/2016/01/23/java-annotation/" target="_blank" rel="noopener">Java 注解</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/absfree/p/5295861.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接：Java核心技
      
    
    </summary>
    
      <category term="Repost" scheme="http://blog.duanxu.tech/categories/Repost/"/>
    
    
      <category term="Java" scheme="http://blog.duanxu.tech/tags/Java/"/>
    
      <category term="Annotation" scheme="http://blog.duanxu.tech/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>[转]一起写一个JSON解析器</title>
    <link href="http://blog.duanxu.tech/2017/03/30/2017/2017-03-30-%E8%BD%AC-%E4%B8%80%E8%B5%B7%E5%86%99%E4%B8%80%E4%B8%AAJSON%E8%A7%A3%E6%9E%90%E5%99%A8/"/>
    <id>http://blog.duanxu.tech/2017/03/30/2017/2017-03-30-转-一起写一个JSON解析器/</id>
    <published>2017-03-30T12:45:30.000Z</published>
    <updated>2018-12-07T12:36:56.754Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p><a href="http://www.cnblogs.com/absfree/p/5502705.html" target="_blank" rel="noopener">原文链接：一起写一个JSON解析器</a></p><p>【本篇博文会介绍JSON解析的原理与实现，并一步一步写出来一个简单但实用的JSON解析器，项目地址：<a href="https://github.com/absfree/SimpleJSON" target="_blank" rel="noopener">SimpleJSON</a>。希望通过这篇博文，能让我们以后与JSON打交道时更加得心应手。由于个人水平有限，叙述中难免存在不准确或是不清晰的地方，希望大家可以指正：）】</p><h2 id="一、JSON解析器介绍"><a href="#一、JSON解析器介绍" class="headerlink" title="一、JSON解析器介绍"></a>一、JSON解析器介绍</h2><p>相信大家在平时的开发中没少与JSON打交道，那么我们平常使用的一些JSON解析库都为我们做了哪些工作呢？这里我们以知乎日报API返回的JSON数据来介绍一下两个主流JSON解析库的用法。我们对地址 <a href="http://news-at.zhihu.com/api/4/news/latest进行GET请求，返回的JSON响应的整体结构如下：" target="_blank" rel="noopener">http://news-at.zhihu.com/api/4/news/latest进行GET请求，返回的JSON响应的整体结构如下：</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    date: "20140523",</span><br><span class="line">    stories: [</span><br><span class="line">        &#123;</span><br><span class="line">            images:["http:\/\/pic1.zhimg.com\/4e7ecded780717589609d950bddbf95c.jpg"]</span><br><span class="line">            type: 0,</span><br><span class="line">            id: 3930445,</span><br><span class="line">            ga_prefix: "052321",</span><br><span class="line"></span><br><span class="line">            title: "中国古代家具发展到今天有两个高峰，一个两宋一个明末（多图）",</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">       &#125;,</span><br><span class="line">    ...</span><br><span class="line">    ],</span><br><span class="line">    top_stories: [</span><br><span class="line">        &#123;</span><br><span class="line">            image:"http:\/\/pic4.zhimg.com\/8f209bcfb5b6e0625ca808e43c0a0a73.jpg",</span><br><span class="line">            type:0,</span><br><span class="line">            id:8314043,</span><br><span class="line">            ga_prefix:"051717",</span><br><span class="line">            title:"怎样才能找到自己的兴趣所在，发自内心地去工作？"</span><br><span class="line">       &#125;, </span><br><span class="line">      ... </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上JSON响应表示的是某天的最新知乎日报内容。顶层的date的值表示的是日期；stories的值是一个数组，数组的每个元素又包含images、type、id等域；top_stories的值也是一个数组，数组元素的结构与stories类似。我们先把把以上返回的JSON数据表示为一个model类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatestNews</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TopStory&gt; top_stories;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Story&gt; stories;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略LatestNews类的getter与setter</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TopStory</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String image;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//省略TopStory类的getter与setter</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Story</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; images;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//省略Story类的getter与setter</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上的代码中，我们定义的域与返回的JSON响应的键一一对应。那么接下来我们就来完成JSON响应的解析吧。首先我们使用org.json包来完成JSON的解析。相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONParsingTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String urlString = <span class="string">"http://news-at.zhihu.com/api/4/news/latest"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String jsonString = <span class="keyword">new</span> String(HttpUtil.get(urlString));</span><br><span class="line">            JSONObject latestNewsJSON = <span class="keyword">new</span> JSONObject(jsonString);</span><br><span class="line">            String date = latestNewsJSON.getString(<span class="string">"date"</span>);</span><br><span class="line">            JSONArray top_storiesJSON = latestNewsJSON.getJSONArray(<span class="string">"top_stories"</span>);</span><br><span class="line">            LatestNews latest = <span class="keyword">new</span> LatestNews();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            List&lt;LatestNews.TopStory&gt; stories = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top_storiesJSON.length(); i++) &#123;</span><br><span class="line">                LatestNews.TopStory story = <span class="keyword">new</span> LatestNews.TopStory();</span><br><span class="line">                story.setId(((JObject) top_storiesJSON.get(i)).getInt(<span class="string">"id"</span>));</span><br><span class="line">                story.setType(((JObject) top_storiesJSON.get(i)).getInt(<span class="string">"type"</span>));</span><br><span class="line">                story.setImage(((JObject) top_storiesJSON.get(i)).getString(<span class="string">"image"</span>));</span><br><span class="line">                story.setTitle(((JObject) top_storiesJSON.get(i)).getString(<span class="string">"title"</span>));</span><br><span class="line">                stories.add(story);</span><br><span class="line">            &#125;</span><br><span class="line">            latest.setDate(date);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"date: "</span> + latest.getDate());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stories.size(); i++) &#123;</span><br><span class="line">                System.out.println(stories.get(i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信Android开发的小伙伴对org.json都不陌生，因为Android SDK中提供的JSON解析类库就是org.json，要是使用别的开发环境我们可能就需要手动导入org.json包。</p><p>第5行我们调用了HttpUtil.get方法来获取JSON格式的响应字符串，HttpUtil是我们封装的一个用于网络请求的静态代码库，代码见这里：</p><p>接着在第6行，我们以JSON字符串为参数构造了一个JSONObject对象；在第7行我们调用JSONObject的实例方法getString根据键名“date”获取了date对应的值并保存在了一个String变量中。</p><p>在第8行我们调用了JSONObject的getJSONArray方法来从JSONObject对象中获取一个JSON数组，这个JSON数组的每个元素均为JSONObject（代表了一个TopStory)，每个JSONObject都可以通过在其上调用getInt、getString等方法获取type、title等键的值。正如我们在第14到21行所做的，我们通过一个循环读取JSONArray的每个JSONObject中的title、id、type、image域的值，并把他们写入TopStory对象的对应实例域。</p><p>   我们可以看到，当返回的JSON响应结构比较复杂时，使用org.json包来解析响应比较繁琐。那么我们看看如何使用gson（Google出品的JSON解析库，被广泛应用于Android开发中）来完成相同的工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String urlString = <span class="string">"http://news-at.zhihu.com/api/4/news/latest"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LatestNews latest = <span class="keyword">new</span> LatestNews();</span><br><span class="line">        String jsonString = <span class="keyword">new</span> String(HttpUtil.get(urlString));</span><br><span class="line">        latest = (<span class="keyword">new</span> Gson()).fromJson(jsonString, LatestNews.class);</span><br><span class="line">        System.out.println(latest.getDate());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; latest.getTop_stories().size(); i++) &#123;</span><br><span class="line">            System.out.println(latest.getTop_stories().get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，使用gson完成同样的工作只需要一行代码。那么让我们一起来看一下gson是如何做到的。在上面的代码中，我们调用了Gson对象的fromJson方法，传入了返回的JSON字符串和Latest.class作为参数。看到Latest.class，我们就大概能够知道fromJson方法的内部工作机制了。可以通过反射获取到LatestNews的各个实例域，然后帮助我们读取并填充这些实例域。那么fromJson怎么知道我们要填充LatestNews的哪些实例域呢？实际上我们必须保证LatestNews的域的名字与JSON字符串中对应的键的名字相同，这样gson就能够把我们的model类与JSON字符串“一一对应“起来，也就是说我们要保证我们的model类与JSON字符串具有相同的层级结构，这样gson就可以根据名称从JSON字符串中为我们的实例域寻找一个对应的值。我们可以做个小实验：把LatestNews中TopStory的title实例域的名字改为title1，这时再只执行以上程序，会发现每个story的title1域均变为null了。</p><p>通过上面的介绍，我们感受到了JSON解析库带给我们的便利，接下来我们一起来实现org.json包提供给我们的基本JSON解析功能，然后再进一步尝试实现gson提供给我们的更方便快捷的JSON解析功能。</p><h2 id="二、JSON解析基本原理"><a href="#二、JSON解析基本原理" class="headerlink" title="二、JSON解析基本原理"></a>二、JSON解析基本原理</h2><p>现在，假设我们没有任何现成的JSON解析库可用，我们要自己完成JSON的解析工作。JSON解析的工作主要分一下几步：</p><ul><li>词法分析：这个过程把输入的JSON字符串分解为一系列词法单元（token）。比如以下JSON字符串：<br>{<br>  “date” : 20160517,<br>  “id” : 1<br>}<br>经过词法分析后，会被分解为以下token：“{”、 ”date“、 “:”、 “20160517”、 “,”、 “id”、 “:”、 “1”、 “}”。  </li></ul><ul><li>语法分析：这一过程的输入是上一步得到的token序列。语法分析这一阶段完成的工作是把token构造成抽象语法单元。对于JSON的解析，这里的抽象语法对象就类似于org.json包中的JSONObject和JSONArray等。有了抽象语法对象，我们就可以进一步把它“映射到”Java数据类型。</li></ul><p>实际上，在进行词法分析之前，JSON数据对计算机来说只是一个没有意义的字符串而已。词法分析的目的是把这些无意义的字符串变成一个一个的token，而这些token有着自己的类型和值，所以计算机能够区分不同的token，还能以token为单位解读JSON数据。接下来，语法分析的目的就是进一步处理token，把token构造成一棵抽象语法树（Abstract Syntax Tree）（这棵树的结点是我们上面所说的抽象语法对象）。比如上面的JSON数据我们经过词法分析后得到了一系列token，然后我们把这些token作为语法分析的输入，就可以构造出一个JSONObject对象（即只有一个结点的抽象语法树），这个JSONObject对象有date和id两个实例域。下面我们来分别介绍词法分析与语法分析的原理和实现。</p><h3 id="1-词法分析"><a href="#1-词法分析" class="headerlink" title="1. 词法分析"></a>1. 词法分析</h3><p>JSON字符串中，一共有几种token呢？根据<a href="http://www.json.org/对JSON格式的相关定义，我们可以把token分为以下类型：" target="_blank" rel="noopener">http://www.json.org/对JSON格式的相关定义，我们可以把token分为以下类型：</a></p><ul><li>STRING（字符串字面量）</li><li>NUMBER（数字字面量）</li><li>NULL（null）</li><li>START_ARRAY（[）</li><li>END_ARRAY（]）</li><li>START_OBJ（{）</li><li>END_OBJ（}）</li><li>COMMA（,）</li><li>COLON（:）</li><li>BOOLEAN（true或者false）</li><li>END_DOC（表示JSON数据的结束）</li></ul><p>我们可以定义一个枚举类型来表示不同的token类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TokenType &#123;</span><br><span class="line">    START_OBJ, END_OBJ, START_ARRAY, END_ARRAY, NULL, NUMBER, STRING, BOOLEAN, COLON, COMMA, END_DOC</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们还需要定义一个Token类用于表示token：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Token</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TokenType type;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Token</span><span class="params">(TokenType type, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenType <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这之后，我们就可以开始写词法分析器了，词法分析器通常被称为lexer或是tokenizer。我们可以使用DFA（确定有限状态自动机）来实现tokenizer，也可以直接使用使用Java的regex包。这里我们使用DFA来实现tokenizer。</p><p>实现词法分析器（tokenizer）和语法分析器（parser）的依据都是JSON文法，完整的JSON文法如下（来自<a href="https://www.zhihu.com/question/24640264/answer/80500016）：" target="_blank" rel="noopener">https://www.zhihu.com/question/24640264/answer/80500016）：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">object = &#123;&#125; | &#123; members &#125;</span><br><span class="line">members = pair | pair , members</span><br><span class="line">pair = string : value</span><br><span class="line">array = [] | [ elements ]</span><br><span class="line">elements = value  | value , elements</span><br><span class="line">value = string | number | object | array | true | false | null</span><br><span class="line">string = &quot;&quot; | &quot; chars &quot;</span><br><span class="line">chars = char | char chars</span><br><span class="line">char = any-Unicode-character-except-&quot;-or-\-or- control-character | \&quot; | \\ | \/ | \b | \f | \n | \r | \t | \u four-hex-digits</span><br><span class="line">number = int | int frac | int exp | int frac exp</span><br><span class="line">int = digit | digit1-9 digits  | - digit | - digit1-9 digits</span><br><span class="line">frac = . digits</span><br><span class="line">exp = e digits</span><br><span class="line">digits = digit | digit digits</span><br><span class="line">e = e | e+ | e-  | E | E+ | E-</span><br></pre></td></tr></table></figure><p>现在，我们就可以根据JSON的文法来构造DFA了，核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Token <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    c = <span class="string">'?'</span>;</span><br><span class="line">    Token token = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;    <span class="comment">//先读一个字符，若为空白符（ASCII码在[0, 20H]上）则接着读，直到刚读的字符非空白符</span></span><br><span class="line">        c = read();</span><br><span class="line">    &#125; <span class="keyword">while</span> (isSpace(c));</span><br><span class="line">    <span class="keyword">if</span> (isNull(c)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.NULL, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">','</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.COMMA, <span class="string">","</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">':'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.COLON, <span class="string">":"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.START_OBJ, <span class="string">"&#123;"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'['</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.START_ARRAY, <span class="string">"["</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">']'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.END_ARRAY, <span class="string">"]"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.END_OBJ, <span class="string">"&#125;"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isTrue(c)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.BOOLEAN, <span class="string">"true"</span>); <span class="comment">//the value of TRUE is not null</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFalse(c)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.BOOLEAN, <span class="string">"false"</span>); <span class="comment">//the value of FALSE is null</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'"'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> readString();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNum(c)) &#123;</span><br><span class="line">        unread();</span><br><span class="line">        <span class="keyword">return</span> readNum();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.END_DOC, <span class="string">"EOF"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid JSON input."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，tokenizer的核心代码十分简洁，因为我们把一些稍繁杂的处理逻辑都封装在了一个个方法中，比如上面的readNum方法、readString方法等。</p><p> 以上代码的第4到第6行的功能是消耗掉开头的所有空白字符（如space、tab等），直到读取到一个非空白字符，isSpace方法用于判断一个字符是否属于空白字符。也就是说，DFA从起始状态开始，若读到一个空字符，会在起始状态不断循环，直到遇到非空字符，状态转移情况如下：</p><div style="text-align: center"><br><img src="/images/201703/2017033001.png"><br></div><p>接下来我们可以看到从代码的第7行到第33行是一个if语句块，外层的所有if分支覆盖了DFA的所有可能状态。在第7行我们会判断读入的是不是“null”，isNull方法的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">(<span class="keyword">int</span> c)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'n'</span>) &#123;</span><br><span class="line">        c = read();</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'u'</span>) &#123;</span><br><span class="line">            c = read();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'l'</span>) &#123;</span><br><span class="line">                c = read();</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'l'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid JSON input."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid JSON input."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid JSON input."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，当第一个非空字符为’n’时，我们会判断下一个是否为‘u’，接着判断下面的是不是’u’、’l’，这中间任何一步的判断结果为否，就说明我们遇到了一个非法关键字（比如null拼写错误，拼成了noll，这就是非法关键字），就会抛出异常，只有我们依次读取的4个字符分别为’n’、’u’、’l’、’l’时，isNull方法才会返回true。下面出现的isTrue、isFalse分别用来判断“true”和“false”，具体实现与isNull类似。</p><p>   现在让我们回到以上的代码，接着看从第9行到第20行，我们会根据下一个字符的不同转移到不同的状态。若下一个字符为’{‘、 ‘}’、 ‘[‘、 ‘]’、 ‘:’、 ‘,’等6种中的一个，则DFA运行停止，此时我们构造一个新的相应类型的Token对象，并直接返回这个token，作为DFA本次运行的结果。这几个状态转移的示意图如下：</p><div style="text-align: center"><br><img src="/images/201703/2017033002.png"><br></div><p>上图中圆圈中的数字仅仅表示状态的标号，我们仅画出了下一个字符分别为’{‘、’[‘、’:’时的状态转移（省略了3种情况）。</p><p>接下来，让我们看第25行到第26行的代码。这部分代码的主要作用是读取一个由双引号包裹的字符串字面量并构造一个TokenType为STRING的Token对象。若刚读取到的字符为双引号，意味着接下来的是一个字符串字面量，所以我们调用readString方法来读入一个字符串变量。readString方法的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Token <span class="title">readString</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            c = read();</span><br><span class="line">            <span class="keyword">if</span> (isEscape()) &#123;    <span class="comment">//判断是否为\", \\, \/, \b, \f, \n, \t, \r.</span></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'u'</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">'\\'</span> + (<span class="keyword">char</span>) c);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                        c = read();</span><br><span class="line">                        <span class="keyword">if</span> (isHex(c)) &#123;</span><br><span class="line">                            sb.append((<span class="keyword">char</span>) c);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid Json input."</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sb.append(<span class="string">"\\"</span> + (<span class="keyword">char</span>) c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'"'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.STRING, sb.toString());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'\r'</span> || c == <span class="string">'\n'</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid JSON input."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append((<span class="keyword">char</span>) c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们来看一下readString方法的代码。第3到26行是一个无限循环，退出循环的条件有两个：一个是又读取到一个双引号（意味着字符串的结束），第二个条件是读取到了非法字符（’\r’或’、’\n’）。第5行的功能是判断刚读取的字符是否是转义字符的开始，isEscape方法的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEscape</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'\\'</span>) &#123;</span><br><span class="line">        c = read();</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'"'</span> || c == <span class="string">'\\'</span> || c == <span class="string">'/'</span> || c == <span class="string">'b'</span> ||</span><br><span class="line">                c == <span class="string">'f'</span> || c == <span class="string">'n'</span> || c == <span class="string">'t'</span> || c == <span class="string">'r'</span> || c == <span class="string">'u'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid JSON input."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到这个方法是用来判断接下来的输入流中是否为以下字符组合：\”, \, \/, \b, \f, \n, \t, \r, \uhhhh（hhhh表示四位十六进制数）。若是以上几种中的一个，我们会接着判断是不是“\uhhhh“，并对他进行特殊处理，如readString方法的第7到15行所示，实际上就是先把’\u’添加到StringBuilder对象中，在依次读取它后面的4个字符，若是十六进制数字，则append，否则抛出异常。</p><p>现在让我们回到start方法，接着看第27到29行的代码，这两行代码用于读入一个数字字面量。isNum方法用于判断输入流中接下来的内容是否是数字字面量，这个方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isDigit(c) || c == <span class="string">'-'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面我们贴出的JSON文法，只有下一个字符为数字0~9或是’-‘，接下来的内容才可能是一个数字字面量，isDigit方法用于判断下一个字符是否是0~9这10个数字中的一个。</p><p>我们注意到第28行有一个unread方法调用，意味着我们下回调用read方法还是返回上回调用read方法返回的那个字符，为什么这么做我们看一下readNum方法的代码就知道了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Token <span class="title">readNum</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> c = read();</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'-'</span>) &#123; <span class="comment">//-</span></span><br><span class="line">            sb.append((<span class="keyword">char</span>) c);</span><br><span class="line">            c = read();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'0'</span>) &#123; <span class="comment">//-0</span></span><br><span class="line">                sb.append((<span class="keyword">char</span>) c);</span><br><span class="line">                numAppend(sb);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDigitOne2Nine(c)) &#123; <span class="comment">//-digit1-9</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    sb.append((<span class="keyword">char</span>) c);</span><br><span class="line">                    c = read();</span><br><span class="line">                &#125; <span class="keyword">while</span> (isDigit(c));</span><br><span class="line">                unread();</span><br><span class="line">                numAppend(sb);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"- not followed by digit"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'0'</span>) &#123; <span class="comment">//0</span></span><br><span class="line">            sb.append((<span class="keyword">char</span>) c);</span><br><span class="line">            numAppend(sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDigitOne2Nine(c)) &#123; <span class="comment">//digit1-9</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                sb.append((<span class="keyword">char</span>) c);</span><br><span class="line">                c = read();</span><br><span class="line">            &#125; <span class="keyword">while</span> (isDigit(c));</span><br><span class="line">            unread();</span><br><span class="line">            numAppend(sb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(TokenType.NUMBER, sb.toString()); <span class="comment">//the value of 0 is null</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们来看一下第4到31行，外层的if语句有三种情况：分别对应着刚读取的字符为’-‘、’0’和数字1~9中的一个。我们来看一下第5到9行的代码，对应了刚读取到的字符为’-‘这种情况。这种情况表示这个数字字面量是个负数。然后我们再看这种情况下的内层if语句，共有两种情况，一是负号后面的字符为0，另一个是负号后面的字符为数字1~9中的一个。前者表示本次读取的数字字面量为-0（后面可以跟着frac或是exp），后者表示本次读取的字面量为负整数（后面也可以跟着frac或exp）。然后我们看第9行调用的numAppend方法，它的源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">numAppend</span><span class="params">(StringBuilder sb)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    c = read();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'.'</span>) &#123; <span class="comment">//int frac</span></span><br><span class="line">        sb.append((<span class="keyword">char</span>) c); <span class="comment">//apppend '.'</span></span><br><span class="line">        appendFrac(sb);</span><br><span class="line">        <span class="keyword">if</span> (isExp(c)) &#123; <span class="comment">//int frac exp</span></span><br><span class="line">            sb.append((<span class="keyword">char</span>) c); <span class="comment">//append 'e' or 'E';</span></span><br><span class="line">            appendExp(sb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isExp(c)) &#123; <span class="comment">// int exp</span></span><br><span class="line">        sb.append((<span class="keyword">char</span>) c); <span class="comment">//append 'e' or 'E'</span></span><br><span class="line">        appendExp(sb);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        unread();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们上面贴的JSON文法中对数字字面量的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number = int | int frac | int exp | int frac exp</span><br></pre></td></tr></table></figure><p>   numAppend方法的功能就是在我们读取了数字字面量的int部分后，接着读取后面可能还有的frac或exp部分，上面的appendFrac方法用于读取frac部分，appendExp方法用于读取exp部分。具体的逻辑比较直接，大家直接看代码就可以了。（ 这部分的处理逻辑是否正确未经过严格测试，如有错误希望大家可以指出，谢谢：) ）</p><p>   到了这里，tokenizer的核心——start()方法我们已经介绍的差不多了，tokenizer的完整代码请参考文章开头给出的链接，接下来让我们看一下如何实现JSON parser。</p><h3 id="2-语法分析"><a href="#2-语法分析" class="headerlink" title="2. 语法分析"></a>2. 语法分析</h3><p>经过前一步的词法分析，我们已经得到了一个token序列，现在让我们来用这个序列构造出类似于org.json包的JSONObject与JSONArray对象。现在我们的任务就是编写一个语法分析器（parser），以词法分析得到的token序列为输入，产生JSONObject或是JSONArray抽象语法对象。语法分析的依据同样是上面我们贴出的JSON文法。</p><p>   语法分析器依据JSON文法的以下部分实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">object = &#123;&#125; | &#123; members &#125;</span><br><span class="line">members = pair | pair , members</span><br><span class="line">pair = string : value</span><br><span class="line">array = [] | [ elements ]</span><br><span class="line">elements = value  | value , elements</span><br><span class="line">value = string | number | object | array | true | false | null</span><br></pre></td></tr></table></figure><p>具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Tokenizer tokenizer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parser</span><span class="params">(Tokenizer tokenizer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tokenizer = tokenizer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JObject <span class="title">object</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tokenizer.next(); <span class="comment">//consume '&#123;'</span></span><br><span class="line">        Map&lt;String, Value&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (isToken(TokenType.END_OBJ)) &#123;</span><br><span class="line">            tokenizer.next(); <span class="comment">//consume '&#125;'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JObject(map);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isToken(TokenType.STRING)) &#123;</span><br><span class="line">            map = key(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JObject(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Value&gt; <span class="title">key</span><span class="params">(Map&lt;String, Value&gt; map)</span> </span>&#123;</span><br><span class="line">        String key = tokenizer.next().getValue();</span><br><span class="line">        <span class="keyword">if</span> (!isToken(TokenType.COLON)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid JSON input."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tokenizer.next(); <span class="comment">//consume ':'</span></span><br><span class="line">            <span class="keyword">if</span> (isPrimary()) &#123;</span><br><span class="line">                Value primary = <span class="keyword">new</span> Primary(tokenizer.next().getValue());</span><br><span class="line">                map.put(key, primary);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isToken(TokenType.START_ARRAY)) &#123;</span><br><span class="line">                Value array = array();</span><br><span class="line">                map.put(key, array);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isToken(TokenType.COMMA)) &#123;</span><br><span class="line">                tokenizer.next(); <span class="comment">//consume ','</span></span><br><span class="line">                <span class="keyword">if</span> (isToken(TokenType.STRING)) &#123;</span><br><span class="line">                    map = key(map);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isToken(TokenType.END_OBJ)) &#123;</span><br><span class="line">                tokenizer.next(); <span class="comment">//consume '&#125;'</span></span><br><span class="line">                <span class="keyword">return</span> map;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid JSON input."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JArray <span class="title">array</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tokenizer.next(); <span class="comment">//consume '['</span></span><br><span class="line">        List&lt;Json&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        JArray array = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (isToken(TokenType.START_ARRAY)) &#123;</span><br><span class="line">            array = array();</span><br><span class="line">            list.add(array);</span><br><span class="line">            <span class="keyword">if</span> (isToken(TokenType.COMMA)) &#123;</span><br><span class="line">                tokenizer.next(); <span class="comment">//consume ','</span></span><br><span class="line">                list = element(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPrimary()) &#123;</span><br><span class="line">            list = element(list);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isToken(TokenType.START_OBJ)) &#123;</span><br><span class="line">            list.add(object());</span><br><span class="line">            <span class="keyword">while</span> (isToken(TokenType.COMMA)) &#123;</span><br><span class="line">                tokenizer.next(); <span class="comment">//consume ','</span></span><br><span class="line">                list.add(object());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isToken(TokenType.END_ARRAY)) &#123;</span><br><span class="line">            tokenizer.next(); <span class="comment">//consume ']'</span></span><br><span class="line">            array =  <span class="keyword">new</span> JArray(list);</span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        &#125;</span><br><span class="line">        tokenizer.next(); <span class="comment">//consume ']'</span></span><br><span class="line">        array = <span class="keyword">new</span> JArray(list);</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Json&gt; <span class="title">element</span><span class="params">(List&lt;Json&gt; list)</span> </span>&#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> Primary(tokenizer.next().getValue()));</span><br><span class="line">        <span class="keyword">if</span> (isToken(TokenType.COMMA)) &#123;</span><br><span class="line">            tokenizer.next(); <span class="comment">//consume ','</span></span><br><span class="line">            <span class="keyword">if</span> (isPrimary()) &#123;</span><br><span class="line">                list = element(list);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isToken(TokenType.START_OBJ)) &#123;</span><br><span class="line">                list.add(object());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isToken(TokenType.START_ARRAY)) &#123;</span><br><span class="line">                list.add(array());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid JSON input."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isToken(TokenType.END_ARRAY)) &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid JSON input."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Json <span class="title">json</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TokenType type = tokenizer.peek(<span class="number">0</span>).getType();</span><br><span class="line">        <span class="keyword">if</span> (type == TokenType.START_ARRAY) &#123;</span><br><span class="line">            <span class="keyword">return</span> array();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == TokenType.START_OBJ) &#123;</span><br><span class="line">            <span class="keyword">return</span> object();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JsonParseException(<span class="string">"Invalid JSON input."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isToken</span><span class="params">(TokenType tokenType)</span> </span>&#123;</span><br><span class="line">        Token t = tokenizer.peek(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> t.getType() == tokenType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isToken</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Token t = tokenizer.peek(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> t.getValue().equals(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPrimary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TokenType type = tokenizer.peek(<span class="number">0</span>).getType();</span><br><span class="line">        <span class="keyword">return</span> type == TokenType.BOOLEAN || type == TokenType.NULL  ||</span><br><span class="line">                type == TokenType.NUMBER || type == TokenType.STRING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Json <span class="title">parse</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Json result = json();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先来看以上代码的第98到107行的json方法，这个方法可以作为语法分析的起点。它会根据第一个Token的类型是START_OBJ或START_ARRAY而选择调用object方法或是array方法。object方法会返回一个JObject对象（JSONObject），array方法会返回一个JArray对象（JSONArray）。JArray与JObject的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JArray</span> <span class="keyword">extends</span> <span class="title">Json</span> <span class="keyword">implements</span>  <span class="title">Value</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Json&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JArray</span><span class="params">(List&lt;Json&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Json element)</span> </span>&#123;</span><br><span class="line">        list.add(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Json <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        . . .</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JObject</span> <span class="keyword">extends</span> <span class="title">Json</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Value&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JObject</span><span class="params">(Map&lt;String, Value&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt((String) map.get(key).value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) map.get(key).value();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.parseBoolean((String) map.get(key).value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JArray <span class="title">getJArray</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (JArray) map.get(key).value();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        . . .</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON parser的逻辑也没有太复杂的地方，如果哪位同学不太理解，可以写一个test case跟着走几遍。</p><p>接下来，我们要进入有意思的部分了——实现类似org.json包的根据JSON字符串直接构造JSONObject与JSONArray。</p><h3 id="3-parseJSONObject方法与parseJSONArray方法"><a href="#3-parseJSONObject方法与parseJSONArray方法" class="headerlink" title="3. parseJSONObject方法与parseJSONArray方法"></a>3. parseJSONObject方法与parseJSONArray方法</h3><p>基于以上的tokenizer与parser，我们可以实现两个实用的JSON解析方法，有了这两个方法，可以说我们就完成了一个基本的JSON解析库。</p><p>####（1）parseJSONObject方法</p><p>该方法以一个JSON字符串为输入，返回一个JObject，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JObject <span class="title">parseJSONObject</span><span class="params">(String jsonString)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Tokenizer tokenizer = <span class="keyword">new</span> Tokenizer(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> StringReader(jsonString)));</span><br><span class="line">    tokenizer.tokenize();</span><br><span class="line">    Parser parser = <span class="keyword">new</span> Parser(tokenizer);</span><br><span class="line">    <span class="keyword">return</span> parser.object();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####（2）parseJSONArray方法</p><p>该方法以一个JSON字符串为输入，返回一个JArray，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JObject <span class="title">parseJSONArray</span><span class="params">(String jsonString)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Tokenizer tokenizer = <span class="keyword">new</span> Tokenizer(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> StringReader(jsonString)));</span><br><span class="line">    tokenizer.tokenize();</span><br><span class="line">    Parser parser = <span class="keyword">new</span> Parser(tokenizer);</span><br><span class="line">    <span class="keyword">return</span> parser.array();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们来测试以下这两个放究竟能不能用，test case如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         String jsonString = <span class="keyword">new</span> String(HttpUtil.get(urlString));</span><br><span class="line">         JObject latestNewsJSON = parseJSONObject(jsonString);</span><br><span class="line">         String date = latestNewsJSON.getString(<span class="string">"date"</span>);</span><br><span class="line">         JArray top_storiesJSON = latestNewsJSON.getJArray(<span class="string">"top_stories"</span>);</span><br><span class="line">         LatestNews latest = <span class="keyword">new</span> LatestNews();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         List&lt;LatestNews.TopStory&gt; stories = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top_storiesJSON.length(); i++) &#123;</span><br><span class="line">             LatestNews.TopStory story = <span class="keyword">new</span> LatestNews.TopStory();</span><br><span class="line">             story.setId(((JObject) top_storiesJSON.get(i)).getInt(<span class="string">"id"</span>));</span><br><span class="line">             story.setType(((JObject) top_storiesJSON.get(i)).getInt(<span class="string">"type"</span>));</span><br><span class="line">             story.setImage(((JObject) top_storiesJSON.get(i)).getString(<span class="string">"image"</span>));</span><br><span class="line">             story.setTitle(((JObject) top_storiesJSON.get(i)).getString(<span class="string">"title"</span>));</span><br><span class="line">             stories.add(story);</span><br><span class="line">         &#125;</span><br><span class="line">         latest.setDate(date);</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="string">"date: "</span> + latest.getDate());</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stories.size(); i++) &#123;</span><br><span class="line">             System.out.println(stories.get(i));</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>实际上，上面的代码只是把我们使用org.json包的代码稍作修改。然后我们可以得到了同使用org.json包一样的输出，这说明我们的JSON解析器工作正常。以上代码中的getInt方法与getString方法定义在JObject中，只需要根据要取得的值的类型做类型转换即可，具体实现可以参考开头给出的项目地址。接下来，让我们更上一层楼，实现一个类似与gson中fromJson方法的便捷方法。</p><h3 id="4-fromJson方法的实现"><a href="#4-fromJson方法的实现" class="headerlink" title="4. fromJson方法的实现"></a>4. fromJson方法的实现</h3><p>这个方法的核心思想是：根据给定的JSON字符串和model类的class对象，通过反射获取model类的各个实例域的类型及名称。然后用java.lang.reflect包提供给我们的方法在运行时创建一个model类的对象，然后根据它的实例域的名称从JObject中获取相应的值并为model类对象的对应实例域赋值。若实例域为List<t>，我们需要特殊进行处理，这里我们实现了一个inflateList方法来处理这种情况。fromJson方法的代码如下：</t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String jsonString, Class&lt;T&gt; classOfT)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Tokenizer tokenizer = <span class="keyword">new</span> Tokenizer(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> StringReader(jsonString)));</span><br><span class="line">        tokenizer.tokenize();</span><br><span class="line">        Parser parser = <span class="keyword">new</span> Parser(tokenizer);</span><br><span class="line">        JObject result = parser.object();</span><br><span class="line"></span><br><span class="line">        Constructor&lt;T&gt; constructor = classOfT.getConstructor();</span><br><span class="line">        Object latestNews = constructor.newInstance();</span><br><span class="line">        Field[] fields = classOfT.getDeclaredFields();</span><br><span class="line">        <span class="keyword">int</span> numField = fields.length;</span><br><span class="line">        String[] fieldNames = <span class="keyword">new</span> String[numField];</span><br><span class="line">        String[] fieldTypes = <span class="keyword">new</span> String[numField];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numField; i++) &#123;</span><br><span class="line">            String type = fields[i].getType().getTypeName();</span><br><span class="line">            String name = fields[i].getName();</span><br><span class="line">            fieldTypes[i] = type;</span><br><span class="line">            fieldNames[i] = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numField; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fieldTypes[i].equals(<span class="string">"java.lang.String"</span>)) &#123;</span><br><span class="line">                fields[i].setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                fields[i].set(latestNews, result.getString(fieldNames[i]));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldTypes[i].equals(<span class="string">"java.util.List"</span>)) &#123;</span><br><span class="line">                fields[i].setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                JArray array = result.getJArray(fieldNames[i]);</span><br><span class="line">                ParameterizedType pt = (ParameterizedType) fields[i].getGenericType();</span><br><span class="line">                Type elementType = pt.getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">                String elementTypeName = elementType.getTypeName();</span><br><span class="line">                Class&lt;?&gt; elementClass = Class.forName(elementTypeName);</span><br><span class="line">                fields[i].set(latestNews, inflateList(array, elementClass));<span class="comment">//类型捕获</span></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldTypes[i].equals(<span class="string">"int"</span>)) &#123;</span><br><span class="line">                fields[i].setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                fields[i].set(latestNews, result.getInt(fieldNames[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) latestNews;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在第8行，我们构造了一个LatestNews对象。在第9到18行，我们获取了LatestNews类的所有实例域，并把它们的名称存在了String数组fieldNames中，把它们的类型存在了String数组fieldTypes中。然后在第19到36行，我们遍历Field数组fields，对每个实例域进行赋值。若实例域的类型为int或是String或是primitive types（int、double等基本类型），则直接调用set方法对相应实例域赋值（简单起见，上面只实现了对String类型实例域的处理，对于primitive types的处理与之类似，感兴趣的同学可以自己尝试实现下）；若实例域的类型为List，则我们需要为这个List中的每个元素赋值。在第26到29行，我们获取了List中存储的元素的类型名称，然后根据这个名称获取了对应的class对象。在第30行，我们调用了inflateList方法来“填充“这个List，这里存在一个”类型捕获“，具体来说，就是inflateList方法接收的第2个参数Class<t>中的类型参数T捕获了List中存储元素的实际类型（第29行我们获取了这个实际类型并用类型通配符接收了它）。inflateList方法的代码如下：</t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">inflateList</span><span class="params">(JArray array, Class&lt;T&gt; clz)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = array.length();</span><br><span class="line"></span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">        Constructor&lt;T&gt; constructor = clz.getConstructor();</span><br><span class="line">        String className = clz.getName();</span><br><span class="line">        <span class="keyword">if</span> (className.equals(<span class="string">"java.lang.String"</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                String element = (String) ((Primary) array.get(i)).value();</span><br><span class="line">                list.add((T) element);</span><br><span class="line">                <span class="keyword">return</span> list;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] fields = clz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">int</span> numField = fields.length;</span><br><span class="line">        String[] fieldNames = <span class="keyword">new</span> String[numField];</span><br><span class="line">        String[] fieldTypes = <span class="keyword">new</span> String[numField];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numField; i++) &#123;</span><br><span class="line">            String type = fields[i].getType().getTypeName();</span><br><span class="line">            String name = fields[i].getName();</span><br><span class="line">            fieldTypes[i] = type;</span><br><span class="line">            fieldNames[i] = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            T element = constructor.newInstance();</span><br><span class="line">            JObject object = (JObject) array.get(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numField; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fieldTypes[j].equals(<span class="string">"java.lang.String"</span>)) &#123;</span><br><span class="line">                    fields[j].setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    fields[j].set(element, (object.getString(fieldNames[j])));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldTypes[j].equals(<span class="string">"java.util.List"</span>)) &#123;</span><br><span class="line">                    fields[j].setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    JArray nestArray = object.getJArray(fieldNames[j]);</span><br><span class="line">                    ParameterizedType pt = (ParameterizedType) fields[j].getGenericType();</span><br><span class="line">                    Type elementType = pt.getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">                    String elementTypeName = elementType.getTypeName();</span><br><span class="line">                    Class&lt;?&gt; elementClass = Class.forName(elementTypeName);</span><br><span class="line">                    String value = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                    fields[j].set(element, inflateList(nestArray, elementClass));<span class="comment">//Type Capture</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldTypes[j].equals(<span class="string">"int"</span>)) &#123;</span><br><span class="line">                    fields[j].setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    fields[j].set(element, object.getInt(fieldNames[j]));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            list.add(element);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在这个方法中，我们会根据对JSON解析获取的JArray所含的元素个数，以及我们之前获取到的元素的类型，构造相应数目的对象，并添加到list中去。具体的执行过程大家可以参考代码，逻辑比较直接。</p><p>需要注意的是以上代码的第7到13行，它的意思是若列表的元素类型为String，我们就应直接从相应的JArray中获取元素并添加到list中，然后直接返回list。实际上，对于primitive types我们都应该做相似处理，简单起见，这里只对String类型做了处理，其他primitive types的处理方式类似。</p><p>接下来测试一下我们实现的fromJson方法是否能如我们预期那样工作，test case还是解析上面的知乎日报API返回的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJSONTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String urlString = <span class="string">"http://news-at.zhihu.com/api/4/news/latest"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LatestNews latest = <span class="keyword">new</span> LatestNews();</span><br><span class="line">        String jsonString = <span class="keyword">new</span> String(HttpUtil.get(urlString));</span><br><span class="line">        latest = Parser.fromJson(jsonString, LatestNews.class);</span><br><span class="line">        System.out.println(latest.getDate());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; latest.getTop_stories().size(); i++) &#123;</span><br><span class="line">            System.out.println(latest.getTop_stories().get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以对比一下我们的实现与gson的实现的性能，我这里测试的结果是SimpleJSON的速度大约是gson速度的三倍，考虑到我们的SimpleJSON在不少地方”偷懒“了，这个测试结果并不能说明我们的实现性能要优于gson，不过这或许可以说明我们的JSON解析库还是具备一定的实用性…</p><p>由于本篇博文重点在介绍一个JSON解析器的实现思路，在具体实现上很多部分做的并不好。比如没有做足够多的测试来验证JSON解析的正确性，业务逻辑上也尽量使用直接的方式，许多地方没使用更加高效的实现，另外在抛出异常方面也比较随便，“一言不合”就抛异常…由于个人水平有限，代码中难免存在谬误，希望大家多多包涵，更希望可以指出不足之处，谢谢大家：）</p><h2 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h2><ol><li><p><a href="http://www.liaoxuefeng.com/article/0014211269349633dda29ee3f29413c91fa65c372585f23000?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">http://www.liaoxuefeng.com/article/0014211269349633dda29ee3f29413c91fa65c372585f23000?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p></li><li><p><a href="https://www.zhihu.com/question/24640264/answer/80500016" target="_blank" rel="noopener">https://www.zhihu.com/question/24640264/answer/80500016</a></p></li><li><p><a href="http://docs.oracle.com/javase/specs/jls/se8/jls8.pdf" target="_blank" rel="noopener">http://docs.oracle.com/javase/specs/jls/se8/jls8.pdf</a></p></li><li><p>《Java核心技术（卷一）》</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/absfree/p/5502705.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接：一起写一个JS
      
    
    </summary>
    
      <category term="Repost" scheme="http://blog.duanxu.tech/categories/Repost/"/>
    
    
      <category term="Java" scheme="http://blog.duanxu.tech/tags/Java/"/>
    
      <category term="JSON" scheme="http://blog.duanxu.tech/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>[转]三十分钟学会SED</title>
    <link href="http://blog.duanxu.tech/2016/12/27/2016/2016-12-27-%E8%BD%AC-%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9ASED/"/>
    <id>http://blog.duanxu.tech/2016/12/27/2016/2016-12-27-转-三十分钟学会SED/</id>
    <published>2016-12-27T03:37:30.000Z</published>
    <updated>2018-12-07T12:53:03.005Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p><a href="https://github.com/mylxsw/growing-up/blob/master/doc/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9ASED.md" target="_blank" rel="noopener">原文链接：三十分钟学会SED</a></p><p><img src="https://oayrssjpa.qnssl.com/2016-11-27-14802608583950.jpg" alt=""></p><p>本文承接之前写的<a href="https://aicode.cc/san-shi-fen-zhong-xue-huiawk.html" target="_blank" rel="noopener">三十分钟学会AWK</a>一文，在学习完AWK之后，趁热打铁又学习了一下SED，不得不说这两个工具真的堪称文本处理神器，谁用谁知道！本文大部分内容依旧是翻译自Tutorialspoint上的入门教程，这次是 <a href="http://www.tutorialspoint.com/sed/index.htm" target="_blank" rel="noopener">Sed Tutorial</a> 一文，内容做了一些删减和补充，增加了一些原文中没有提及到的语法和命令的讲解，并且对原文所有的示例都一一进行了验证，希望本文对大家学习和了解Sed有所帮助。</p><p>文中用到的测试文件可以在 <a href="https://github.com/mylxsw/sed-demo" target="_blank" rel="noopener">https://github.com/mylxsw/sed-demo</a>找到。</p><p>本文将会持续修正和更新，最新内容请参考我的 <a href="https://github.com/mylxsw" target="_blank" rel="noopener">GITHUB</a> 上的 <a href="https://github.com/mylxsw/growing-up" target="_blank" rel="noopener">程序猿成长计划</a> 项目，欢迎 Star。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SED的英文全称是 <strong>Stream EDitor</strong>，它是一个简单而强大的文本解析转换工具，在1973-1974年期间由贝尔实验室的<em>Lee E. McMahon</em>开发，今天，它已经运行在所有的主流操作系统上了。</p><p><em>McMahon</em>创建了一个通用的行编辑器，最终变成为了SED。SED的很多语法和特性都借鉴了<strong>ed</strong>编辑器。设计之初，它就已经支持正则表达式，SED可以从文件中接受类似于管道的输入，也可以接受来自标准输入流的输入。</p><p>SED由自由软件基金组织（FSF）开发和维护并且随着GNU/Linux进行分发，因此，通常它也称作 <strong>GNU SED</strong>。对于新手来说，SED的语法看起来可能有些神秘，但是，一旦掌握了它的语法，你就可以只用几行代码去解决非常复杂的任务，这就是SED的魅力所在。</p><h3 id="SED的典型用途"><a href="#SED的典型用途" class="headerlink" title="SED的典型用途"></a>SED的典型用途</h3><p>SED的用途非常广泛，例如：</p><ul><li>文本替换</li><li>选择性的输出文本文件</li><li>从文本文件的某处开始编辑</li><li>无交互式的对文本文件进行编辑等</li></ul><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>在本章中，我们将会探索SED是如何工作的，要想成为一个SED专家，你需要知道它的内部实现。SED遵循简单的工作流：<strong>读取</strong>，<strong>执行</strong>和<strong>显示</strong>，下图描述了该工作流：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://oayrssjpa.qnssl.com/2016-10-31-14614770425007.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><strong>读取</strong>： SED从输入流（文件，管道或者标准输入）中读取一行并且存储到它叫做 模式空间（<strong>pattern buffer</strong>） 的内部缓冲区</li><li><strong>执行</strong>： 默认情况下，所有的SED命令都在<strong>模式空间</strong>中顺序的执行，除非指定了行的地址，否则SED命令将会在所有的行上依次执行</li><li><strong>显示</strong>： 发送修改后的内容到输出流。在发送数据之后，<strong>模式空间</strong>将会被清空。</li><li>在文件所有的内容都被处理完成之前，上述过程将会重复执行</li></ul><h3 id="需要注意的几点"><a href="#需要注意的几点" class="headerlink" title="需要注意的几点"></a>需要注意的几点</h3><ul><li>模式空间 （<strong>pattern buffer</strong>） 是一块活跃的缓冲区，在sed编辑器执行命令时它会保存待检查的文本</li><li>默认情况下，所有的SED命令都是在模式空间中执行，因此输入文件并不会发生改变</li><li>还有另外一个缓冲区叫做 保持空间 （<strong>hold buffer</strong>），在处理模式空间中的某些行时，可以用保持空间来临时保存一些行。在每一个循环结束的时候，SED将会移除模式空间中的内容，但是该缓冲区中的内容在所有的循环过程中是持久存储的。SED命令无法直接在该缓冲区中执行，因此SED允许数据在 <strong>保持空间</strong> 和 <strong>模式空间</strong>之间切换</li><li>初始情况下，<strong>保持空间</strong> 和 <strong>模式空间</strong> 这两个缓冲区都是空的</li><li>如果没有提供输入文件的话，SED将会从标准输入接收请求</li><li>如果没有提供地址范围的话，默认情况下SED将会对所有的行进行操作</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>让我们创建一个名为 <strong>quote.txt</strong> 的文本文件，文件内容为著名作家<em>Paulo Coelho</em>的一段名言</p><pre><code>$ vi quote.txt There is only one thing that makes a dream impossible to achieve: the fear of failure.  - Paulo Coelho, The Alchemist</code></pre><p>为了理解SED的工作流，我们首先使用SED显示出quote.txt文件的内容，该示例与<code>cat</code>命令类似</p><pre><code>$ sed &apos;&apos; quote.txtThere is only one thing that makes a dream impossible to achieve: the fear of failure.- Paulo Coelho, The Alchemist</code></pre><p>在上面的例子中，quote.txt是输入的文件名称，两个单引号是要执行的SED命令。</p><p>首先，SED将会读取quote.txt文件中的一行内容存储到它的模式空间中，然后会在该缓冲区中执行SED命令。在这里，没有提供SED命令，因此对该缓冲区没有要执行的操作，最后它会删除模式空间中的内容并且打印该内容到标准输出，很简单的过程，对吧?</p><p>在下面的例子中，SED会从标准输入流接受输入</p><pre><code>$ sed &apos;&apos; </code></pre><p>当上述命令被执行的时候，将会产生下列结果</p><pre><code>There is only one thing that makes a dream impossible to achieve: the fear of failure. There is only one thing that makes a dream impossible to achieve: the fear of failure.</code></pre><p>在这里，第一行内容是通过键盘输入的内容，第二行是SED输出的内容。</p><blockquote><p>从SED会话中退出，使用组合键<code>ctrl-D (^D)</code></p></blockquote><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>本章中将会介绍SED中的基本命令和它的命令行使用方法。SED可以用下列两种方式调用：</p><pre><code>sed [-n] [-e] &apos;command(s)&apos; files sed [-n] -f scriptfile files</code></pre><p>第一种方式在命令行中使用单引号指定要执行的命令，第二种方式则指定了包含SED命令的脚本文件。当然，这两种方法也可以同时使用，SED提供了很多参数用于控制这种行为。</p><p>让我们看看如何指定多个SED命令。SED提供了<code>delete</code>命令用于删除某些行，这里让我们删除第一行，第二行和第五行：</p><p>首先，使用<code>cat</code>命令显示文件内容</p><pre><code>$ cat books.txt 1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864</code></pre><p>现在，使用SED移除指定的行，为了删除三行，我们使用<code>-e</code>选项指定三个独立的命令</p><pre><code>$ sed -e &apos;1d&apos; -e &apos;2d&apos; -e &apos;5d&apos; books.txt3) The Alchemist, Paulo Coelho, 1974) The Fellowship of the Ring, J. R. R. Tolkien, 4326) A Game of Thrones, George R. R. Martin, 864</code></pre><p>我们还可以将多个SED命令写在一个文本文件中，然后将该文件作为SED命令的参数，SED可以对模式空间中的内容执行文件中的每一个命令，下面的例子描述了SED的第二种用法</p><p>首先，创建一个包含SED命令的文本文件，为了便于理解，我们使用与之前相同的SED命令</p><pre><code>$ echo -e &quot;1d\n2d\n5d&quot; &gt; commands.txt $ cat commands.txt1d 2d 5d </code></pre><p>接下来构造一个SED命令去执行该操作</p><pre><code>$ sed -f commands.txt books.txt3) The Alchemist, Paulo Coelho, 1974) The Fellowship of the Ring, J. R. R. Tolkien, 4326) A Game of Thrones, George R. R. Martin, 864 </code></pre><h3 id="标准选项"><a href="#标准选项" class="headerlink" title="标准选项"></a>标准选项</h3><p>SED支持下列标准选项：</p><ul><li><p><strong>-n</strong> 默认情况下，模式空间中的内容在处理完成后将会打印到标准输出，该选项用于阻止该行为</p><pre><code>$ sed -n &apos;&apos; quote.txt </code></pre></li><li><p><strong>-e</strong> 指定要执行的命令，使用该参数，我们可以指定多个命令，让我们打印每一行两次：</p><pre><code>$ sed -e &apos;&apos; -e &apos;p&apos; quote.txtThere is only one thing that makes a dream impossible to achieve: the fear of failure.There is only one thing that makes a dream impossible to achieve: the fear of failure. - Paulo Coelho, The Alchemist - Paulo Coelho, The Alchemist</code></pre></li><li><p><strong>-f</strong> 指定包含要执行的命令的脚本文件</p><pre><code>$ echo &quot;p&quot; &gt; commands$$ sed -n -f commands quote.txtThere is only one thing that makes a dream impossible to achieve: the fear of failure. - Paulo Coelho, The Alchemist</code></pre></li></ul><h3 id="GNU选项"><a href="#GNU选项" class="headerlink" title="GNU选项"></a>GNU选项</h3><p>这些选项是GNU规范定义的，可能对于某些版本的SED并不支持。</p><ul><li><strong>-n</strong>， <strong>–quiet</strong>, <strong>–slient</strong>：与标准的-n选项相同</li><li><strong>-e script</strong>，<strong>–expression=script</strong>：与标准的-e选项相同</li><li><strong>-f script-file</strong>， <strong>–file=script-file</strong>：与标准的-f选项相同</li><li><strong>–follow-symlinks</strong>：如果提供该选项的话，在编辑的文件是符号链接时，SED将会跟随链接</li><li><strong>-i[SUFFIX]</strong>，<strong>–in-place[=SUFFIX]</strong>：该选项用于对当前文件进行编辑，如果提供了SUFFIX的话，将会备份原始文件，否则将会覆盖原始文件</li><li><strong>-l N</strong>， <strong>–line-lenght=N</strong>：该选项用于设置行的长度为N个字符</li><li><strong>–posix</strong>：该选项禁用所有的GNU扩展</li><li><strong>-r</strong>，<strong>–regexp-extended</strong>：该选项将启用扩展的正则表达式</li><li><strong>-u</strong>， <strong>–unbuffered</strong>：指定该选项的时候，SED将会从输入文件中加载最少的数据，并且更加频繁的刷出到输出缓冲区。在编辑<code>tail -f</code>命令的输出，你不希望等待输出的时候该选项是非常有用的。</li><li><strong>-z</strong>，<strong>–null-data</strong>：默认情况下，SED对每一行使用换行符分割，如果提供了该选项的话，它将使用NULL字符分割行</li></ul><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>与其它编程语言类似，SED提供了用于控制执行流的循环和分支语句。</p><p>SED中的循环有点类似于<strong>goto</strong>语句，SED可以根据标签（label）跳转到某一行继续执行，在SED中，我们可以定义如下的标签：</p><pre><code>:label :start :end :up</code></pre><p>在上面的示例中，我们创建了四个标签。</p><p>要跳转到指定的标签，使用 <strong>b</strong> 命令后面跟着标签名，如果忽略标签名的话，SED将会跳转到SED文件的结尾。</p><blockquote><p><strong>b</strong>标签用于无条件的跳转到指定的label。</p></blockquote><p>为了更好地理解SED中的循环和分支，让我们创建一个名为books2.txt的文本文件，其中包含一些图书的标题和作者信息，下面的示例中会合并图书的标题和作者，使用逗号分隔。之后搜索所有匹配“Paulo”的行，如果匹配的话就在这一行的开头添加<code>-</code>，否则跳转到<code>Print</code>标签，打印出该行内容。</p><pre><code>$ cat books2.txtA Storm of SwordsGeorge R. R. MartinThe Two TowersJ. R. R. TolkienThe AlchemistPaulo CoelhoThe Fellowship of the RingJ. R. R. TolkienThe PilgrimagePaulo CoelhoA Game of ThronesGeorge R. R. Martin$ sed -n &apos;h;n;H;xs/\n/, //Paulo/!b Prints/^/- /:Printp&apos; books2.txtA Storm of Swords , George R. R. MartinThe Two Towers , J. R. R. Tolkien- The Alchemist , Paulo CoelhoThe Fellowship of the Ring , J. R. R. Tolkien- The Pilgrimage , Paulo CoelhoA Game of Thrones , George R. R. Martin</code></pre><p>乍看来上述的代码非常神秘，让我们逐步拆解一下</p><ul><li>第一行是<code>h;n;H;x</code>这几个命令，记得上面我们提到的 <strong>保持空间</strong> 吗？第一个<code>h</code>是指将当前模式空间中的内容覆盖到 <strong>保持空间</strong>中，<code>n</code>用于提前读取下一行，并且覆盖当前模式空间中的这一行，<code>H</code>将当前模式空间中的内容追加到 <strong>保持空间</strong> 中，最后的<code>x</code>用于交换模式空间和<strong>保持空间</strong>中的内容。因此这里就是指每次读取两行放到模式空间中交给下面的命令进行处理</li><li>接下来是 <strong>s/\n/, /</strong> 用于将上面的两行内容中的换行符替换为逗号</li><li>第三个命令在不匹配的时候跳转到<strong>Print</strong>标签，否则继续执行第四个命令</li><li><strong>:Print</strong>仅仅是一个标签名，而<code>p</code>则是print命令</li></ul><p>为了提高可读性，每一个命令都占了一行，当然，你也可以把所有命令放在一行</p><pre><code>$ sed -n &apos;h;n;H;x;s/\n/, /;/Paulo/!b Print; s/^/- /; :Print;p&apos; books2.txt </code></pre><blockquote><p>关于<code>h</code>，<code>H</code>，<code>x</code>命令参考官方手册 <a href="https://www.gnu.org/software/sed/manual/sed.html#index-Copy-hold-space-into-pattern-space-168" target="_blank" rel="noopener">sed, a stream editor</a> <em>3.6 Less Frequently-Used Commands</em>节</p></blockquote><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>使用 <strong>t</strong> 命令创建分支。只有当前置条件成功的时候，<strong>t</strong> 命令才会跳转到该标签。</p><blockquote><p><strong>t</strong>命令只有在前一个替换（s）命令执行成功的时候才会执行。</p></blockquote><p>让我们看一些前面章节中的例子，与之前不同的是，这次我们将打印四个连字符”-“，而之前是一个。</p><pre><code>$ sed -n &apos;h;n;H;xs/\n/, /:Loop/Paulo/s/^/-//----/!t Loopp&apos; books2.txtA Storm of Swords , George R. R. MartinThe Two Towers , J. R. R. Tolkien----The Alchemist , Paulo CoelhoThe Fellowship of the Ring , J. R. R. Tolkien----The Pilgrimage , Paulo CoelhoA Game of Thrones , George R. R. Martin</code></pre><p>在上面的例子中，前面两行与上一节中讲的作用一致，第三行定义了一个<em>Loop</em>标签，接下来匹配存在“Paulo”的行，如果存在则在最前面添加一个<em>-</em>，接下来是我们这里的重点：</p><p><code>/----/!t Loop</code>这一行首先检查上面添加<code>-</code>之后是否满足四个<code>-</code>，如果不满足则跳转到Loop继续执行第三行，这样不停的追加<code>-</code>，最后如果改行满足前面有四个<code>-</code>才继续往下执行。 </p><p> 为了提高可读性，我们将每一个SED命令独立一行，我们也可以在同一行中使用：</p><pre><code>sed -n &apos;h;n;H;x; s/\n/, /; :Loop;/Paulo/s/^/-/; /----/!t Loop; p&apos; books.txt </code></pre><h2 id="模式空间和保持空间"><a href="#模式空间和保持空间" class="headerlink" title="模式空间和保持空间"></a>模式空间和保持空间</h2><h3 id="模式空间"><a href="#模式空间" class="headerlink" title="模式空间"></a>模式空间</h3><p>对任何文件的来说，最基本的操作就是输出它的内容，为了实现该目的，在SED中可以使用<strong>print</strong>命令打印出模式空间中的内容。</p><p>首先创建一个包含行号，书名，作者和页码数的文件，在本文中我们将会使用该文件，你也可以创建任何其它的文件，但是这里我们就创建一个包含以下内容的文件</p><pre><code>$ vi books.txt 1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho,288 6) A Game of Thrones, George R. R. Martin, 864</code></pre><p>执行<code>p</code>命令</p><pre><code>$ sed &apos;p&apos; books.txt1) A Storm of Swords, George R. R. Martin, 1216 1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 3) The Alchemist, Paulo Coelho, 197 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864 6) A Game of Thrones, George R. R. Martin, 864</code></pre><p>你可能会疑惑，为什么每一行被显示了两次？</p><p>你还记得SED的工作流吗？默认情况下，SED将会输出模式空间中的内容，另外，我们的命令中包含了输出命令<code>p</code>，因此每一行被打印两次。但是不要担心，SED提供了<strong>-n</strong>参数用于禁止自动输出模式空间的每一行的行为</p><pre><code>$ sed -n &apos;p&apos; books.txt 1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864 </code></pre><h3 id="行寻址"><a href="#行寻址" class="headerlink" title="行寻址"></a>行寻址</h3><p>默认情况下，在SED中使用的命令会作用于文本数据的所有行。如果只想将命令作用于特定的行或者某些行，则需要使用 <strong>行寻址</strong> 功能。</p><p>在SED中包含两种形式的行寻址：</p><ul><li>以数字形式表示的行区间</li><li>以文本模式来过滤行</li></ul><p>两种形式都使用相同的语法格式</p><pre><code>[address]command</code></pre><h4 id="数字方式的行寻址"><a href="#数字方式的行寻址" class="headerlink" title="数字方式的行寻址"></a>数字方式的行寻址</h4><p>在下面的示例中SED只会对第3行进行操作</p><pre><code>$ sed -n &apos;3p&apos; books.txt 3) The Alchemist, Paulo Coelho, 197 </code></pre><p>当然，我们还可以让SED输出某些行。在SED中使用逗号<strong>,</strong>分隔输出行号的范围，例如下面的代码会输出出2-5行的内容</p><pre><code>$ sed -n &apos;2,5 p&apos; books.txt 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288</code></pre><p>特殊字符 <strong>$</strong> 代表了文件的最后一行，输出文件的最后一行</p><pre><code>$ sed -n &apos;$ p&apos; books.txt 6) A Game of Thrones, George R. R. Martin, 864 </code></pre><p>也可以使用 <strong>$</strong> 指定输出的地址范围，下列命令输出第三行到最后一行</p><pre><code>$ sed -n &apos;3,$ p&apos; books.txt3) The Alchemist, Paulo Coelho, 1974) The Fellowship of the Ring, J. R. R. Tolkien, 4325) The Pilgrimage, Paulo Coelho,2886) A Game of Thrones, George R. R. Martin, 864</code></pre><p>SED还提供了另外两种操作符用于指定地址范围，第一个是加号（<strong>+</strong>）操作符，它可以与逗号（<strong>,</strong>）操作符一起使用，例如 <code>M, +n</code> 将会打印出从第<code>M</code>行开始的下<code>n</code>行。下面的示例将会输出第二行开始的下面四行</p><pre><code>$ sed -n &apos;2,+4 p&apos; books.txt 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864 </code></pre><p>我们还可以使用波浪线操作符（<strong>~</strong>）指定地址范围，它使用<code>M~N</code>的形式，它告诉SED应该处理<code>M</code>行开始的每<code>N</code>行。例如，<code>50~5</code>匹配行号50，55，60，65等，让我们只输出文件中的奇数行</p><pre><code>$ sed -n &apos;1~2 p&apos; books.txt 1) A Storm of Swords, George R. R. Martin, 1216 3) The Alchemist, Paulo Coelho, 197 5) The Pilgrimage, Paulo Coelho, 288</code></pre><p>下面的代码则是只输出文件中的偶数行</p><pre><code>$ sed -n &apos;2~2 p&apos; books.txt 2) The Two Towers, J. R. R. Tolkien, 352 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 6) A Game of Thrones, George R. R. Martin, 864 </code></pre><blockquote><p>注意，如果使用的是Mac系统自带的sed命令，可能不支持<strong>~</strong>和<strong>+</strong>操作符。可以使用<code>brew install gnu-sed --with-default-names</code>重新安装GNU-SED。</p></blockquote><h4 id="使用文本模式过滤器"><a href="#使用文本模式过滤器" class="headerlink" title="使用文本模式过滤器"></a>使用文本模式过滤器</h4><p>SED编辑器允许指定文本模式来过滤出命令要作用的行。格式如下：</p><pre><code>/pattern/command</code></pre><p>必须用正斜线将要指定的pattern封起来。sed编辑器会将该命令作用到包含指定文本模式的行上。</p><p>下面的示例中，将会输出所有作者为Paulo Coelho的书籍。</p><pre><code>$ sed -n &apos;/Paulo/ p&apos; books.txt3) The Alchemist, Paulo Coelho, 197 5) The Pilgrimage, Paulo Coelho, 288</code></pre><p>模式匹配也可以与数字形式的寻址同时使用，在下面的示例会从第一次匹配到<code>Alchemist</code>开始输出，直到第5行为止。</p><pre><code>$ sed -n &apos;/Alchemist/, 5 p&apos; books.txt3) The Alchemist, Paulo Coelho, 197 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288</code></pre><p>使用逗号（<strong>,</strong>）操作符指定匹配多个匹配的模式。下列的示例将会输出Two和Pilgrimage之间的所有行</p><pre><code>$ sed -n &apos;/Two/, /Pilgrimage/ p&apos; books.txt 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288</code></pre><p>在使用文本模式过滤器的时候，与数字方式的行寻址类似，可以使用加号操作符 <strong>+</strong>，它会输出从当前匹配位置开始的某几行，下面的示例会从第一次Two出现的位置开始输出接下来的4行</p><pre><code>$ sed -n &apos;/Two/, +4 p&apos; books.txt2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864 </code></pre><h3 id="保持空间"><a href="#保持空间" class="headerlink" title="保持空间"></a>保持空间</h3><p>在处理模式空间中的某些行时，可以用保持空间来临时保存一些行。有5条命令可用来操作保持空间</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>h</td><td>将模式空间复制到保持空间</td></tr><tr><td>H</td><td>将模式空间附加到保持空间</td></tr><tr><td>g</td><td>将保持空间复制到模式空间</td></tr><tr><td>G</td><td>将保持空间附加到模式空间</td></tr><tr><td>x</td><td>交换模式空间和保持空间的内容</td></tr></tbody></table><p>关于保持空间这里就不在举例了，前面再<strong>循环</strong>部分讲解下面这个命令的时候我们已经对它的使用做了说明。</p><pre><code>$ sed -n &apos;h;n;H;x;s/\n/, /;/Paulo/!b Print; s/^/- /; :Print;p&apos; books2.txt </code></pre><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>本章将会讲解一些常用的SED命令，主要包括<code>DELETE</code>，<code>WRITE</code>，<code>APPEND</code>，<code>CHANGE</code>，<code>INSERT</code>，<code>TRANSLATE</code>，<code>QUIT</code>，<code>READ</code>，<code>EXECUTE</code>等命令。</p><h3 id="删除命令-d"><a href="#删除命令-d" class="headerlink" title="删除命令  d"></a>删除命令  <strong>d</strong></h3><p>删除命令格式如下</p><pre><code>[address1[,address2]]d </code></pre><p><code>address1</code>和<code>address2</code>是开始和截止地址，它们可以是行号或者字符串匹配模式，这两种地址都是可选的。</p><p>由命令的名称可以知道，<strong>delete</strong> 命令是用来执行删除操作的，并且因为SED是基于行的编辑器，因此我们说该命令是用来删除行的。注意的是，该命令只会移除模式空间中的行，这样该行就不会被发送到输出流，但原始内容不会改变。</p><pre><code>$ sed &apos;d&apos; books.txt </code></pre><p>为什么没有输出任何内容？默认情况下，SED将会对每一行执行删除操作，这就是该命令为什么没有在标准输出中输出任何内容的原因。</p><p>下列命令只移除第四行</p><pre><code>[jerry]$ sed &apos;4d&apos; books.txt 1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864</code></pre><p>SED也接受使用逗号(,)分隔的地址范围。我们可以构造地址范围去移除N1到N2行，例如，下列命令将删除2-4行</p><pre><code>$ sed &apos;2, 4 d&apos; books.txt     1) A Storm of Swords, George R. R. Martin, 1216 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864</code></pre><p>SED的地址范围并不仅仅限于数字，我们也可以指定模式匹配作为地址，下面的示例会移除所有作者为Paulo Coelho的书籍</p><pre><code>$ sed &apos;/Paulo Coelho/d&apos; books.txt 1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 6) A Game of Thrones, George R. R. Martin, 864 </code></pre><p>我移除所有以<code>Storm</code>和<code>Fellowship</code>开头的行</p><pre><code>$ sed &apos;/Storm/,/Fellowship/d&apos; books.txt  5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864 </code></pre><h3 id="文件写入命令-w"><a href="#文件写入命令-w" class="headerlink" title="文件写入命令 w"></a>文件写入命令 <strong>w</strong></h3><p>SED提供了 <strong>write</strong> 命令用于将模式空间中的内容写入到文件，与 <strong>delete</strong> 命令类似，下面是 <strong>write</strong> 命令的语法</p><pre><code>[address1[,address2]]w file </code></pre><p><strong>w</strong> 指定是写命令， <strong>file</strong> 指的是存储文件内容的文件名。使用 <strong>file</strong> 操作符的时候要小心，当提供了文件名但是文件不存在的时候它会自动创建，如果已经存在的话则会<strong>覆盖</strong>原文件的内容。</p><p>下面的SED命令会创建文件books.txt的副本，在 <strong>w</strong> 和 <strong>file</strong> 之间只能有一个空格</p><pre><code>$ sed -n &apos;w books.bak&apos; books.txt </code></pre><p>上述命令创建了一个名为 <strong>books.bak</strong> 的文件，验证一下两个文件的内容是否相同</p><pre><code>$ diff books.txt books.bak  $ echo $?</code></pre><p>一旦执行上述的代码，你将会得到下列输出</p><pre><code>0</code></pre><p>聪明的你可能已经想到了，这不就是 <strong>cp</strong> 命令做的事情吗！确实如此，<strong>cp</strong> 命令也做了同一件事情，但是SED是一个成熟的工具，使用它你可以只复制文件中的某些行到新的文件中，如下代码会存储文件中的奇数行到另一个文件</p><pre><code>$ sed -n &apos;2~2 w junk.txt&apos; books.txt  $ cat junk.txt 2) The Two Towers, J. R. R. Tolkien, 352 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 6) A Game of Thrones, George R. R. Martin, 864 </code></pre><p>假设你希望存储所有独立作者的书到单独的文件。如果人工去做的话，肯定是非常无聊而且没有技术含量的，但是使用SED，你就有了更加聪明的方法去实现</p><pre><code>$ sed -n -e &apos;/Martin/ w Martin.txt&apos; -e &apos;/Paulo/ w Paulo.txt&apos; -e &apos;/Tolkien/ w Tolkien.txt&apos; books.txt    $ cat Martin.txt1) A Storm of Swords, George R. R. Martin, 1216 6) A Game of Thrones, George R. R. Martin, 864$ cat Paulo.txt3) The Alchemist, Paulo Coelho, 197 5) The Pilgrimage, Paulo Coelho, 288$ cat Tolkien.txt2) The Two Towers, J. R. R. Tolkien, 352 4) The Fellowship of the Ring, J. R. R. Tolkien, 432</code></pre><h3 id="追加命令-a"><a href="#追加命令-a" class="headerlink" title="追加命令 a"></a>追加命令 <strong>a</strong></h3><p>文本追加命令语法：</p><pre><code>[address]a\ Append text </code></pre><p>在第四行之后追加一本新书：</p><pre><code>$ sed &apos;4 a 7) Adultry, Paulo Coelho, 234&apos; books.txt 1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 7) Adultry, Paulo Coelho, 234 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864</code></pre><p>在命令部分，4指的是行号，<code>a</code> 是append命令，剩余部分为要追加的文本。</p><p>在文件的结尾插入一行文本，使用 <strong>$</strong> 作为地址</p><pre><code>$ sed &apos;$ a 7) Adultry, Paulo Coelho, 234&apos; books.txt1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864 7) Adultry, Paulo Coelho, 234 </code></pre><p>除了行号，我们也可以使用文本模式指定地址，例如，在匹配 <code>The Alchemist</code> 的行之后追加文本</p><pre><code>$ sed &apos;/The Alchemist/ a 7) Adultry, Paulo Coelho, 234&apos; books.txt  1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 7) Adultry, Paulo Coelho, 234 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864 </code></pre><h3 id="行替换命令-c"><a href="#行替换命令-c" class="headerlink" title="行替换命令 c"></a>行替换命令 <strong>c</strong></h3><p>SED通过 <strong>c</strong> 提供了 <strong>change</strong> 和 <strong>replace</strong> 命令，该命令帮助我们使用新文本替换已经存在的行，当提供行的地址范围时，所有的行都被作为一组被替换为单行文本，下面是该命令的语法</p><pre><code>[address1[,address2]]c\ Replace text</code></pre><p>比如，替换文本中的第三行为新的内容</p><pre><code>$ sed &apos;3 c 3) Adultry, Paulo Coelho, 324&apos; books.txt1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) Adultry, Paulo Coelho, 324 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864</code></pre><p>SED也接受模式作为地址</p><pre><code>$ sed &apos;/The Alchemist/ c 3) Adultry, Paulo Coelho, 324&apos; books.txt1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) Adultry, Paulo Coelho, 324 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864 </code></pre><p>多行替换也是支持的，下面的命令实现了将第4-6行内容替换为单行</p><pre><code>$ sed &apos;4, 6 c 4) Adultry, Paulo Coelho, 324&apos; books.txt  1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 4) Adultry, Paulo Coelho, 324</code></pre><h3 id="插入命令-i"><a href="#插入命令-i" class="headerlink" title="插入命令 i"></a>插入命令 <strong>i</strong></h3><p>插入命令与追加命令类似，唯一的区别是插入命令是在匹配的位置前插入新的一行。</p><pre><code>[address]i\ Insert text </code></pre><p>下面的命令会在第四行前插入新的一行</p><pre><code>$ sed &apos;4 i 7) Adultry, Paulo Coelho, 324&apos; books.txt 1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 7) Adultry, Paulo Coelho, 324 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864</code></pre><h3 id="转换命令-y"><a href="#转换命令-y" class="headerlink" title="转换命令 y"></a>转换命令 <strong>y</strong></h3><p>转换（Translate）命令 <strong>y</strong> 是唯一可以处理单个字符的sed编辑器命令。转换命令格式 如下</p><pre><code>[address]y/inchars/outchars/</code></pre><p>转换命令会对inchars和outchars值进行一对一的映射。inchars中的第一个字符会被转换为outchars中的第一个字符，第二个字符会被转换成outchars中的第二个字符。这个映射过程会一直持续到处理完指定字符。如果inchars和outchars的长度不同，则sed编辑器会产生一 条错误消息。</p><pre><code>$ echo &quot;1 5 15 20&quot; | sed &apos;y/151520/IVXVXX/&apos;I V IV XX</code></pre><h3 id="输出隐藏字符命令-l"><a href="#输出隐藏字符命令-l" class="headerlink" title="输出隐藏字符命令 l"></a>输出隐藏字符命令 <strong>l</strong></h3><p>你能通过直接观察区分出单词是通过空格还是tab进行分隔的吗？显然是不能的，但是SED可以为你做到这点。使用<code>l</code>命令（英文字母L的小写）可以显示文本中的隐藏字符（例如<code>\t</code>或者<code>$</code>字符）。</p><pre><code>[address1[,address2]]l [address1[,address2]]l [len] </code></pre><p>为了测试该命令，我们首先将books.txt中的空格替换为tab。</p><pre><code>$ sed &apos;s/ /\t/g&apos; books.txt &gt; junk.txt </code></pre><p>接下来执行<code>l</code>命令</p><pre><code>$ sed -n &apos;l&apos; junk.txt1)\tStorm\tof\tSwords,\tGeorge\tR.\tR.\tMartin,\t1216\t$2)\tThe\tTwo\tTowers,\tJ.\tR.\tR.\tTolkien,\t352\t$3)\tThe\tAlchemist,\tPaulo\tCoelho,\t197\t$4)\tThe\tFellowship\tof\tthe\tRing,\tJ.\tR.\tR.\tTolkien,\t432\t$5)\tThe\tPilgrimage,\tPaulo\tCoelho,\t288\t$6)\tA\tGame\tof\tThrones,\tGeorge\tR.\tR.\tMartin,\t864$</code></pre><p>使用<code>l</code>命令的时候，一个很有趣的特性是我们可以使用它来实现文本按照指定的宽度换行。</p><pre><code>$ sed -n &apos;l 25&apos; books.txt1) Storm of Swords, Geor\ge R. R. Martin, 1216 $2) The Two Towers, J. R.\ R. Tolkien, 352 $3) The Alchemist, Paulo \Coelho, 197 $4) The Fellowship of the\ Ring, J. R. R. Tolkien,\ 432 $5) The Pilgrimage, Paulo\ Coelho, 288 $6) A Game of Thrones, Ge\orge R. R. Martin, 864$</code></pre><p>上面的示例中在<code>l</code>命令后跟了一个数字25，它告诉SED按照每行25个字符进行换行，如果指定这个数字为0的话，则只有在存在换行符的情况下才进行换行。</p><blockquote><p><code>l</code>命令是GNU-SED的一部分，其它的一些变体中可能无法使用该命令。</p></blockquote><h3 id="退出命令-q"><a href="#退出命令-q" class="headerlink" title="退出命令 q"></a>退出命令 <strong>q</strong></h3><p>在SED中，可以使用<code>Quit</code>命令退出当前的执行流</p><pre><code>[address]q [address]q [value]</code></pre><p>需要注意的是，<code>q</code>命令不支持地址范围，只支持单个地址匹配。默认情况下SED会按照读取、执行、重复的工作流执行，但当它遇到<code>q</code>命令的时候，它会退出当前的执行流。</p><pre><code>$ sed &apos;3 q&apos; books.txt1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197$ sed &apos;/The Alchemist/ q&apos; books.txt 1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197</code></pre><p><code>q</code>命令也支持提供一个value，这个value将作为程序的返回代码返回</p><pre><code>$ sed &apos;/The Alchemist/ q 100&apos; books.txt1) A Storm of Swords, George R. R. Martin, 12162) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197$ echo $? 100</code></pre><h3 id="文件读取命令-r"><a href="#文件读取命令-r" class="headerlink" title="文件读取命令 r"></a>文件读取命令 <strong>r</strong></h3><p>在SED中，我们可以让SED使用Read命令从外部文件中读取内容并且在满足条件的时候显示出来。</p><pre><code>[address]r file</code></pre><p>需要注意的是，<code>r</code>命令和文件名之间必须只有一个空格。</p><p>下面的示例会打开<em>junk.txt</em>文件，将其内容插入到<em>books.txt</em>文件的第三行之后</p><pre><code>$ echo &quot;This is junk text.&quot; &gt; junk.txt $ sed &apos;3 r junk.txt&apos; books.txt 1) A Storm of Swords, George R. R. Martin, 1216 2) The Two Towers, J. R. R. Tolkien, 352 3) The Alchemist, Paulo Coelho, 197 This is junk text. 4) The Fellowship of the Ring, J. R. R. Tolkien, 432 5) The Pilgrimage, Paulo Coelho, 288 6) A Game of Thrones, George R. R. Martin, 864</code></pre><blockquote><p><code>r</code>命令也支持地址范围，例如<em>3, 5 r junk.txt</em>会在第三行，第四行，第五行后面分别插入<em>junk.txt</em>的内容</p></blockquote><h3 id="执行外部命令-e"><a href="#执行外部命令-e" class="headerlink" title="执行外部命令 e"></a>执行外部命令 <strong>e</strong></h3><p>如果你看过<a href="https://aicode.cc/san-shi-fen-zhong-xue-huiawk.html" target="_blank" rel="noopener">三十分钟学会AWK</a>一文，你可能已经知道了在AWK中可以执行外部的命令，那么在SED中我们是否也可以这样做？</p><p>答案是肯定的，在SED中，我们可以使用<code>e</code>命令执行外部命令</p><pre><code>[address1[,address2]]e [command]</code></pre><p>下面的命令会在第三行之前执行<em>date</em>命令</p><pre><code>$ sed &apos;3 e date&apos; books.txt1) Storm of Swords, George R. R. Martin, 12162) The Two Towers, J. R. R. Tolkien, 3522016年11月29日 星期二 22时46分14秒 CST3) The Alchemist, Paulo Coelho, 1974) The Fellowship of the Ring, J. R. R. Tolkien, 4325) The Pilgrimage, Paulo Coelho, 2886) A Game of Thrones, George R. R. Martin, 864</code></pre><p>另一个示例</p><pre><code>$ sed &apos;3,5 e who&apos; books.txt1) Storm of Swords, George R. R. Martin, 12162) The Two Towers, J. R. R. Tolkien, 352mylxsw   console  Nov 29 19:30mylxsw   ttys000  Nov 29 22:453) The Alchemist, Paulo Coelho, 197mylxsw   console  Nov 29 19:30mylxsw   ttys000  Nov 29 22:454) The Fellowship of the Ring, J. R. R. Tolkien, 432mylxsw   console  Nov 29 19:30mylxsw   ttys000  Nov 29 22:455) The Pilgrimage, Paulo Coelho, 2886) A Game of Thrones, George R. R. Martin, 864</code></pre><p>如果你仔细观察<code>e</code>命令的语法，你会发现其实它的<em>command</em>参数是可选的。在没有提供外部命令的时候，SED会将模式空间中的内容作为要执行的命令。</p><pre><code>$ echo -e &quot;date\ncal\nuname&quot; &gt; commands.txt$ cat commands.txtdatecaluname$ sed &apos;e&apos; commands.txt2016年11月29日 星期二 22时50分30秒 CST    十一月 2016日 一 二 三 四 五 六       1  2  3  4  5 6  7  8  9 10 11 1213 14 15 16 17 18 1920 21 22 23 24 25 2627 28 29 30Darwin</code></pre><h3 id="排除命令"><a href="#排除命令" class="headerlink" title="排除命令 !"></a>排除命令 <strong>!</strong></h3><p>感叹号命令（<strong>!</strong>）用来排除命令，也就是让原本会起作用的命令不起作用。</p><pre><code>$ sed -n &apos;/Paulo/p&apos; books.txt3) The Alchemist, Paulo Coelho, 1975) The Pilgrimage, Paulo Coelho, 288$ sed -n &apos;/Paulo/!p&apos; books.txt1) Storm of Swords, George R. R. Martin, 12162) The Two Towers, J. R. R. Tolkien, 3524) The Fellowship of the Ring, J. R. R. Tolkien, 4326) A Game of Thrones, George R. R. Martin, 864</code></pre><p>如上例所示，<code>p</code>命令原先是只输出匹配<em>Paulo</em>的行，添加<code>!</code>之后，变成了只输出不匹配<em>Paulo</em>的行。</p><pre><code>$ sed -n &apos;1!G; h; $p&apos; books.txt6) A Game of Thrones, George R. R. Martin, 8645) The Pilgrimage, Paulo Coelho, 2884) The Fellowship of the Ring, J. R. R. Tolkien, 4323) The Alchemist, Paulo Coelho, 1972) The Two Towers, J. R. R. Tolkien, 3521) Storm of Swords, George R. R. Martin, 1216</code></pre><p>上面的命令实现了类似<code>tac</code>命令类似的输出，将文本内容倒序输出。看起来有些晦涩难懂，分解一下却十分简单：</p><ol><li><em>1!G</em> 这句的意思是出了第一行之外，处理每一行的时候都将保持空间中的内容追加到模式空间（正序-&gt;倒序）</li><li><em>h</em> 将模式空间中的内容复制到保持空间以备下一行匹配的时候追加到下一行的后面</li><li><em>$p</em> 如果匹配到最后一行的话则输出模式空间中的内容</li><li>上述步骤不断重复直到文本结束刚好将文件内容翻转了一次</li></ol><h3 id="多行命令"><a href="#多行命令" class="headerlink" title="多行命令"></a>多行命令</h3><p>在使用sed编辑器的基础命令时，你可能注意到了一个局限。所有的sed编辑器命令都是针对<strong>单行</strong>数据执行操作的。在sed编辑器读取数据流时，它会基于<strong>换行符</strong>的位置将数据分成行。sed编辑器根据定义好的脚本命令一次处理一行数据，然后移到下一行重复这个过程。</p><p>幸运的是，sed编辑器的设计人员已经考虑到了这种情况，并设计了对应的解决方案。sed编辑器包含了三个可用来处理多行文本的特殊命令。</p><ul><li><strong>N</strong>：将数据流中的下一行加进来创建一个多行组来处理</li><li><strong>D</strong>：删除多行组中的一行</li><li><strong>P</strong>：打印多行组中的一行</li></ul><h4 id="N-加载下一行"><a href="#N-加载下一行" class="headerlink" title="N - 加载下一行"></a>N - 加载下一行</h4><p>默认情况下，SED是基于单行进行操作的，有些情况下我们可能需要使用多行进行编辑，启用多行编辑使用<code>N</code>命令，与<code>n</code>不同的是，<code>N</code>并不会清除、输出模式空间的内容，而是采用了追加模式。</p><pre><code>[address1[,address2]]N</code></pre><p>下面的示例将会把<em>books2.txt</em>中的标题和作者放到同一行展示，并且使用逗号进行分隔</p><pre><code>$ sed &apos;N; s/\n/,/g&apos; books2.txtA Storm of Swords ,George R. R. MartinThe Two Towers ,J. R. R. TolkienThe Alchemist ,Paulo CoelhoThe Fellowship of the Ring ,J. R. R. TolkienThe Pilgrimage ,Paulo CoelhoA Game of Thrones ,George R. R. Martin</code></pre><h4 id="D-删除多行中的一行"><a href="#D-删除多行中的一行" class="headerlink" title="D - 删除多行中的一行"></a>D - 删除多行中的一行</h4><p>sed编辑器提供了多行删除命令<strong>D</strong>，它只删除模式空间中的第一行。该命令会删除到换行符（含 换行符）为止的所有字符。</p><pre><code>$ echo &apos;\nThis is the header line.\nThis is a data line.\n\nThis is the last line.&apos; | sed &apos;/^$/{N; /header/D}&apos;This is the header line.This is a data line.This is the last line.</code></pre><h4 id="P-输出多行中的一行"><a href="#P-输出多行中的一行" class="headerlink" title="P - 输出多行中的一行"></a>P - 输出多行中的一行</h4><p><code>P</code>命令用于输出<code>N</code>命令创建的多行文本的模式空间中的第一行。</p><pre><code>[address1[,address2]]P </code></pre><p>例如下面的命令只输出了图书的标题</p><pre><code>$ sed -n &apos;N;P&apos; books2.txtA Storm of SwordsThe Two TowersThe AlchemistThe Fellowship of the RingThe PilgrimageA Game of Thrones</code></pre><h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><h4 id="n-单行next"><a href="#n-单行next" class="headerlink" title="n - 单行next"></a>n - 单行next</h4><p>小写的n命令会告诉sed编辑器移动到数据流中的下一文本行，并且覆盖当前模式空间中的行。</p><pre><code>$ cat data1.txt This is the header line.This is a data line.This is the last line.$ sed &apos;/header/{n ; d}&apos; data1.txt This is the header line.This is a data line.This is the last line.</code></pre><p>上面的命令中，首先会匹配包含<em>header</em>的行，之后将移动到数据流的下一行，这里是一个空行，然后执行<code>d</code>命令对改行进行删除，所有就看到了这样的结果：第一个空行被删除掉了。</p><h4 id="v-SED版本检查"><a href="#v-SED版本检查" class="headerlink" title="v - SED版本检查"></a>v - SED版本检查</h4><p><code>v</code>命令用于检查SED的版本，如果版本大于参数中的版本则正常执行，否则失败</p><pre><code>[address1[,address2]]v [version]</code></pre><p>例如</p><pre><code>$ sed --versionsed (GNU sed) 4.2.2$ sed &apos;v 4.2.3&apos; books.txtsed: -e expression #1, char 7: expected newer version of sed$ sed &apos;v 4.2.2&apos; books.txt1) Storm of Swords, George R. R. Martin, 12162) The Two Towers, J. R. R. Tolkien, 3523) The Alchemist, Paulo Coelho, 1974) The Fellowship of the Ring, J. R. R. Tolkien, 4325) The Pilgrimage, Paulo Coelho, 2886) A Game of Thrones, George R. R. Martin, 864</code></pre><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>在SED中提供了两个可以用作命令的特殊字符：<strong>=</strong> 和 <strong>&amp;</strong> 。</p><h3 id="命令"><a href="#命令" class="headerlink" title="=命令"></a><code>=</code>命令</h3><p><code>=</code>命令用于输出行号，语法格式为</p><pre><code>[/pattern/]= [address1[,address2]]=</code></pre><p>例如为每一行输出行号</p><pre><code>$ sed &apos;=&apos; books2.txt1A Storm of Swords2George R. R. Martin...</code></pre><p>只为1-4行输出行号</p><pre><code>$ sed &apos;1, 4=&apos; books2.txt1A Storm of Swords2George R. R. Martin3The Two Towers4J. R. R. TolkienThe AlchemistPaulo CoelhoThe Fellowship of the RingJ. R. R. TolkienThe PilgrimagePaulo CoelhoA Game of ThronesGeorge R. R. Martin</code></pre><p>匹配Paulo的行输出行号</p><pre><code>$ sed &apos;/Paulo/ =&apos; books2.txtA Storm of SwordsGeorge R. R. MartinThe Two TowersJ. R. R. TolkienThe Alchemist6Paulo CoelhoThe Fellowship of the RingJ. R. R. TolkienThe Pilgrimage10Paulo CoelhoA Game of ThronesGeorge R. R. Martin</code></pre><p>最后一行输出行号，这个命令比较有意思了，可以用于输出文件总共有多少行</p><pre><code>$ sed -n &apos;$ =&apos; books2.txt12</code></pre><h3 id="amp-命令"><a href="#amp-命令" class="headerlink" title="&amp;命令"></a><code>&amp;</code>命令</h3><p>特殊字符<code>&amp;</code>用于存储匹配模式的内容，通常与替换命令<code>s</code>一起使用。</p><pre><code>$ sed &apos;s/[[:digit:]]/Book number &amp;/&apos; books.txtBook number 1) Storm of Swords, George R. R. Martin, 1216Book number 2) The Two Towers, J. R. R. Tolkien, 352Book number 3) The Alchemist, Paulo Coelho, 197Book number 4) The Fellowship of the Ring, J. R. R. Tolkien, 432Book number 5) The Pilgrimage, Paulo Coelho, 288Book number 6) A Game of Thrones, George R. R. Martin, 864</code></pre><p>上述命令用于匹配每一行第一个数字，在其前面添加 <em>Book number</em> 。而下面这个命令则匹配最后一个数字，并修改为<code>Pages =</code>。其中<code>[[:digit:]]* *$</code>可能比较费解，这一部分其实是：<em>匹配0个或多个数字+0个或多个空格+行尾</em>。</p><pre><code>sed &apos;s/[[:digit:]]* *$/Pages = &amp;/&apos; books.txt1) Storm of Swords, George R. R. Martin, Pages = 12162) The Two Towers, J. R. R. Tolkien, Pages = 3523) The Alchemist, Paulo Coelho, Pages = 1974) The Fellowship of the Ring, J. R. R. Tolkien, Pages = 4325) The Pilgrimage, Paulo Coelho, Pages = 2886) A Game of Thrones, George R. R. Martin, Pages = 864</code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="替换命令-s"><a href="#替换命令-s" class="headerlink" title="替换命令 s"></a>替换命令 <strong>s</strong></h3><p>文本替换命令非常常见，其格式如下</p><pre><code>[address1[,address2]]s/pattern/replacement/[flags]</code></pre><p>在前面我们使用的<em>books.txt</em>文件中，我们使用逗号“<em>,</em>”分隔每一列，下面的示例中，我们会使用替换命令将其替换为管道符“<em>|</em>”：</p><pre><code>$ sed &apos;s/,/ |/&apos; books.txt1) Storm of Swords | George R. R. Martin, 12162) The Two Towers | J. R. R. Tolkien, 3523) The Alchemist | Paulo Coelho, 1974) The Fellowship of the Ring | J. R. R. Tolkien, 4325) The Pilgrimage | Paulo Coelho, 2886) A Game of Thrones | George R. R. Martin, 864</code></pre><p>是不是觉得哪里不对？相信你已经发现，每一行的第二个逗号都没有被替换，只有第一个被替换了，确实如此，在SED中，使用替换命令的时候默认只会对第一个匹配的位置进行替换。使用<code>g</code>选项告诉SED对所有内容进行替换：</p><pre><code>$ sed &apos;s/,/ | /g&apos; books.txt1) Storm of Swords |  George R. R. Martin |  12162) The Two Towers |  J. R. R. Tolkien |  3523) The Alchemist |  Paulo Coelho |  1974) The Fellowship of the Ring |  J. R. R. Tolkien |  4325) The Pilgrimage |  Paulo Coelho |  2886) A Game of Thrones |  George R. R. Martin |  864</code></pre><blockquote><p>如果对匹配模式（或地址范围）的行进行替换，则只需要在<code>s</code>命令前添加地址即可。比如只替换匹配<em>The Pilgrimage</em>的行：<code>sed &#39;/The Pilgrimage/ s/,/ | /g&#39; books.txt</code></p></blockquote><p>还有一些其它的选项，这里就简单的描述一下，不在展开讲解</p><ul><li><strong>数字n</strong>: 只替换第n次匹配，比如<code>sed &#39;s/,/ | /2&#39; books.txt</code>，只替换每行中第二个逗号</li><li><strong>p</strong>：只输出改变的行，比如<code>sed -n &#39;s/Paulo Coelho/PAULO COELHO/p&#39; books.txt</code></li><li><strong>w</strong>：存储改变的行到文件，比如<code>sed -n &#39;s/Paulo Coelho/PAULO COELHO/w junk.txt&#39; books.txt</code></li><li><strong>i</strong>：匹配时忽略大小写，比如<code>sed  -n &#39;s/pAuLo CoElHo/PAULO COELHO/pi&#39; books.txt</code></li></ul><p>在执行替换操作的时候，如果要替换的内容中包含<code>/</code>，这个时候怎么办？很简单，添加转义操作符。</p><pre><code>$ echo &quot;/bin/sed&quot; | sed &apos;s/\/bin\/sed/\/home\/mylxsw\/src\/sed\/sed-4.2.2\/sed/&apos;/home/mylxsw/src/sed/sed-4.2.2/sed</code></pre><p>上面的命令中，我们使用<code>\</code>对<code>/</code>进行了转义，不过表达式已经看起来非常难看了，在SED中还可以使用<code>|</code>，<code>@</code>，<code>^</code>，<code>!</code>作为命令的分隔符，所以，下面的几个命令和上面的是等价的</p><pre><code>echo &quot;/bin/sed&quot; | sed &apos;s|/bin/sed|/mylxsw/mylxsw/src/sed/sed-4.2.2/sed|&apos;echo &quot;/bin/sed&quot; | sed &apos;s@/bin/sed@/home/mylxsw/src/sed/sed-4.2.2/sed@&apos;echo &quot;/bin/sed&quot; | sed &apos;s^/bin/sed^/home/mylxsw/src/sed/sed-4.2.2/sed^&apos;echo &quot;/bin/sed&quot; | sed &apos;s!/bin/sed!/home/mylxsw/src/sed/sed-4.2.2/sed!&apos;</code></pre><h3 id="匹配子字符串"><a href="#匹配子字符串" class="headerlink" title="匹配子字符串"></a>匹配子字符串</h3><p>前面我们学习了替换命令的用法，现在让我们看看如何获取匹配文本中的某个子串。</p><p>在SED中，使用<code>\(</code>和<code>\)</code>对匹配的内容进行分组，使用<code>\N</code>的方式进行引用。请看下面示例</p><pre><code>$ echo &quot;Three One Two&quot; | sed &apos;s|\(\w\+\) \(\w\+\) \(\w\+\)|\2 \3 \1|&apos;One Two Three</code></pre><p>我们输出了<em>Three</em>，<em>One</em>，<em>Two</em>三个单词，在SED的替换规则中，使用空格分隔了三小段正则表达式<code>\(\w\+\)</code>来匹配每一个单词，后面使用<code>\1</code>，，<code>\2</code>，<code>\3</code>分别引用它们的值。</p><h2 id="管理模式"><a href="#管理模式" class="headerlink" title="管理模式"></a>管理模式</h2><p>前面已经讲解过模式空间和<strong>保持空间</strong>的用法，在本节中我们将会继续探索它们的用法。</p><blockquote><p>本部分内容暂未更新，请关注<a href="https://github.com/mylxsw/growing-up" target="_blank" rel="noopener">程序猿成长计划</a> 项目，我将最先在Github的这个仓库中更新最新内容。</p></blockquote><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>这一部分就是标准正则表达式的一些特殊字符以元字符，比较熟悉的请略过。</p><h3 id="标准正则表达式"><a href="#标准正则表达式" class="headerlink" title="标准正则表达式"></a>标准正则表达式</h3><h4 id=""><a href="#" class="headerlink" title="^"></a><strong>^</strong></h4><p>匹配行的开始。</p><pre><code>$ sed -n &apos;/^The/ p&apos; books2.txtThe Two Towers, J. R. R. Tolkien The Alchemist, Paulo Coelho The Fellowship of the Ring, J. R. R. Tolkien The Pilgrimage, Paulo Coelho</code></pre><h4 id="-1"><a href="#-1" class="headerlink" title="$"></a><strong>$</strong></h4><p>匹配行的结尾</p><pre><code>$ sed -n &apos;/Coelho$/ p&apos; books2.txt The Alchemist, Paulo Coelho The Pilgrimage, Paulo Coelho</code></pre><h4 id="-2"><a href="#-2" class="headerlink" title="."></a><strong>.</strong></h4><p>匹配单个字符（除行尾）</p><pre><code>$ echo -e &quot;cat\nbat\nrat\nmat\nbatting\nrats\nmats&quot; | sed -n &apos;/^..t$/p&apos;catbatratmat</code></pre><h4 id="-3"><a href="#-3" class="headerlink" title="[]"></a><strong>[]</strong></h4><p>匹配字符集</p><pre><code>$ echo -e &quot;Call\nTall\nBall&quot; | sed -n &apos;/[CT]all/ p&apos;CallTall</code></pre><h4 id="-4"><a href="#-4" class="headerlink" title="[\^]"></a><strong>[\^]</strong></h4><p>排除字符集</p><pre><code>$ echo -e &quot;Call\nTall\nBall&quot; | sed -n &apos;/[^CT]all/ p&apos;Ball</code></pre><h4 id="-5"><a href="#-5" class="headerlink" title="[-]"></a><strong>[-]</strong></h4><p>字符范围。</p><pre><code>$ echo -e &quot;Call\nTall\nBall&quot; | sed -n &apos;/[C-Z]all/ p&apos; Call Tall</code></pre><h4 id="，-，"><a href="#，-，" class="headerlink" title="\? ，\+ ，*"></a><strong>\?</strong> ，<strong>\+</strong> ，*</h4><p>分别对应0次到1次，一次到多次，0次到多次匹配。</p><h4 id="n-，-n-，-m-n"><a href="#n-，-n-，-m-n" class="headerlink" title="{n} ，{n,} ，{m, n}"></a><strong>{n}</strong> ，<strong>{n,}</strong> ，<strong>{m, n}</strong></h4><p>精确匹配N次，至少匹配N次，匹配M-N次</p><h4 id="-6"><a href="#-6" class="headerlink" title="|"></a><strong>|</strong></h4><p>或操作。</p><pre><code>$ echo -e &quot;str1\nstr2\nstr3\nstr4&quot; | sed -n &apos;/str\(1\|3\)/ p&apos; str1str3</code></pre><h3 id="POSIX兼容的正则"><a href="#POSIX兼容的正则" class="headerlink" title="POSIX兼容的正则"></a>POSIX兼容的正则</h3><p>主要包含<code>[:alnum:]</code>，<code>[:alpha:]</code>，<code>[:blank:]</code>，<code>[:digit:]</code>，<code>[:lower:]</code>，<code>[:upper:]</code>，<code>[:punct:]</code>，<code>[:space:]</code>，这些基本都见名之意，不在赘述。</p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><h4 id="s"><a href="#s" class="headerlink" title="\s"></a><strong>\s</strong></h4><p>匹配单个空白内容</p><pre><code>$ echo -e &quot;Line\t1\nLine2&quot; | sed -n &apos;/Line\s/ p&apos;Line 1 </code></pre><h4 id="S"><a href="#S" class="headerlink" title="\S"></a><strong>\S</strong></h4><p>匹配单个非空白内容。</p><h4 id="w-，-W"><a href="#w-，-W" class="headerlink" title="\w ， \W"></a><strong>\w</strong> ， <strong>\W</strong></h4><p>单个单词、非单词。</p><h2 id="常用代码段"><a href="#常用代码段" class="headerlink" title="常用代码段"></a>常用代码段</h2><h3 id="Cat命令"><a href="#Cat命令" class="headerlink" title="Cat命令"></a>Cat命令</h3><p>模拟<code>cat</code>命令比较简单，有下面两种方式</p><pre><code>$ sed &apos;&apos; books.txt1) Storm of Swords, George R. R. Martin, 12162) The Two Towers, J. R. R. Tolkien, 3523) The Alchemist, Paulo Coelho, 1974) The Fellowship of the Ring, J. R. R. Tolkien, 4325) The Pilgrimage, Paulo Coelho, 2886) A Game of Thrones, George R. R. Martin, 864$ sed -n &apos;p&apos; books.txt1) Storm of Swords, George R. R. Martin, 12162) The Two Towers, J. R. R. Tolkien, 3523) The Alchemist, Paulo Coelho, 1974) The Fellowship of the Ring, J. R. R. Tolkien, 4325) The Pilgrimage, Paulo Coelho, 2886) A Game of Thrones, George R. R. Martin, 864</code></pre><h3 id="移除空行"><a href="#移除空行" class="headerlink" title="移除空行"></a>移除空行</h3><pre><code>$ echo -e &quot;Line #1\n\n\nLine #2&quot; | sed &apos;/^$/d&apos;Line #1Line #2</code></pre><h3 id="删除连续空行"><a href="#删除连续空行" class="headerlink" title="删除连续空行"></a>删除连续空行</h3><pre><code>$ echo -e &quot;Line #1\n\n\nLine #2&quot; | sed &apos;/./,/^$/!d&apos;Line #1Line #2</code></pre><h3 id="删除开头的空行"><a href="#删除开头的空行" class="headerlink" title="删除开头的空行"></a>删除开头的空行</h3><pre><code>$ echo -e &quot;\nLine #1\n\nLine #2&quot; | sed &apos;/./,$!d&apos;Line #1Line #2</code></pre><h3 id="删除结尾的空行"><a href="#删除结尾的空行" class="headerlink" title="删除结尾的空行"></a>删除结尾的空行</h3><pre><code>$ echo -e &quot;\nLine #1\nLine #2\n\n&quot; | sed &apos;:start /^\n*$/{$d; N; b start }&apos;Line #1Line #2</code></pre><h3 id="过滤所有的html标签"><a href="#过滤所有的html标签" class="headerlink" title="过滤所有的html标签"></a>过滤所有的html标签</h3><pre><code>$ cat html.txt&lt;html&gt;&lt;head&gt;    &lt;title&gt;This is the page title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt; This is the &lt;b&gt;first&lt;/b&gt; line in the Web page.    This should provide some &lt;i&gt;useful&lt;/i&gt; information to use in our sed script.&lt;/body&gt;&lt;/html&gt;                                                                                  $ sed &apos;s/&lt;[^&gt;]*&gt;//g ; /^$/d&apos; html.txt    This is the page title     This is the first line in the Web page.    This should provide some useful information to use in our sed script.</code></pre><h3 id="从C-程序中移除注释"><a href="#从C-程序中移除注释" class="headerlink" title="从C++程序中移除注释"></a>从C++程序中移除注释</h3><p>有下面这样一个cpp文件</p><pre><code>$ cat hello.cpp#include &lt;iostream&gt; using namespace std; int main(void) {    // Displays message on stdout.    cout &gt;&gt; &quot;Hello, World !!!&quot; &gt;&gt; endl;     return 0; // Return success. }</code></pre><p>执行下面的命令可以移除注释</p><pre><code>$ sed &apos;s|//.*||g&apos; hello.cpp#include &lt;iostream&gt;using namespace std;int main(void){   cout &gt;&gt; &quot;Hello, World !!!&quot; &gt;&gt; endl;   return 0; }</code></pre><h3 id="为某些行添加注释"><a href="#为某些行添加注释" class="headerlink" title="为某些行添加注释"></a>为某些行添加注释</h3><pre><code>$ sed &apos;3,5 s/^/#/&apos; hello.sh #!/bin/bash #pwd #hostname #uname -a who who -r lsb_release -a</code></pre><h3 id="实现Wc-l命令"><a href="#实现Wc-l命令" class="headerlink" title="实现Wc -l命令"></a>实现<strong>Wc -l</strong>命令</h3><p><code>wc -l</code>命令用于统计文件中的行数，使用SED也可以模拟该命令</p><pre><code>$ wc -l hello.cpp       9 hello.cpp$ sed -n &apos;$ =&apos; hello.cpp9</code></pre><h3 id="模拟实现head命令"><a href="#模拟实现head命令" class="headerlink" title="模拟实现head命令"></a>模拟实现<code>head</code>命令</h3><p><code>head</code>命令用于输出文件中的前10行内容。</p><pre><code>$ head books2.txtA Storm of SwordsGeorge R. R. MartinThe Two TowersJ. R. R. TolkienThe AlchemistPaulo CoelhoThe Fellowship of the RingJ. R. R. TolkienThe PilgrimagePaulo Coelho</code></pre><p>使用SED中的<code>sed &#39;10 q&#39;</code>可以模拟它的实现</p><pre><code>$ sed &apos;10 q&apos; books.txt A Storm of Swords George R. R. Martin The Two Towers J. R. R. Tolkien The Alchemist Paulo Coelho The Fellowship of the Ring J. R. R. Tolkien The PilgrimagePaulo Coelho</code></pre><h3 id="模拟tail-1命令"><a href="#模拟tail-1命令" class="headerlink" title="模拟tail -1命令"></a>模拟<code>tail -1</code>命令</h3><p><code>tail -1</code>输出文件的最后一行。</p><pre><code>$ cat test.txtLine #1 Line #2 $ tail -1 test.txtLine #2$ sed $ sed -n &apos;$p&apos; test.txtLine #2</code></pre><h3 id="模拟Dos2unix命令"><a href="#模拟Dos2unix命令" class="headerlink" title="模拟Dos2unix命令"></a>模拟<code>Dos2unix</code>命令</h3><p>在DOS环境中，换行符是使用<strong>CR/LF</strong>两个字符一起表示的，下面命令模拟了<code>dos2unix</code>命令转换这些换行符为UNIX换行符。</p><blockquote><p>在GNU/Linux环境中，<strong>CR/LF</strong>通常使用”\^M”（不是简单的两个符号组合，请使用快捷键Ctrl+v,Ctrl+m输入）进行表示。</p></blockquote><pre><code>$ echo -e &quot;Line #1\r\nLine #2\r&quot; &gt; test.txt$ file test.txttest.txt: ASCII text, with CRLF line terminators$ sed &apos;s/^M$//&apos; test.txt &gt; new.txt$ file new.txtnew.txt: ASCII text$ cat -vte new.txtLine #1$Line #2$</code></pre><h3 id="模拟Unix2dos命令"><a href="#模拟Unix2dos命令" class="headerlink" title="模拟Unix2dos命令"></a>模拟<code>Unix2dos</code>命令</h3><pre><code>$ file new.txtnew.txt: ASCII text$ sed &apos;s/$/\r/&apos; new.txt &gt; new2.txt$ file new2.txtnew2.txt: ASCII text, with CRLF line terminators$ cat -vte new2.txtLine #1^M$Line #2^M$</code></pre><h3 id="模拟cat-E命令"><a href="#模拟cat-E命令" class="headerlink" title="模拟cat -E命令"></a>模拟<code>cat -E</code>命令</h3><p><code>cat -E</code>命令会在每一行的行尾输出一个<em>$</em>符号。</p><pre><code>$ echo -e &quot;Line #1\nLine #2&quot; | cat -ELine #1$Line #2$$ echo -e &quot;Line #1\nLine #2&quot; | sed &apos;s|$|&amp;$|&apos;Line #1$Line #2$</code></pre><blockquote><p>注意，在Mac下不支持<code>cat -E</code>，可以直接使用sed代替</p></blockquote><h3 id="模拟cat-ET命令"><a href="#模拟cat-ET命令" class="headerlink" title="模拟cat -ET命令"></a>模拟<code>cat -ET</code>命令</h3><p><code>cat -ET</code>命令不仅对每一行的行尾添加<em>$</em>，还会将每一行中的TAB显示为<em>^I</em>。</p><pre><code>$ echo -e &quot;Line #1\tLine #2&quot; | cat -ETLine #1^ILine #2$$ echo -e &quot;Line #1\tLine #2&quot; | sed -n &apos;l&apos; | sed &apos;y/\\t/^I/&apos;Line #1^ILine #2$</code></pre><h3 id="模拟nl命令"><a href="#模拟nl命令" class="headerlink" title="模拟nl命令"></a>模拟<code>nl</code>命令</h3><p>命令<code>nl</code>可以为输入内容的每一行添加行号，记得之前介绍的<code>=</code>操作符吧，在SED中我们可以用它来实现与<code>nl</code>命令类似的功能。</p><pre><code>$ echo -e &quot;Line #1\nLine #2&quot; |nl     1    Line #1     2    Line #2$ echo -e &quot;Line #1\nLine #2&quot; | sed = |  sed &apos;N;s/\n/\t/&apos;1    Line #12    Line #2</code></pre><p>上面的SED命令使用了两次，第一次使用<code>=</code>操作符为每一行输出行号，注意这个行号是独占一行的，因此使用管道符连接了第二个SED命令，每次读取两行，将换行符替换为Tab，这样就模拟出了<code>nl</code>命令的效果。</p><h3 id="模拟cp命令"><a href="#模拟cp命令" class="headerlink" title="模拟cp命令"></a>模拟<code>cp</code>命令</h3><pre><code>$ sed -n &apos;w dup.txt&apos; data.txt$ diff data.txt dup.txt$ echo $?0</code></pre><h3 id="模拟expand命令"><a href="#模拟expand命令" class="headerlink" title="模拟expand命令"></a>模拟<code>expand</code>命令</h3><p><code>expand</code>命令会转换输入中的TAB为空格，在SED中也可以模拟它</p><pre><code>$ echo -e &quot;One\tTwo\tThree&quot; &gt; test.txt$ expand test.txt &gt; expand.txt$ sed &apos;s/\t/     /g&apos; test.txt &gt; new.txt$ diff new.txt expand.txt$ echo $?0</code></pre><h3 id="模拟tee命令"><a href="#模拟tee命令" class="headerlink" title="模拟tee命令"></a>模拟<code>tee</code>命令</h3><p><code>tee</code>命令会将数据输出到标准输出的同时写入文件。</p><pre><code>$ echo -e &quot;Line #1\nLine #2&quot; | tee test.txt  Line #1 Line #2 </code></pre><p>在SED中，实现该命令非常简单</p><pre><code>$ sed -n &apos;p; w new.txt&apos; test.txtOne Two Three</code></pre><h3 id="模拟cat-s命令"><a href="#模拟cat-s命令" class="headerlink" title="模拟cat -s命令"></a>模拟<code>cat -s</code>命令</h3><p><code>cat -s</code>命令会将输入文件中的多行空格合并为一行。</p><pre><code>$ echo -e &quot;Line #1\n\n\n\nLine #2\n\n\nLine #3&quot; | cat -sLine #1Line #2Line #3</code></pre><p>在SED中实现</p><pre><code>$ echo -e &quot;Line #1\n\n\n\nLine #2\n\n\nLine #3&quot; | sed &apos;1s/^$//p;/./,/^$/!d&apos;Line #1Line #2Line #3</code></pre><p>这里需要注意的是<code>/./,/^$/!d</code>这个命令，它的意思是匹配区间<code>/./</code>到<code>/^$</code>，区间的开始会匹配至少包含一个字符的行，结束会匹配一个空行，在这个区间中的行不会被删除。</p><h3 id="模拟grep命令"><a href="#模拟grep命令" class="headerlink" title="模拟grep命令"></a>模拟<code>grep</code>命令</h3><pre><code>$ echo -e &quot;Line #1\nLine #2\nLine #3&quot; | grep &apos;Line #1&apos;Line #1$ echo -e &quot;Line #1\nLine #2\nLine #3&quot; | sed -n &apos;/Line #1/p&apos;Line #1</code></pre><h3 id="模拟grep-v命令"><a href="#模拟grep-v命令" class="headerlink" title="模拟grep -v命令"></a>模拟<code>grep -v</code>命令</h3><pre><code>$ echo -e &quot;Line #1\nLine #2\nLine #3&quot; | grep -v &apos;Line #1&apos;Line #2Line #3$ echo -e &quot;Line #1\nLine #2\nLine #3&quot; | sed -n &apos;/Line #1/!p&apos;Line #2Line #3</code></pre><h3 id="模拟tr命令"><a href="#模拟tr命令" class="headerlink" title="模拟tr命令"></a>模拟<code>tr</code>命令</h3><p><code>tr</code>命令用于字符转换</p><pre><code>$ echo &quot;ABC&quot; | tr &quot;ABC&quot; &quot;abc&quot;abc$ echo &quot;ABC&quot; | sed &apos;y/ABC/abc/&apos;abc</code></pre><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>看到这里，你肯定要吐槽了，不是说了三十分钟学会吗？你确定你能三十分钟学会？上次的<a href="https://aicode.cc/san-shi-fen-zhong-xue-huiawk.html" target="_blank" rel="noopener">三十分钟学会AWK</a>说三十分钟学会不靠谱，这次又不靠谱了。不好意思，这里的三十分钟其实只是为了吸引你的注意而已，只有在你已经用过SED并对它的一些特性有所了解的情况下三十分钟看完才是有可能的，毕竟那么多特殊字符，那么多命令需要记住。不过话说回来，看完之后你有收获吗？有的话，那本文的目的就达到了，之后用到SED的时候再回来参考一下就可以了。</p><p>本文将会持续修正和更新，最新内容请参考我的 <a href="https://github.com/mylxsw" target="_blank" rel="noopener">GITHUB</a> 上的 <a href="https://github.com/mylxsw/growing-up" target="_blank" rel="noopener">程序猿成长计划</a> 项目，欢迎 Star。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.tutorialspoint.com/sed/index.htm" target="_blank" rel="noopener">Sed Tutorial</a></li><li><a href="http://www.ituring.com.cn/book/1698" target="_blank" rel="noopener">Linux命令行与shell脚本编程大全（第3版）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mylxsw/growing-up/blob/master/doc/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%
      
    
    </summary>
    
      <category term="Repost" scheme="http://blog.duanxu.tech/categories/Repost/"/>
    
    
      <category term="Linux" scheme="http://blog.duanxu.tech/tags/Linux/"/>
    
      <category term="Sed" scheme="http://blog.duanxu.tech/tags/Sed/"/>
    
  </entry>
  
  <entry>
    <title>[转]三十分钟学会AWK</title>
    <link href="http://blog.duanxu.tech/2016/12/27/2016/2016-12-27-%E8%BD%AC-%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9AAWK/"/>
    <id>http://blog.duanxu.tech/2016/12/27/2016/2016-12-27-转-三十分钟学会AWK/</id>
    <published>2016-12-27T03:31:30.000Z</published>
    <updated>2018-12-07T12:36:43.441Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p><a href="https://github.com/mylxsw/growing-up/blob/master/doc/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9AAWK.md" target="_blank" rel="noopener">原文链接：三十分钟学会AWK</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://oayrssjpa.qnssl.com/wp-content/uploads/2016/11/FullSizeRender-3-1024x682.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>本文大部分内容翻译自我开始学习AWK时看到的一篇英文文章 <a href="https://www.tutorialspoint.com/awk/index.htm" target="_blank" rel="noopener">AWK Tutorial</a> ，觉得对AWK入门非常有帮助，所以对其进行了粗略的翻译，并对其中部分内容进行了删减或者补充，希望能为对AWK感兴趣的小伙伴提供一份快速入门的教程，帮助小伙伴们快速掌握AWK的基本使用方式，当然，我也是刚开始学习AWK，本文在翻译或者补充的过程中肯定会有很多疏漏或者错误，希望大家能够帮忙指正。</p><p>本文将会持续修正和更新，最新内容请参考我的 <a href="https://github.com/mylxsw" target="_blank" rel="noopener">GITHUB</a> 上的 <a href="https://github.com/mylxsw/growing-up" target="_blank" rel="noopener">程序猿成长计划</a> 项目，欢迎 Star。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>AWK是一门解释型的编程语言。在文本处理领域它是非常强大的，它的名字来源于它的三位作者的姓氏：<strong>Alfred Aho</strong>， <strong>Peter Weinberger</strong> 和 <strong>Brian Kernighan</strong>。</p><p>GNU/Linux发布的AWK目前由自由软件基金会（FSF）进行开发和维护，通常也称它为 <strong>GNU AWK</strong>。</p><h3 id="AWK的类型"><a href="#AWK的类型" class="headerlink" title="AWK的类型"></a>AWK的类型</h3><p>下面是几个AWK的变体：</p><ul><li><strong>AWK</strong> - 原先来源于 AT &amp; T 实验室的的AWK</li><li><strong>NAWK</strong> - AT &amp; T 实验室的AWK的升级版</li><li><strong>GAWK</strong> - 这就是GNU AWK。所有的GNU/Linux发布版都自带GAWK，它与AWK和NAWK完全兼容</li></ul><h3 id="AWK的典型用途"><a href="#AWK的典型用途" class="headerlink" title="AWK的典型用途"></a>AWK的典型用途</h3><p>使用AWK可以做很多任务，下面是其中一些</p><ul><li>文本处理</li><li>输出格式化的文本报表</li><li>执行算数运算</li><li>执行字符串操作等等</li></ul><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>要成为AWK编程专家，你需要先知道它的内部实现机制，AWK遵循了非常简单的工作流 - <strong>读取</strong>，<strong>执行</strong>和<strong>重复</strong>，下图描述了AWK的工作流。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://oayrssjpa.qnssl.com/2016-10-31-14774633531266.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>Read</strong></p><p>AWK从输入流（文件，管道或者标准输入）中读取一行，然后存储到内存中。</p><p><strong>Execute</strong></p><p>所有的AWK命令都依次在输入上执行。默认情况下，AWK会对每一行执行命令，我们可以通过提供模式限制这种行为。</p><p><strong>Repeat</strong></p><p>处理过程不断重复，直到到达文件结尾。</p><h3 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h3><p>现在，让我们先学习一下AWK的程序结构。</p><h4 id="BEGIN-语句块"><a href="#BEGIN-语句块" class="headerlink" title="BEGIN 语句块"></a>BEGIN 语句块</h4><p>BEGIN语句块的语法</p><pre><code>BEGIN {awk-commands}</code></pre><p>BEGIN语句块在程序开始的使用执行，它只执行一次，在这里可以初始化变量。BEGIN是AWK的关键字，因此它必须为大写，注意，这个语句块是可选的。</p><h4 id="BODY-语句块"><a href="#BODY-语句块" class="headerlink" title="BODY 语句块"></a>BODY 语句块</h4><p>BODY语句块的语法</p><pre><code>/pattern/ {awk-commands}</code></pre><p>BODY语句块中的命令会对输入的每一行执行，我们也可以通过提供模式来控制这种行为。注意，BODY语句块没有关键字。</p><h4 id="END-语句块"><a href="#END-语句块" class="headerlink" title="END 语句块"></a>END 语句块</h4><p>END语句块的语法</p><pre><code>END {awk-commands}</code></pre><p>END语句块在程序的最后执行，END是AWK的关键字，因此必须为大写，它也是可选的。</p><p>让我们创建一个包含序号，学生姓名，科目名称和得分的文件 <em>marks.txt</em>。</p><pre><code>1)  Amit    Physics  802)  Rahul   Maths    903)  Shyam   Biology  874)  Kedar   English  855)  Hari    History  89</code></pre><p>下面的例子中我们将会显示文件内容，并且添加每一列的标题</p><pre><code>$ awk &apos;BEGIN{printf &quot;Sr No\tName\tSub\tMarks\n&quot;} {print}&apos; marks.txt</code></pre><p>上述代码执行后，输出以下内容</p><pre><code>Sr No     Name     Sub          Marks 1)       Amit     Physics      80 2)       Rahul    Maths        90 3)       Shyam    Biology      87 4)       Kedar    English      85 5)       Hari     History      89</code></pre><p>在程序的开始，AWK在BEGIN语句中打印出标题。然后再BODY语句中，它会读取文件的每一行然后执行AWK的print命令将每一行的内容打印到标准输出。这个过程会一直重复直到文件的结尾。</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>AWK的使用非常简单，我们可以直接在命令行中执行AWK的命令，也可以从包含AWK命令的文本文件中执行。</p><h3 id="AWK命令行"><a href="#AWK命令行" class="headerlink" title="AWK命令行"></a>AWK命令行</h3><p>我们可以使用单引号在命令行中指定AWK命令</p><pre><code>awk [options] file ...</code></pre><p>比如我们有一个包含下面内容的文本文件 <em>marks.txt</em>:</p><pre><code>1) Amit     Physics    802) Rahul    Maths      903) Shyam    Biology    874) Kedar    English    855) Hari     History    89</code></pre><p>我们可以使用下面的命令显示该文件的完整内容</p><pre><code>$ awk &apos;{print}&apos; marks.txt </code></pre><h3 id="AWK程序文件"><a href="#AWK程序文件" class="headerlink" title="AWK程序文件"></a>AWK程序文件</h3><p>我们可以使用脚本文件提供AWK命令</p><pre><code>awk [options] -f file ....</code></pre><p>首先，创建一个包含下面内容的文本文件 <em>command.awk</em></p><pre><code>{print} </code></pre><p>现在，我们可以让AWK执行该文件中的命令，这里我们实现了和上例同样的结果</p><pre><code>$ awk -f command.awk marks.txt</code></pre><h3 id="AWK标准选项"><a href="#AWK标准选项" class="headerlink" title="AWK标准选项"></a>AWK标准选项</h3><p>AWK支持下列命令行标准选项</p><h4 id="v-变量赋值选项"><a href="#v-变量赋值选项" class="headerlink" title="-v 变量赋值选项"></a><code>-v</code> 变量赋值选项</h4><p>该选项将一个值赋予一个变量，它会在程序开始之前进行赋值，下面的例子描述了该选项的使用</p><pre><code>$ awk -v name=Jerry &apos;BEGIN{printf &quot;Name = %s\n&quot;, name}&apos;Name = Jerry</code></pre><h4 id="dump-variables-file-选项"><a href="#dump-variables-file-选项" class="headerlink" title="--dump-variables[=file] 选项"></a><code>--dump-variables[=file]</code> 选项</h4><p>该选项会输出排好序的全局变量列表和它们最终的值到文件中，默认的文件是 <strong>awkvars.out</strong>。</p><pre><code>$ awk --dump-variables &apos;&apos;$ cat awkvars.out ARGC: 1ARGIND: 0ARGV: array, 1 elementsBINMODE: 0CONVFMT: &quot;%.6g&quot;ERRNO: &quot;&quot;FIELDWIDTHS: &quot;&quot;FILENAME: &quot;&quot;FNR: 0FPAT: &quot;[^[:space:]]+&quot;FS: &quot; &quot;IGNORECASE: 0LINT: 0NF: 0NR: 0OFMT: &quot;%.6g&quot;OFS: &quot; &quot;ORS: &quot;\n&quot;RLENGTH: 0RS: &quot;\n&quot;RSTART: 0RT: &quot;&quot;SUBSEP: &quot;\034&quot;TEXTDOMAIN: &quot;messages&quot;</code></pre><h4 id="help-选项"><a href="#help-选项" class="headerlink" title="--help 选项"></a><code>--help</code> 选项</h4><p>打印帮助信息。</p><pre><code>$ awk --helpUsage: awk [POSIX or GNU style options] -f progfile [--] file ...Usage: awk [POSIX or GNU style options] [--] &apos;program&apos; file ...POSIX options : GNU long options: (standard)   -f progfile                --file=progfile   -F fs                      --field-separator=fs   -v var=val                 --assign=var=valShort options : GNU long options: (extensions)   -b                         --characters-as-bytes   -c                         --traditional   -C                         --copyright   -d[file]                   --dump-variables[=file]   -e &apos;program-text&apos;          --source=&apos;program-text&apos;   -E file                    --exec=file   -g                         --gen-pot   -h                         --help   -L [fatal]                 --lint[=fatal]   -n                         --non-decimal-data   -N                         --use-lc-numeric   -O                         --optimize   -p[file]                   --profile[=file]   -P                         --posix   -r                         --re-interval   -S                         --sandbox   -t                         --lint-old   -V                         --version</code></pre><h4 id="lint-fatal-选项"><a href="#lint-fatal-选项" class="headerlink" title="--lint[=fatal] 选项"></a><code>--lint[=fatal]</code> 选项</h4><p>该选项允许检查程序的不兼容性或者模棱两可的代码，当提供参数 <strong>fatal</strong>的时候，它会对待Warning消息作为Error。</p><pre><code>$ awk --lint &apos;&apos; /bin/lsawk: cmd. line:1: warning: empty program text on command lineawk: cmd. line:1: warning: source file does not end in newlineawk: warning: no program text at all!</code></pre><h4 id="posix-选项"><a href="#posix-选项" class="headerlink" title="--posix 选项"></a><code>--posix</code> 选项</h4><p>该选项开启严格的POSIX兼容。</p><h4 id="profile-file-选项"><a href="#profile-file-选项" class="headerlink" title="--profile[=file]选项"></a><code>--profile[=file]</code>选项</h4><p>该选项会输出一份格式化之后的程序到文件中，默认文件是 <em>awkprof.out</em>。</p><pre><code>$ awk --profile &apos;BEGIN{printf&quot;---|Header|--\n&quot;} {print} END{printf&quot;---|Footer|---\n&quot;}&apos; marks.txt &gt; /dev/null $ cat awkprof.out    # gawk 配置, 创建 Wed Oct 26 15:05:49 2016    # BEGIN 块    BEGIN {        printf &quot;---|Header|--\n&quot;    }    # 规则    {        print $0    }    # END 块    END {        printf &quot;---|Footer|---\n&quot;    }</code></pre><h4 id="traditional-选项"><a href="#traditional-选项" class="headerlink" title="--traditional 选项"></a><code>--traditional</code> 选项</h4><p>该选项会禁止所有的gawk规范的扩展。</p><h4 id="version-选项"><a href="#version-选项" class="headerlink" title="--version 选项"></a><code>--version</code> 选项</h4><p>输出版本号</p><pre><code>$ awk --versionGNU Awk 3.1.7版权所有 © 1989, 1991-2009 自由软件基金会(FSF)。该程序为自由软件，你可以在自由软件基金会发布的 GNU 通用公共许可证(GPL)第3版或以后版本下修改或重新发布。该程序之所以被发布是因为希望他能对你有所用处，但我们不作任何担保。这包含但不限于任何商业适售性以及针对特定目的的适用性的担保。详情参见 GNU 通用公共许可证(GPL)。你应该收到程序附带的一份 GNU 通用公共许可证(GPL)。如果没有收到，请参看 http://www.gnu.org/licenses/ 。You have new mail in /var/spool/mail/root</code></pre><h2 id="基本使用示例"><a href="#基本使用示例" class="headerlink" title="基本使用示例"></a>基本使用示例</h2><p>本部分会讲述一些有用的AWK命令和它们的使用示例，所有的例子都是以下面的文本文件 <em>marks.txt</em> 为基础的</p><pre><code>1) Amit    Physics        802) Rahul    Maths        903) Shyam    Biology        874) Kedar    English        855) Hari    History        89</code></pre><h3 id="打印某列或者字段"><a href="#打印某列或者字段" class="headerlink" title="打印某列或者字段"></a>打印某列或者字段</h3><p>AWK可以只打印输入字段中的某些列。</p><pre><code>$ awk &apos;{print $3 &quot;\t&quot; $4}&apos; marks.txtPhysics    80Maths    90Biology    87English    85History    89</code></pre><p>在文件<em>marks.txt</em>中，第三列包含了科目名，第四列则是得分，上面的例子中，我们只打印出了这两列，<strong>$3</strong> 和 <strong>$4</strong> 代表了输入记录中的第三和第四个字段。</p><h3 id="打印所有的行"><a href="#打印所有的行" class="headerlink" title="打印所有的行"></a>打印所有的行</h3><p>默认情况下，AWK会打印出所有匹配模式的行</p><pre><code>$ awk &apos;/a/ {print $0}&apos; marks.txt2)  Rahul   Maths    903)  Shyam   Biology  874)  Kedar   English  855)  Hari    History  89</code></pre><p>上述命令会判断每一行中是否包含<code>a</code>，如果包含则打印该行，如果BODY部分缺失则默认会执行打印，因此，上述命令和下面这个是等价的</p><pre><code>$ awk &apos;/a/&apos; marks.txt</code></pre><h3 id="打印匹配模式的列"><a href="#打印匹配模式的列" class="headerlink" title="打印匹配模式的列"></a>打印匹配模式的列</h3><p>当模式匹配成功时，默认情况下AWK会打印该行，但是也可以让它只打印指定的字段。例如，下面的例子中，只会打印出匹配模式的第三和第四个字段。</p><pre><code>$ awk &apos;/a/ {print $3 &quot;\t&quot; $4}&apos; marks.txtMaths    90Biology    87English    85History    89</code></pre><h3 id="任意顺序打印列"><a href="#任意顺序打印列" class="headerlink" title="任意顺序打印列"></a>任意顺序打印列</h3><pre><code>$ awk &apos;/a/ {print $4 &quot;\t&quot; $3}&apos; marks.txt90    Maths87    Biology85    English89    History</code></pre><h3 id="统计匹配模式的行数"><a href="#统计匹配模式的行数" class="headerlink" title="统计匹配模式的行数"></a>统计匹配模式的行数</h3><pre><code>$ awk &apos;/a/{++cnt} END {print &quot;Count = &quot;, cnt}&apos; marks.txtCount =  4</code></pre><h3 id="打印超过18个字符的行"><a href="#打印超过18个字符的行" class="headerlink" title="打印超过18个字符的行"></a>打印超过18个字符的行</h3><pre><code>$ awk &apos;length($0) &gt; 18&apos; marks.txt3) Shyam   Biology   874) Kedar   English   85</code></pre><h2 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h2><p>AWK提供了很多内置的变量，它们在开发AWK脚本的过程中起着非常重要的角色。</p><h3 id="标准AWK变量"><a href="#标准AWK变量" class="headerlink" title="标准AWK变量"></a>标准AWK变量</h3><h4 id="ARGC-命令行参数个数"><a href="#ARGC-命令行参数个数" class="headerlink" title="ARGC 命令行参数个数"></a>ARGC 命令行参数个数</h4><p>命令行中提供的参数个数</p><pre><code>$ awk &apos;BEGIN {print &quot;Arguments =&quot;, ARGC}&apos; One Two Three FourArguments = 5</code></pre><h4 id="ARGV-命令行参数数组"><a href="#ARGV-命令行参数数组" class="headerlink" title="ARGV 命令行参数数组"></a>ARGV 命令行参数数组</h4><p>存储命令行参数的数组，索引范围从<strong>0</strong> - <strong>ARGC - 1</strong>。</p><pre><code>$ awk &apos;BEGIN {    for (i = 0; i &lt; ARGC - 1; ++i) {       printf &quot;ARGV[%d] = %s\n&quot;, i, ARGV[i]    } }&apos; one two three fourARGV[0] = awkARGV[1] = oneARGV[2] = twoARGV[3] = three</code></pre><h4 id="CONVFMT-数字的约定格式"><a href="#CONVFMT-数字的约定格式" class="headerlink" title="CONVFMT 数字的约定格式"></a>CONVFMT 数字的约定格式</h4><p>代表了数字的约定格式，默认值是<strong>%.6g</strong></p><pre><code>$ awk &apos;BEGIN { print &quot;Conversion Format =&quot;, CONVFMT }&apos;Conversion Format = %.6g</code></pre><h4 id="ENVIRON-环境变量"><a href="#ENVIRON-环境变量" class="headerlink" title="ENVIRON 环境变量"></a>ENVIRON 环境变量</h4><p>环境变量的关联数组</p><pre><code>$ awk &apos;BEGIN { print ENVIRON[&quot;USER&quot;] }&apos;mylxsw</code></pre><h4 id="FILENAME-当前文件名"><a href="#FILENAME-当前文件名" class="headerlink" title="FILENAME 当前文件名"></a>FILENAME 当前文件名</h4><pre><code>$ awk &apos;END {print FILENAME}&apos; marks.txtmarks.txt</code></pre><h4 id="FS-输入字段的分隔符"><a href="#FS-输入字段的分隔符" class="headerlink" title="FS 输入字段的分隔符"></a>FS 输入字段的分隔符</h4><p>代表了输入字段的分隔符，默认值为<strong>空格</strong>，可以通过<code>-F</code>选项在命令行选项中修改它。</p><pre><code>$ awk &apos;BEGIN {print &quot;FS = &quot; FS}&apos; | cat -vteFS =  $$ awk -F , &apos;BEGIN {print &quot;FS = &quot; FS}&apos; | cat -vteFS = ,$</code></pre><h4 id="NF-字段数目"><a href="#NF-字段数目" class="headerlink" title="NF 字段数目"></a>NF 字段数目</h4><p>代表了当前行中的字段数目，例如下面例子打印出了包含大于两个字段的行</p><pre><code>$ echo -e &quot;One Two\nOne Two Three\nOne Two Three Four&quot; | awk &apos;NF &gt; 2&apos;One Two ThreeOne Two Three Four</code></pre><h4 id="NR-行号"><a href="#NR-行号" class="headerlink" title="NR 行号"></a>NR 行号</h4><pre><code>$ echo -e &quot;One Two\nOne Two Three\nOne Two Three Four&quot; | awk &apos;NR &lt; 3&apos;One TwoOne Two Three</code></pre><h4 id="FNR-行号（相对当前文件）"><a href="#FNR-行号（相对当前文件）" class="headerlink" title="FNR 行号（相对当前文件）"></a>FNR 行号（相对当前文件）</h4><p>与NR相似，不过在处理多文件时更有用，获取的行号相对于当前文件。</p><h4 id="OFMT-输出格式数字"><a href="#OFMT-输出格式数字" class="headerlink" title="OFMT 输出格式数字"></a>OFMT 输出格式数字</h4><p>默认值为<strong>%.6g</strong></p><pre><code>$ awk &apos;BEGIN {print &quot;OFMT = &quot; OFMT}&apos;OFMT = %.6g</code></pre><h4 id="OFS-输出字段分隔符"><a href="#OFS-输出字段分隔符" class="headerlink" title="OFS 输出字段分隔符"></a>OFS 输出字段分隔符</h4><p>输出字段分隔符，默认为空格</p><pre><code>$ awk &apos;BEGIN {print &quot;OFS = &quot; OFS}&apos; | cat -vteOFS =  $</code></pre><h4 id="ORS-输出行分隔符"><a href="#ORS-输出行分隔符" class="headerlink" title="ORS 输出行分隔符"></a>ORS 输出行分隔符</h4><p>默认值为换行符</p><pre><code>$ awk &apos;BEGIN {print &quot;ORS = &quot; ORS}&apos; | cat -vteORS = $$</code></pre><h4 id="RLENGTH"><a href="#RLENGTH" class="headerlink" title="RLENGTH"></a>RLENGTH</h4><p>代表了 <strong>match</strong> 函数匹配的字符串长度。</p><pre><code>$ awk &apos;BEGIN { if (match(&quot;One Two Three&quot;, &quot;re&quot;)) { print RLENGTH } }&apos;2</code></pre><h4 id="RS-输入记录分隔符"><a href="#RS-输入记录分隔符" class="headerlink" title="RS 输入记录分隔符"></a>RS 输入记录分隔符</h4><pre><code>$ awk &apos;BEGIN {print &quot;RS = &quot; RS}&apos; | cat -vteRS = $$</code></pre><h4 id="RSTART"><a href="#RSTART" class="headerlink" title="RSTART"></a>RSTART</h4><p><strong>match</strong>函数匹配的第一次出现位置</p><pre><code>$ awk &apos;BEGIN { if (match(&quot;One Two Three&quot;, &quot;Thre&quot;)) { print RSTART } }9</code></pre><h4 id="SUBSEP-数组子脚本的分隔符"><a href="#SUBSEP-数组子脚本的分隔符" class="headerlink" title="SUBSEP 数组子脚本的分隔符"></a>SUBSEP 数组子脚本的分隔符</h4><p>数组子脚本的分隔符，默认为<strong>\034</strong></p><pre><code>$ awk &apos;BEGIN { print &quot;SUBSEP = &quot; SUBSEP }&apos; | cat -vteSUBSEP = ^\$</code></pre><h4 id="0-代表了当前行"><a href="#0-代表了当前行" class="headerlink" title="$ 0 代表了当前行"></a><strong>$ 0</strong> 代表了当前行</h4><p>代表了当前行</p><pre><code>$ awk &apos;{print $0}&apos; marks.txt1) Amit     Physics   802) Rahul    Maths     903) Shyam    Biology   874) Kedar    English   855) Hari     History   89</code></pre><h4 id="n"><a href="#n" class="headerlink" title="$n"></a>$n</h4><p>当前行中的第n个字段</p><pre><code>$ awk &apos;{print $3 &quot;\t&quot; $4}&apos; marks.txtPhysics   80Maths     90Biology   87English   85History   89</code></pre><h3 id="GNU-AWK的变量"><a href="#GNU-AWK的变量" class="headerlink" title="GNU AWK的变量"></a>GNU AWK的变量</h3><h4 id="ARGIND"><a href="#ARGIND" class="headerlink" title="ARGIND"></a>ARGIND</h4><p>当前被处理的ARGV的索引</p><pre><code>$ awk &apos;{    print &quot;ARGIND   = &quot;, ARGIND; print &quot;Filename = &quot;, ARGV[ARGIND] }&apos; junk1 junk2 junk3ARGIND   =  1Filename =  junk1ARGIND   =  2Filename =  junk2ARGIND   =  3Filename =  junk3</code></pre><h4 id="BINMODE"><a href="#BINMODE" class="headerlink" title="BINMODE"></a>BINMODE</h4><p>在非POSIX系统上指定对所有的文件I/O采用二进制模式。</p><h4 id="ERRORNO"><a href="#ERRORNO" class="headerlink" title="ERRORNO"></a>ERRORNO</h4><p>一个代表了<strong>getline</strong>跳转失败或者是<strong>close</strong>调用失败的错误的字符串。</p><pre><code>$ awk &apos;BEGIN { ret = getline &lt; &quot;junk.txt&quot;; if (ret == -1) print &quot;Error:&quot;, ERRNO }&apos;Error: No such file or directory</code></pre><h4 id="FIELDWIDTHS"><a href="#FIELDWIDTHS" class="headerlink" title="FIELDWIDTHS"></a>FIELDWIDTHS</h4><p>设置了空格分隔的字段宽度变量列表的话，GAWK会将输入解析为固定宽度的字段，而不是使用<strong>FS</strong>进行分隔。</p><h4 id="IGNORECASE"><a href="#IGNORECASE" class="headerlink" title="IGNORECASE"></a>IGNORECASE</h4><p>设置了这个变量的话，AWK会忽略大小写。</p><pre><code>$ awk &apos;BEGIN{IGNORECASE = 1} /amit/&apos; marks.txt1) Amit  Physics   80</code></pre><h4 id="LINT"><a href="#LINT" class="headerlink" title="LINT"></a>LINT</h4><p>提供了对<strong>–lint</strong>选项的动态控制。</p><pre><code>$ awk &apos;BEGIN {LINT = 1; a}&apos;awk: cmd. line:1: warning: reference to uninitialized variable `a&apos;awk: cmd. line:1: warning: statement has no effect</code></pre><h4 id="PROCINFO"><a href="#PROCINFO" class="headerlink" title="PROCINFO"></a>PROCINFO</h4><p>包含进程信息的关联数组，例如UID，进程ID等</p><pre><code>$ awk &apos;BEGIN { print PROCINFO[&quot;pid&quot;] }&apos;4316</code></pre><h4 id="TEXTDOMAIN"><a href="#TEXTDOMAIN" class="headerlink" title="TEXTDOMAIN"></a>TEXTDOMAIN</h4><p>代表了AWK的文本域，用于查找字符串的本地化翻译。</p><pre><code>$ awk &apos;BEGIN { print TEXTDOMAIN }&apos;messages</code></pre><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>与其它编程语言一样，AWK也提供了大量的操作符。</p><h3 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h3><p>算数操作符不多说，直接看例子，无非就是<strong>+-*/%</strong></p><pre><code>$ awk &apos;BEGIN { a = 50; b = 20; print &quot;(a + b) = &quot;, (a + b) }&apos;(a + b) =  70$ awk &apos;BEGIN { a = 50; b = 20; print &quot;(a - b) = &quot;, (a - b) }&apos;(a - b) =  30$ awk &apos;BEGIN { a = 50; b = 20; print &quot;(a * b) = &quot;, (a * b) }&apos;(a * b) =  1000$ awk &apos;BEGIN { a = 50; b = 20; print &quot;(a / b) = &quot;, (a / b) }&apos;(a / b) =  2.5$ awk &apos;BEGIN { a = 50; b = 20; print &quot;(a % b) = &quot;, (a % b) }&apos;(a % b) =  10</code></pre><h3 id="增减运算符"><a href="#增减运算符" class="headerlink" title="增减运算符"></a>增减运算符</h3><p>自增自减与C语言一致。</p><pre><code>$ awk &apos;BEGIN { a = 10; b = ++a; printf &quot;a = %d, b = %d\n&quot;, a, b }&apos;a = 11, b = 11$ awk &apos;BEGIN { a = 10; b = --a; printf &quot;a = %d, b = %d\n&quot;, a, b }&apos;a = 9, b = 9$ awk &apos;BEGIN { a = 10; b = a++; printf &quot;a = %d, b = %d\n&quot;, a, b }&apos;a = 11, b = 10$ awk &apos;BEGIN { a = 10; b = a--; printf &quot;a = %d, b = %d\n&quot;, a, b }&apos;a = 9, b = 10</code></pre><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><pre><code>$ awk &apos;BEGIN { name = &quot;Jerry&quot;; print &quot;My name is&quot;, name }&apos;My name is Jerry$ awk &apos;BEGIN { cnt = 10; cnt += 10; print &quot;Counter =&quot;, cnt }&apos;Counter = 20$ awk &apos;BEGIN { cnt = 100; cnt -= 10; print &quot;Counter =&quot;, cnt }&apos;Counter = 90$ awk &apos;BEGIN { cnt = 10; cnt *= 10; print &quot;Counter =&quot;, cnt }&apos;Counter = 100$ awk &apos;BEGIN { cnt = 100; cnt /= 5; print &quot;Counter =&quot;, cnt }&apos;Counter = 20$ awk &apos;BEGIN { cnt = 100; cnt %= 8; print &quot;Counter =&quot;, cnt }&apos;Counter = 4$ awk &apos;BEGIN { cnt = 2; cnt ^= 4; print &quot;Counter =&quot;, cnt }&apos;Counter = 16$ awk &apos;BEGIN { cnt = 2; cnt **= 4; print &quot;Counter =&quot;, cnt }&apos;Counter = 16</code></pre><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><pre><code>$ awk &apos;BEGIN { a = 10; b = 10; if (a == b) print &quot;a == b&quot; }&apos;a == b$ awk &apos;BEGIN { a = 10; b = 20; if (a != b) print &quot;a != b&quot; }&apos;a != b$ awk &apos;BEGIN { a = 10; b = 20; if (a &lt; b) print &quot;a  &lt; b&quot; }&apos;a  &lt; b$ awk &apos;BEGIN { a = 10; b = 10; if (a &lt;= b) print &quot;a &lt;= b&quot; }&apos;a &lt;= b$ awk &apos;BEGIN { a = 10; b = 20; if (b &gt; a ) print &quot;b &gt; a&quot; }&apos;b &gt; a</code></pre><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><pre><code>$ awk &apos;BEGIN {   num = 5; if (num &gt;= 0 &amp;&amp; num &lt;= 7) printf &quot;%d is in octal format\n&quot;, num}&apos;5 is in octal format$ awk &apos;BEGIN {   ch = &quot;\n&quot;; if (ch == &quot; &quot; || ch == &quot;\t&quot; || ch == &quot;\n&quot;)   print &quot;Current character is whitespace.&quot;}&apos;Current character is whitespace.$ awk &apos;BEGIN { name = &quot;&quot;; if (! length(name)) print &quot;name is empty string.&quot; }&apos;name is empty string.</code></pre><h3 id="三元操作符"><a href="#三元操作符" class="headerlink" title="三元操作符"></a>三元操作符</h3><pre><code>$ awk &apos;BEGIN { a = 10; b = 20; (a &gt; b) ? max = a : max = b; print &quot;Max =&quot;, max}&apos;Max = 20</code></pre><h3 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h3><pre><code>$ awk &apos;BEGIN { a = -10; a = +a; print &quot;a =&quot;, a }&apos;a = -10$ awk &apos;BEGIN { a = -10; a = -a; print &quot;a =&quot;, a }&apos;a = 10</code></pre><h3 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符"></a>指数操作符</h3><pre><code>$ awk &apos;BEGIN { a = 10; a = a ^ 2; print &quot;a =&quot;, a }&apos;a = 100$ awk &apos;BEGIN { a = 10; a ^= 2; print &quot;a =&quot;, a }&apos;a = 100</code></pre><h3 id="字符串连接操作符"><a href="#字符串连接操作符" class="headerlink" title="字符串连接操作符"></a>字符串连接操作符</h3><pre><code>$ awk &apos;BEGIN { str1 = &quot;Hello, &quot;; str2 = &quot;World&quot;; str3 = str1 str2; print str3 }&apos;Hello, World</code></pre><h3 id="数组成员操作符"><a href="#数组成员操作符" class="headerlink" title="数组成员操作符"></a>数组成员操作符</h3><pre><code>$ awk &apos;BEGIN {    arr[0] = 1; arr[1] = 2; arr[2] = 3; for (i in arr) printf &quot;arr[%d] = %d\n&quot;, i, arr[i]}&apos;arr[2] = 3arr[0] = 1arr[1] = 2</code></pre><h3 id="正则表达式操作符"><a href="#正则表达式操作符" class="headerlink" title="正则表达式操作符"></a>正则表达式操作符</h3><p>正则表达式操作符使用 <strong>~</strong> 和 <strong>!~</strong> 分别代表匹配和不匹配。</p><pre><code>$ awk &apos;$0 ~ 9&apos; marks.txt2) Rahul   Maths    905) Hari    History  89$ awk &apos;$0 !~ 9&apos; marks.txt1) Amit     Physics   803) Shyam    Biology   874) Kedar    English   85# 匹配正则表达式需要在表达式前后添加反斜线，与js类似吧$ tail -n 40 /var/log/nginx/access.log | awk &apos;$0 ~ /ip\[127\.0\.0\.1\]/&apos;</code></pre><blockquote><p>更多关于正则表达式请看后面的正则表达式部分</p></blockquote><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>AWK在处理正则表达式方面是非常强大的，使用简单的正则表达式可以处理非常复杂的问题。</p><pre><code>$ echo -e &quot;cat\nbat\nfun\nfin\nfan&quot; | awk &apos;/f.n/&apos;funfinfan$ echo -e &quot;This\nThat\nThere\nTheir\nthese&quot; | awk &apos;/^The/&apos;ThereTheir$ echo -e &quot;knife\nknow\nfun\nfin\nfan\nnine&quot; | awk &apos;/n$/&apos;funfinfan$ echo -e &quot;Call\nTall\nBall&quot; | awk &apos;/[CT]all/&apos;CallTall$ echo -e &quot;Call\nTall\nBall&quot; | awk &apos;/[^CT]all/&apos;Ball$ echo -e &quot;Call\nTall\nBall\nSmall\nShall&quot; | awk &apos;/Call|Ball/&apos;CallBall$ echo -e &quot;Colour\nColor&quot; | awk &apos;/Colou?r/&apos;ColourColor$ echo -e &quot;ca\ncat\ncatt&quot; | awk &apos;/cat*/&apos;cacatcatt$ echo -e &quot;111\n22\n123\n234\n456\n222&quot;  | awk &apos;/2+/&apos;22123234222$ echo -e &quot;Apple Juice\nApple Pie\nApple Tart\nApple Cake&quot; | awk &apos;/Apple (Juice|Cake)/&apos;Apple JuiceApple Cake</code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>AWK支持关联数组，也就是说，不仅可以使用数字索引的数组，还可以使用字符串作为索引，而且数字索引也不要求是连续的。数组不需要声明可以直接使用，语法如下：</p><pre><code>array_name[index] = value</code></pre><p>创建数组的方式非常简单，直接为变量赋值即可</p><pre><code>$ awk &apos;BEGIN {   fruits[&quot;mango&quot;] = &quot;yellow&quot;;   fruits[&quot;orange&quot;] = &quot;orange&quot;   print fruits[&quot;orange&quot;] &quot;\n&quot; fruits[&quot;mango&quot;]}&apos;orangeyellow</code></pre><p>删除数组元素使用<code>delete</code>语句</p><pre><code>$ awk &apos;BEGIN {   fruits[&quot;mango&quot;] = &quot;yellow&quot;;   fruits[&quot;orange&quot;] = &quot;orange&quot;;   delete fruits[&quot;orange&quot;];   print fruits[&quot;orange&quot;]}&apos;</code></pre><p>在AWK中，只支持一维数组，但是可以通过一维数组模拟多维，例如我们有一个3x3的三维数组</p><pre><code>100   200   300400   500   600700   800   900</code></pre><p>可以这样操作</p><pre><code>$ awk &apos;BEGIN {   array[&quot;0,0&quot;] = 100;   array[&quot;0,1&quot;] = 200;   array[&quot;0,2&quot;] = 300;   array[&quot;1,0&quot;] = 400;   array[&quot;1,1&quot;] = 500;   array[&quot;1,2&quot;] = 600;   # print array elements   print &quot;array[0,0] = &quot; array[&quot;0,0&quot;];   print &quot;array[0,1] = &quot; array[&quot;0,1&quot;];   print &quot;array[0,2] = &quot; array[&quot;0,2&quot;];   print &quot;array[1,0] = &quot; array[&quot;1,0&quot;];   print &quot;array[1,1] = &quot; array[&quot;1,1&quot;];   print &quot;array[1,2] = &quot; array[&quot;1,2&quot;];}&apos;array[0,0] = 100array[0,1] = 200array[0,2] = 300array[1,0] = 400array[1,1] = 500array[1,2] = 600</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>流程控制语句与大多数语言一样，基本格式如下</p><pre><code>if (condition)   actionif (condition) {   action-1   action-1   .   .   action-n}if (condition)   action-1else if (condition2)   action-2else   action-3</code></pre><p>例如：</p><pre><code>$ awk &apos;BEGIN {   num = 11; if (num % 2 == 0) printf &quot;%d is even number.\n&quot;, num;       else printf &quot;%d is odd number.\n&quot;, num }&apos;$ awk &apos;BEGIN {   a = 30;   if (a==10)   print &quot;a = 10&quot;;   else if (a == 20)   print &quot;a = 20&quot;;   else if (a == 30)   print &quot;a = 30&quot;;}&apos;</code></pre><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环操作与其他C系语言一样，主要包括 <code>for</code>，<code>while</code>，<code>do...while</code>，<code>break</code>，<code>continue</code> 语句，当然，还有一个 <code>exit</code>语句用于退出脚本执行。</p><pre><code>for (initialisation; condition; increment/decrement)   actionwhile (condition)   actiondo   actionwhile (condition)</code></pre><p>例子：</p><pre><code>$ awk &apos;BEGIN { for (i = 1; i &lt;= 5; ++i) print i }&apos;$ awk &apos;BEGIN {i = 1; while (i &lt; 6) { print i; ++i } }&apos;$ awk &apos;BEGIN {i = 1; do { print i; ++i } while (i &lt; 6) }&apos;$ awk &apos;BEGIN {   sum = 0; for (i = 0; i &lt; 20; ++i) {       sum += i; if (sum &gt; 50) break; else print &quot;Sum =&quot;, sum    } }&apos;$ awk &apos;BEGIN {   for (i = 1; i &lt;= 20; ++i) {      if (i % 2 == 0) print i ; else continue   } }&apos;$ awk &apos;BEGIN {   sum = 0; for (i = 0; i &lt; 20; ++i) {      sum += i; if (sum &gt; 50) exit(10); else print &quot;Sum =&quot;, sum    } }&apos;</code></pre><blockquote><p><code>exit</code>用于退出脚本，参数为退出的状态码，可以通过shell中的<code>$?</code>获取</p></blockquote><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h3><p>AWK提供了很多方便的内建函数供编程人员使用。由于函数比较多，个人觉得单纯看每个函数的使用也没有什么实际意义，比较容易遗忘，因此，这里只简单的列出常用的一些函数，只需要对其有个印象即可，使用的时候再去 <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Built_002din" target="_blank" rel="noopener">查手册</a> 效果会更好一些吧。</p><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><ul><li><code>atan2(y, x)</code> </li><li><code>cos(expr)</code> </li><li><code>exp(expr)</code> </li><li><code>int(expr)</code> </li><li><code>log(expr)</code> </li><li><code>rand</code> </li><li><code>sin(expr)</code> </li><li><code>sqrt(expr)</code> </li><li><code>srand([expr])</code> </li></ul><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><ul><li><code>asort(arr [, d [, how] ])</code> </li><li><code>asorti(arr [, d [, how] ])</code> </li><li><code>gsub(regex, sub, string)</code> </li><li><code>index(str, sub)</code> </li><li><code>length(str)</code> </li><li><code>match(str, regex)</code> </li><li><code>split(str, arr, regex)</code> </li><li><code>sprintf(format, expr-list)</code> </li><li><code>strtonum(str)</code> </li><li><code>sub(regex, sub, string)</code> </li><li><code>substr(str, start, l)</code> </li><li><code>tolower(str)</code> </li><li><code>toupper(str)</code></li></ul><h4 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h4><ul><li><code>systime</code> </li><li><code>mktime(datespec)</code> </li><li><code>strftime([format [, timestamp[, utc-flag]]])</code> </li></ul><h4 id="字节操作函数"><a href="#字节操作函数" class="headerlink" title="字节操作函数"></a>字节操作函数</h4><ul><li><code>and</code> </li><li><code>compl</code> </li><li><code>lshift</code> </li><li><code>rshift</code> </li><li><code>or</code> </li><li><code>xor</code> </li></ul><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul><li><p><code>close(expr)</code> 关闭管道文件</p><p>  请看下面这段代码</p><pre><code>$ awk &apos;BEGIN {   cmd = &quot;tr [a-z] [A-Z]&quot;   print &quot;hello, world !!!&quot; |&amp; cmd   close(cmd, &quot;to&quot;)   cmd |&amp; getline out   print out;   close(cmd);}&apos;HELLO, WORLD !!!</code></pre><p>  是不是感觉很难懂？让我来解释一下</p><ul><li>第一个语句<code>cmd = &quot;tr [a-z] [A-Z]&quot;</code>是我们在AWK中要用来建立双向连接的命令。</li><li>第二个语句<code>print</code>提供了<code>tr</code>命令的输入，使用 <strong>&amp;|</strong> 表名建立双向连接。</li><li>第三个语句<code>close(cmd, &quot;to&quot;)</code>用于执行完成后关闭<strong>to</strong>进程</li><li>第四个语句<code>cmd |&amp; getline out</code>使用<code>getline</code>函数存储输出到<strong>out</strong>变量</li><li>接下来打印变量out的内容，然后关闭cmd</li></ul></li></ul><ul><li><code>delete</code>  用于删除数组元素</li><li><code>exit</code>  退出脚本执行，并返回状态码参数</li><li><code>fflush</code>  </li><li><p><code>getline</code> 该命令让awk读取下一行内容</p><p>  该命令让awk读取下一行内容，比如</p><pre><code>$ awk &apos;{getline; print $0}&apos; marks.txt2) Rahul   Maths     904) Kedar   English   855) Hari    History   89</code></pre><p>  使用<code>getline var &lt; file</code>可以从file中读取输入，存储到变量var中</p><pre><code>{     if (NF == 2 &amp;&amp; $1 == &quot;@include&quot;) {          while ((getline line &lt; $2) &gt; 0)               print line          # 这里的close确保如果文件中两个@include，可以让其读取两次          close($2)     } else          print}</code></pre><p>  命令的输出也可以通过管道输入到<code>getline</code>，使用<code>command | getline</code>这种方式。在这种情况下，字符串命令会作为shell命令执行，其标准输出会通过管道传递个awk作为其输入，这种形式的getline会从管道中一次读取一条记录。例如下面的命令会从输入中逐行读取，如果遇到<code>@execute</code>，则将该行作为命令执行，将命令的输出作为最终的输出内容</p><pre><code>{     if ($1 == &quot;@execute&quot;) {          tmp = substr($0, 10)        # Remove &quot;@execute&quot;          while ((tmp | getline) &gt; 0)               # 这里实际上设置了$0为这一行的内容               print          close(tmp)     } else          print}</code></pre><p>  如果文件包含以下内容</p><pre><code>foobarbaz@execute whobletch</code></pre><p>  则会输出</p><pre><code>foobarbazarnold     ttyv0   Jul 13 14:22miriam     ttyp0   Jul 13 14:23     (murphy:0)bill       ttyp1   Jul 13 14:23     (murphy:0)bletch</code></pre><p>  使用<code>command | getline var</code>可以实现将命令的输出写入到变量var。</p><pre><code>BEGIN {     &quot;date&quot; | getline current_time     close(&quot;date&quot;)     print &quot;Report printed on &quot; current_time}</code></pre><p>  <code>getline</code>使用管道读取输入是一种单向的操作，在某些场景下，你可能希望发送数据到另一个进程，然后从这个进程中读取处理后的结果，  这就用到了协同进程，我们可以使用<code>|&amp;</code>打开一个双向管道。</p><pre><code>print &quot;some query&quot; |&amp; &quot;db_server&quot;&quot;db_server&quot; |&amp; getline</code></pre><p>  同样，我们也可以使用<code>command |&amp; getline var</code>将协同进程的输出写入到变量var。</p></li><li><p><code>next</code> </p></li><li><code>nextfile</code> </li><li><p><code>return</code> </p><p>  用于用户自定义函数的返回值。<br>  首先，创建一个<strong>functions.awk</strong>文件，包含下面的awk命令</p><pre><code>function addition(num1, num2) {   result = num1 + num2   return result}BEGIN {   res = addition(10, 20)   print &quot;10 + 20 = &quot; res}</code></pre><p>  执行上述代码，输出</p><pre><code>10 + 20 = 30</code></pre></li><li><p><code>system</code> </p><p>  该函数用于执行指定的命令并且返回它的退出状态，返回状态码0表示命令成功执行。</p><pre><code>$ awk &apos;BEGIN { ret = system(&quot;date&quot;); print &quot;Return value = &quot; ret }&apos;2016年 10月 27日 星期四 22:08:36 CSTReturn value = 0</code></pre></li></ul><h3 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h3><p>函数是程序基本的组成部分，AWK允许我们自己创建自定义的函数。一个大型的程序可以被划分为多个函数，每个函数之间可以独立的开发和测试，提供可重用的代码。</p><p>下面是用户自定义函数的基本语法</p><pre><code>function function_name(argument1, argument2, ...) {    function body}</code></pre><p>例如，我们创建一个名为functions.awk的文件，包含下面的代码</p><pre><code># Returns minimum numberfunction find_min(num1, num2){   if (num1 &lt; num2)   return num1   return num2}# Returns maximum numberfunction find_max(num1, num2){   if (num1 &gt; num2)   return num1   return num2}# Main functionfunction main(num1, num2){   # Find minimum number   result = find_min(10, 20)   print &quot;Minimum =&quot;, result   # Find maximum number   result = find_max(10, 20)   print &quot;Maximum =&quot;, result}# Script execution starts hereBEGIN {   main(10, 20)}</code></pre><p>执行上述代码，会得到下面的输出</p><pre><code>Minimum = 10Maximum = 20</code></pre><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><h3 id="重定向操作符"><a href="#重定向操作符" class="headerlink" title="重定向操作符"></a>重定向操作符</h3><p>到目前为止，我们所有的程序都是直接显示数据到了标准输出流，其实，我们也可以将输出重定向到文件。重定向操作符跟在<code>print</code>和<code>printf</code>函数的后面，与shell中的用法基本一致。</p><pre><code>print DATA &gt; output-fileprint DATA &gt;&gt; output-file</code></pre><p>例如，下面两条命令输出是一致的</p><pre><code>$ echo &quot;Hello, World !!!&quot; &gt; /tmp/message.txt$ awk &apos;BEGIN { print &quot;Hello, World !!!&quot; &gt; &quot;/tmp/message.txt&quot; }&apos;</code></pre><blockquote><p>与shell中一样，<code>&gt;</code>用于将输出写入到指定的文件中，如果文件中有内容则覆盖，而<code>&gt;&gt;</code>则为追加模式写入。</p></blockquote><pre><code>$ awk &apos;BEGIN { print &quot;Hello, World !!!&quot; &gt;&gt; &quot;/tmp/message.txt&quot; }&apos;$ cat /tmp/message.txt</code></pre><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>除了将输出重定向到文件之外，我们还可以将输出重定向到其它程序，与shell中一样，我们可以使用管道操作符<code>|</code>。</p><pre><code>$ awk &apos;BEGIN { print &quot;hello, world !!!&quot; | &quot;tr [a-z] [A-Z]&quot; }&apos;HELLO, WORLD !!!</code></pre><p>AWK中可以使用<code>|&amp;</code>进行<strong>双向连接</strong>，那么什么是双向连接呢？一种常见的场景是我们发送数据到另一个程序处理，然后读取处理结果，这种场景下就需要打开一个到另外一个进程的双向管道了。第二个进程会与<strong>gawk</strong>程序并行执行，这里称其为 <strong>协作进程</strong>。与单向连接使用<code>|</code>操作符不同的是，双向连接使用<code>|&amp;</code>操作符。</p><pre><code>do {    print data |&amp; &quot;subprogram&quot;    &quot;subprogram&quot; |&amp; getline results} while (data left to process)close(&quot;subprogram&quot;)</code></pre><p>第一次I/O操作使用了<code>|&amp;</code>操作符，gawk会创建一个到运行其它程序的子进程的双向管道，<code>print</code>的输出被写入到了<code>subprogram</code>的标准输入，而这个<code>subprogram</code>的标准输出在gawk中使用<code>getline</code>函数进行读取。</p><blockquote><p>注意：目前协同进程的标准错误输出将会和gawk的标准错误输出混杂在一起，无法单独获取标准错误输出。另外，I/O缓冲可能存在问题，gawk程序会自动的刷新所有输出到下游的协同进程的管道。但是，如果协同进程没有刷新其标准输出的话，gawk将可能会在使用<code>getline</code>函数从协同进程读取输出的时候挂起，这就可能引起死锁。</p></blockquote><p>我们可以使用<code>close</code>函数关闭双向管道的<strong>to</strong>或者<strong>from</strong>一端，这两个字符串值告诉gawk发送数据到协同进程完成时或者从协同进程读取完毕时关闭管道。在使用系统命令<code>sort</code>的时候是这样做是非常必要的，因为它必须等所有输出都读取完毕时才能进行排序。</p><pre><code>BEGIN {    command = &quot;LC_ALL=C sort&quot;    n = split(&quot;abcdefghijklmnopqrstuvwxyz&quot;, a, &quot;&quot;)    for (i = n; i &gt; 0; i--)        print a[i] |&amp; command    close(command, &quot;to&quot;)    while ((command |&amp; getline line) &gt; 0)        print &quot;got&quot;, line    close(command)}</code></pre><p>例如，下面的例子中使用<code>tr</code>命令转换小写为大写。我们的<strong>command.awk</strong>文件包含以下内容</p><pre><code>BEGIN {   cmd = &quot;tr [a-z] [A-Z]&quot;   print &quot;hello, world !!!&quot; |&amp; cmd   close(cmd, &quot;to&quot;)   cmd |&amp; getline out   print out;   close(cmd);}</code></pre><p>输出 </p><pre><code>HELLO, WORLD !!!</code></pre><p>上例看起来有些复杂，我们逐行分析一下</p><ul><li>首先，第一行 <strong>cmd = “tr [a-z] [A-Z]”</strong> 是在AWK中要建立双向连接的命令</li><li>第二行的<strong>print</strong>命令用于为<strong>tr</strong>命令提供输入，而 <code>|&amp;</code> 用于指出要建立双向连接</li><li>第三行用于在上面的语句<strong>close(cmd, “to”),</strong>在执行完成后关闭其<strong>to</strong>进程</li><li>第四行 <strong>cmd |&amp; getline out</strong>使用getline函数存储输出到变量out中</li><li>最后一行使用<strong>close</strong>函数关闭命令</li></ul><h2 id="美化输出"><a href="#美化输出" class="headerlink" title="美化输出"></a>美化输出</h2><p>到目前为止，我们已经使用过<code>print</code>和<code>printf</code>函数显示数据到标准输出，但是<code>printf</code>函数实际上要比我们之前使用的情况更加强大得多。该函数是从C语言中借鉴来的，在处理格式化的输出时非常有用。</p><pre><code>$ awk &apos;BEGIN { printf &quot;Hello\nWorld\n&quot; }&apos;HelloWorld$ awk &apos;BEGIN { printf &quot;ASCII value 65 = character %c\n&quot;, 65 }&apos;ASCII value 65 = character A</code></pre><blockquote><p>格式化输出标识有 <code>%c</code>， <code>%d</code>，<code>%s</code> 等，基本与C语言一致，这里就不多赘述了。</p></blockquote><h2 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h2><p>在AWK中执行shell命令有两种方式</p><ul><li>使用<code>system</code>函数</li><li>使用管道</li></ul><h3 id="使用system函数"><a href="#使用system函数" class="headerlink" title="使用system函数"></a>使用system函数</h3><p><strong>system</strong>函数用于执行操作系统命令并且返回命令的退出码到awk。</p><pre><code>END {     system(&quot;date | mail -s &apos;awk run done&apos; root&quot;)}</code></pre><h3 id="使用管道"><a href="#使用管道" class="headerlink" title="使用管道"></a>使用管道</h3><p>如果要执行的命令很多，可以将输出的命令直接用管道传递给<strong>“/bin/sh”</strong>执行</p><pre><code>while (more stuff to do)    print command | &quot;/bin/sh&quot;close(&quot;/bin/sh&quot;)</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.tutorialspoint.com/awk/index.htm" target="_blank" rel="noopener">AWK Tutorial</a></li><li><a href="https://www.gnu.org/software/gawk/manual/gawk.html" target="_blank" rel="noopener">The GNU Awk User’s Guide</a></li></ul><p>本文将会持续修正和更新，最新内容请参考我的 <a href="https://github.com/mylxsw" target="_blank" rel="noopener">GITHUB</a> 上的 <a href="https://github.com/mylxsw/growing-up" target="_blank" rel="noopener">程序猿成长计划</a> 项目，欢迎 Star。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mylxsw/growing-up/blob/master/doc/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%
      
    
    </summary>
    
      <category term="Repost" scheme="http://blog.duanxu.tech/categories/Repost/"/>
    
    
      <category term="Linux" scheme="http://blog.duanxu.tech/tags/Linux/"/>
    
      <category term="Awk" scheme="http://blog.duanxu.tech/tags/Awk/"/>
    
  </entry>
  
  <entry>
    <title>[转]Java中的反射总结</title>
    <link href="http://blog.duanxu.tech/2016/12/20/2016/2016-12-20-%E8%BD%AC-Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.duanxu.tech/2016/12/20/2016/2016-12-20-转-Java中的反射总结/</id>
    <published>2016-12-20T03:48:30.000Z</published>
    <updated>2018-12-07T12:36:39.768Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p><a href="http://www.cnblogs.com/nerxious/archive/2012/12/24/2829446.html" target="_blank" rel="noopener">原文链接：Java中的反射总结</a></p><p>刚开始学习java的时候真的很难理解反射到底是个什么东西</p><p>一些书籍，哪怕是很经典的书籍都解释的让人感觉懵懵的，或许的确是我太笨</p><p>况且，网上说在将来学习框架的时候需要经常应用到反射机制，这样一来总让人心里有些不安</p><p>就方才偶然又把讲解反射的章节和视频看了一点，觉得能理解一些了</p><p>现在决定一鼓作气，边看边写，顺便把一些主要的内容和操作都记载到这里</p><p>我想，对于我这么一个笨笨的人来说，学习的最好方法也许就是不断重复</p><p>遇到不懂的知识就停下来把以往的重新学一遍，虽然浪费了很多时间，但对我也有些效果</p><p>我的理解是：所谓反射，就是根据一个已经实例化了的对象来还原类的完整信息</p><p>至少对我而言，我认为它带给我的好处是，让我从下往上的又了解了一遍面向对象</p><p>x_x 在此又痛恨一边那些厚部头们，把我的脑细胞搞死一片</p><h3 id="1-Class类"><a href="#1-Class类" class="headerlink" title="1 Class类"></a>1 Class类</h3><p>如果要完成反射，那么必须了解Class类</p><p><strong>实例1：通过对象取得包名和类名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.siu;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        System.out.println(t.getClass());</span><br><span class="line">        System.out.println(t.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译结果如下，注意包的编译方式即可</p><p>此处的getClass()方法是默认继承自Object类的</p><blockquote><p>class cn.com.duanxu.Test<br>cn.com.duanxu.Test</p></blockquote><p>在java中，Object类是所有类的父类，同样，所有类的实例化对象也都是Class类的实例</p><p>因此，这样一来就会牵扯到向上转型和向下转型的概念</p><p>由于向下转型的不安全因素，在这里泛型也会接踵而来</p><p>（不过我想说的是，此处的泛型设计很刺眼！尼玛，整个java的语法设计同样刺眼，超恶心！！！）</p><p><strong>实例2：Class类的实例化</strong></p><p>由于Class类没有构造方法，所以实例化Class类的方式有点特殊，有三种方式：</p><ul><li>对象.getClass( )</li><li>类.Class</li><li>forName( )</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        Class&lt;? extends Test&gt; c1 = t.getClass();</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        <span class="comment">//为了避免特殊性，这里不用Test类，而用java库中的String类</span></span><br><span class="line">        Class&lt;String&gt; c2 = String.class;</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方式三：</span></span><br><span class="line">        <span class="comment">//forName()方法会抛出异常</span></span><br><span class="line">        Class&lt;?&gt; c3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c3 = Class.forName(<span class="string">"cn.com.duanxu.Test"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 其中，forName( )方法需要重点掌握，因为它可以在类不确定的情况下实例化Class，更具灵活性</p><blockquote><p>class cn.com.duanxu.Test<br>class java.lang.String<br>class cn.com.duanxu.Test  </p></blockquote><h3 id="2-Class类的应用"><a href="#2-Class类的应用" class="headerlink" title="2 Class类的应用"></a>2 Class类的应用</h3><p>Class类中有一个方法叫做newInstance( ),它可以用来创建一个Class类对象的新实例</p><p>怎么说呢？Class对象包含的内容就是反射好的那个类，我们要构造那个类的新实例（新对象）</p><p><strong>实例3：Class类的无参构造对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实例化Class对象，forName()方法会抛异常</span></span><br><span class="line">        Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这里需要完整的包名和类名</span></span><br><span class="line">            c = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//生成一个字符串的引用</span></span><br><span class="line">        String s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将构造好的对象向下转型为String类</span></span><br><span class="line">            <span class="comment">//newInstance()方法会抛异常</span></span><br><span class="line">            s = (String) c.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"字符串长度： "</span> + s.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就通过无参数的形式构造了一个新的对象，如同正常模式中</p><p>通过无参构造方法来构造新对象一样</p><blockquote><p>字符串长度： 0</p></blockquote><p>我们知道，类中除了有无参构造方法，还会存在有参数的构造方法</p><p>那在反射中如何通过有参数的形式构造对象呢？接着看</p><p><strong>实例4：Class类的有参构造对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//下面的几个方法抛出来的异常太多，为了代码的紧凑性，这里就直接抛给虚拟机了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] ch = &#123;<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;</span><br><span class="line">        String s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//获得Class类对象的有参构造方法，括号里面参数的写法是：类型.class</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor(<span class="keyword">char</span>[].class);</span><br><span class="line">        <span class="comment">//用此构造方法构造一个新的字符串对象，参数为一个char数组</span></span><br><span class="line">        s = (String) con.newInstance(ch);</span><br><span class="line">        System.out.println(<span class="string">"构造的字符串："</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还是使用String类做例，因为String类用的比较多，便于理解</p><p>这里需要注意的是，构造方法需要使用getConstructor( )方法获得</p><p>至于参数类型则是：原有类型.class</p><blockquote><p>构造的字符串：hello</p></blockquote><p>还有一点，无论是有参还是无参，这里所使用的构造方法，原本的类里面必须对应存在</p><p>那么，如何才能知道原有类里面的构造方法，普通方法，继承的父类等详细信息呢？接着看</p><h3 id="3-获取类的结构"><a href="#3-获取类的结构" class="headerlink" title="3 获取类的结构"></a>3 获取类的结构</h3><p>要通过反射获取类的结构我们这里要导入一个新的包java.lang.reflect</p><p><strong>实例5：取得类的构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//下面的几个方法抛出来的异常太多，为了代码的紧凑性，这里就直接抛给虚拟机了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">"java.lang.Boolean"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里的getConstructors()方法返回的是一个Constructor数组</span></span><br><span class="line">        Constructor&lt;?&gt;[] cons = c.getConstructors();</span><br><span class="line">        <span class="comment">//打印的方式你可以自己写，为了方便我用Arrays.toString()，凑合着看</span></span><br><span class="line">        System.out.println(Arrays.toString(cons));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我选择了Boolean类来做例，因为Boolean类的构造方法就两个，方便看</p><blockquote><p>[public java.lang.Boolean(boolean), public java.lang.Boolean(java.lang.String)]</p></blockquote><p><strong>实例6：取得类所实现的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">"java.lang.Boolean"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt;[] in = c.getInterfaces();</span><br><span class="line">        System.out.println(Arrays.toString(in));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 没什么好说的，看结果</p><blockquote><p>[interface java.io.Serializable, interface java.lang.Comparable]</p></blockquote><p><strong>实例7：取得父类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">"java.lang.Boolean"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注意了，这里不会是数组，why？</span></span><br><span class="line">        Class&lt;?&gt; su = c.getSuperclass();</span><br><span class="line">        System.out.println(su);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 别忘了，java中是单继承，父类只有一个</p><blockquote><p>class java.lang.Object</p></blockquote><p><strong>实例8：取得类的全部方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">"java.lang.Boolean"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Method[] m = c.getMethods();</span><br><span class="line">        <span class="comment">//好吧，这次我就大发慈悲的写个打印列表出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m.length; i++) &#123;</span><br><span class="line">            System.out.println(m[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>截取一部分，看看，意思下就行了……这几个例子都比较简单</p><blockquote><p>public boolean java.lang.Boolean.equals(java.lang.Object)<br>public java.lang.String java.lang.Boolean.toString()<br>public static java.lang.String java.lang.Boolean.toString(boolean)<br>public static int java.lang.Boolean.hashCode(boolean)<br>public int java.lang.Boolean.hashCode()<br>public int java.lang.Boolean.compareTo(java.lang.Boolean)<br>public int java.lang.Boolean.compareTo(java.lang.Object)<br>public static boolean java.lang.Boolean.getBoolean(java.lang.String)<br>public boolean java.lang.Boolean.booleanValue()<br>public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)<br>public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)<br>public static int java.lang.Boolean.compare(boolean,boolean)<br>public static boolean java.lang.Boolean.parseBoolean(java.lang.String)<br>public static boolean java.lang.Boolean.logicalAnd(boolean,boolean)<br>public static boolean java.lang.Boolean.logicalOr(boolean,boolean)<br>public static boolean java.lang.Boolean.logicalXor(boolean,boolean)<br>public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException<br>public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException<br>public final void java.lang.Object.wait() throws java.lang.InterruptedException<br>public final native java.lang.Class java.lang.Object.getClass()<br>public final native void java.lang.Object.notify()<br>public final native void java.lang.Object.notifyAll()  </p></blockquote><p><strong>实例9：取得本类的全部属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">"Person"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] f = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; f.length; i++) &#123;</span><br><span class="line">            System.out.println(f[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getDeclaredFielsd()方法可以获取全部属性，getFields()只能获取公共属性</p><blockquote><p>private java.lang.String Person.name<br>private int Person.age</p></blockquote><p><strong>实例10：获取本类中属性的值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">12</span>);</span><br><span class="line"> </span><br><span class="line">        Class&lt;?&gt; c = p.getClass();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//获取公共属性的值</span></span><br><span class="line">        Field f1 = c.getField(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">//get(p)表明要获取是哪个对象的值</span></span><br><span class="line">        String str = (String) f1.get(p);</span><br><span class="line">        System.out.println(<span class="string">"姓名： "</span> + str);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//获取私有属性的值</span></span><br><span class="line">        Field f2 = c.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">        <span class="comment">//age是私有属性，所以要设置安全检查为true</span></span><br><span class="line">        f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">int</span> age = (<span class="keyword">int</span>) f2.get(p);</span><br><span class="line">        System.out.println(<span class="string">"年龄： "</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 要注意的是：setAccessible()方法可以设置是否访问和修改私有属性</p><blockquote><p>姓名： zhangsan<br>年龄： 12  </p></blockquote><p>坦白说，java学到现在我还没发现什么能亮瞎我钛金眼的知识在里边</p><p>每次都是写一堆繁琐的语法实现个小玩意儿，不然就是拼命调用API，拼命的抛异常</p><p>让本身显得不够紧凑的代码变得愈发累赘</p><p>如果我喜欢一门语言，在我利用它做出东西来之前，它本身的特性必须能够打动我</p><p>显然，java并不让我快乐，也许很多程序员跟我一样是被迫使用java的</p><p>仅以此来安抚我那颗孤独编码的心，下面接着看内容</p><h3 id="4-反射的应用"><a href="#4-反射的应用" class="headerlink" title="4 反射的应用"></a>4 反射的应用</h3><p><strong>实例11：通过反射修改属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名： "</span> + <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"王二狗"</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        Class&lt;?&gt; c = p.getClass();</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//定义要修改的属性</span></span><br><span class="line">        Field f = c.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//修改属性，传入要设置的对象和值</span></span><br><span class="line">        f.set(p, <span class="string">"张二蛋"</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 几个方法都是有联系的，如果看不懂就先熟悉上面几个例子</p><blockquote><p>姓名： 王二狗<br>姓名： 张二蛋  </p></blockquote><p><strong>实例12：通过反射调用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我在写数字： "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我在说： "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Class&lt;?&gt; c = p.getClass();</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//getMethod()方法需要传入方法名，和参数类型</span></span><br><span class="line">        Method m1 = c.getMethod(<span class="string">"print"</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        <span class="comment">//invoke()表示调用的意思，需要传入对象和参数</span></span><br><span class="line">        m1.invoke(p, <span class="number">10</span>);</span><br><span class="line">         </span><br><span class="line">        Method m2 = c.getMethod(<span class="string">"say"</span>, String.class);</span><br><span class="line">        <span class="comment">//这里的null表示不由对象调用，也就是静态方法</span></span><br><span class="line">        m2.invoke(<span class="keyword">null</span>, <span class="string">"你妹"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里演示了一个普通的有参方法和一个静态方法</p><blockquote><p>我在写数字： 10<br>我在说： 你妹  </p></blockquote><p>既然有参数的都写出来了，那么无参的就更简单了，直接传入一个对象即可</p><p><strong>实例13：通过反射操作数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        Class&lt;?&gt; c = arr.getClass().getComponentType();</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"数组类型： "</span> + c.getName());</span><br><span class="line">        <span class="keyword">int</span> len = Array.getLength(arr);</span><br><span class="line">        System.out.println(<span class="string">"数组长度： "</span> + len);</span><br><span class="line">        System.out.print(<span class="string">"遍历数组： "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            System.out.print(Array.get(arr, i) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//修改数组</span></span><br><span class="line">        System.out.println(<span class="string">"修改前的第一个元素： "</span> + Array.get(arr, <span class="number">0</span>));</span><br><span class="line">        Array.set(arr, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"修改后的第一个元素： "</span> + Array.get(arr, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里要注意一点，getComponentType( )返回的是数组元素的Class</p><blockquote><p>数组类型： int<br>数组长度： 5<br>遍历数组： 1 2 3 4 5<br>修改前的第一个元素： 1<br>修改后的第一个元素： 3  </p></blockquote><p>暂时就写这么多，我看的书中还有反射在工厂模式中的应用</p><p>无非是用forName()方法替换一下，没什么可说的</p><p>我是个java初级黑，我恨java那种恶心的语法和设计</p><p>这都是为了Android，为了打基础，为了适应以后的工作</p><p>Fuck java……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/nerxious/archive/2012/12/24/2829446.html&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="Repost" scheme="http://blog.duanxu.tech/categories/Repost/"/>
    
    
      <category term="Java" scheme="http://blog.duanxu.tech/tags/Java/"/>
    
      <category term="Reflect" scheme="http://blog.duanxu.tech/tags/Reflect/"/>
    
  </entry>
  
  <entry>
    <title>[转]Python爬虫实战 抓取图书馆借阅信息 </title>
    <link href="http://blog.duanxu.tech/2016/12/19/2016/2016-12-19-%E8%BD%AC-Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E6%8A%93%E5%8F%96%E5%9B%BE%E4%B9%A6%E9%A6%86%E5%80%9F%E9%98%85%E4%BF%A1%E6%81%AF/"/>
    <id>http://blog.duanxu.tech/2016/12/19/2016/2016-12-19-转-Python爬虫实战-抓取图书馆借阅信息/</id>
    <published>2016-12-19T01:48:30.000Z</published>
    <updated>2018-12-07T12:36:35.359Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p><a href="http://www.cnblogs.com/KGoing/p/6150555.html" target="_blank" rel="noopener">原文链接：Python爬虫实战—抓取图书馆借阅信息</a></p><p>　　前段时间在图书馆借了很多书，借得多了就容易忘记每本书的应还日期，老是担心自己会违约，影响日后借书，而自己又懒得总是登录到学校图书馆借阅系统查看，于是就打算写一个爬虫来抓取自己的借阅信息，把每本书的应还日期给爬下来，并写入txt文件，这样每次忘了就可以打开该txt文件查看，每次借阅信息改变了，只要再重新运行一遍该程序，原txt文件就会被新文件覆盖，里面的内容得到更新。</p><h3 id="1-用到的技术"><a href="#1-用到的技术" class="headerlink" title="1 用到的技术"></a>1 用到的技术</h3><p>　　Python版本是 2.7 ，同时用到了urllib2、cookielib、re三个模块。urllib2用于创建请求(request)，并抓取网页信息，返回一个类似于文件类型的response对象；cookielib用于储存cookie对象，以实现模拟登录功能；re模块提供对正则表达式的支持，用于对抓取到的页面信息进行匹配，以得到自己想要的信息。</p><h3 id="2-抓取一个页面"><a href="#2-抓取一个页面" class="headerlink" title="2 抓取一个页面"></a>2 抓取一个页面</h3><p>　　使用urllib2简单抓取一个网页的过程非常简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line">response = urllib2.urlopen(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">html = response.read()</span><br></pre></td></tr></table></figure><p> 　　urllib2中的urlopen()方法，看其字面意思就知道是打开一个URL(uniform resource locator)地址，上面例子传入的时百度首页的地址，遵循HTTP协议，除了http协议外，urlopen()方法还可以打开遵循ftp、file协议的地址，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = urllib2.urlopen(<span class="string">"ftp://example.com"</span>)</span><br></pre></td></tr></table></figure><p>　　除URL参数外，urlopen()方法还接受data和timeout参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = urllib2.urlopen(url ,data ,timeout)</span><br></pre></td></tr></table></figure><p>　　其中data是打开一个网页时需要传入的数据，比如打开一个登录界面时往往需要传入用户名和密码等信息，在下文登录图书馆系统时将会看到其用法；timeout是设置超时时间，即超过一定时间页面无响应即报错；在urlopen()方法中，data和timeout不是必须的，即可填可不填，注意：当页面需要有数据传入时，data是必需的。</p><p>　　可以看到，在打开一个网页时，有时往往需要传入多个参数，再加上HTTP协议是基于请求(request)和应答(response)的，即客户端发出请求(request)，服务器端返回应答(response)，所以在使用urlopen()方法时，往往是构造一个request对象作为参数传入，该request对象包括url、data、timeout、headers等信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line">request = urllib2.Request(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line">html = response.read()</span><br></pre></td></tr></table></figure><p>　　这段代码得到的结果和上面得到的结果一样，但是在逻辑上显得更明确、清晰。</p><h3 id="3-Cookie的使用"><a href="#3-Cookie的使用" class="headerlink" title="3 Cookie的使用"></a>3 Cookie的使用</h3><p>　　在访问某些网站时，该网站需要在客户端本地储存一些数据、信息(经过加密)，并在接下来的请求(request)中返回给服务器，否则服务器将拒绝该请求，这些数据即存储在本地的cookie中。例如，访问学校图书馆系统时，需进行登录，等登录完成之后，服务器端将会在本地储存一些经过加密的数据在cookie中，当客户端发送查询借阅信息的请求(request)时，会连带cookie里面的数据一起发送给服务器，服务器确定cookie信息后允许访问，否则拒绝该请求。</p><p>　　Cookielib模块提供了CookieJar类用于捕捉和储存HTTP 的cookie数据，所以要创建一个cookie只要创建一个CookieJar实例即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line">cookie = coolielib.CookieJar()</span><br></pre></td></tr></table></figure><p> 　　创建cookie了就万事大吉了吗？没那么简单，我们要完成的操作是发送登录请求、记录cookie、再发送读取借阅信息的请求并向服务器反馈cookie信息，要完成这一系列的操作，原来的urlopen()方法已不能胜任，幸运的是，urllib2模块还提供了一个OpenerDirector类，可以接受一个cookie处理器为参数，实现上述功能，而这个cookie处理器则可以通过HTTPCookieProcessor类接受一个cookie对象实例化后得到。即先通过HTTPCookieProcessor实例化得到一个cookie处理器handler，再将此处理器headler作为参数传入OpenDirector实例化得到一个能捕捉cookie数据的opener，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line"></span><br><span class="line">cookie = cookielib.CookieJar()</span><br><span class="line">handler = urllib2.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib2.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">"http://www.baidu.com"</span>)</span><br></pre></td></tr></table></figure><h3 id="4-登录图书馆系统"><a href="#4-登录图书馆系统" class="headerlink" title="4 登录图书馆系统"></a>4 登录图书馆系统</h3><p>　　至此，我们就可以进行图书馆借阅信息的抓取了。来看看<a href="http://202.118.250.131/lib/opacAction.do?method=login" target="_blank" rel="noopener">HIT图书馆登录界面</a>：</p><div style="text-align: center"><br><img src="/images/201612/2016121901.png"><br></div><p>　　首先，在Firefox浏览器下，借助httpfox插件进行网络监听，看看登录此页面需要向服务器发送哪些数据：</p><div style="text-align: center"><br><img src="/images/201612/2016121902.png"><br></div><p>　　输入登录账号和密码，打开httpfox插件，点击start开始监听，然后点击登陆按钮进行登陆：</p><div style="text-align: center"><br><img src="/images/201612/2016121903.png"><br></div><p>　　上图便是登陆之后的页面，以及整个登陆过程捕捉到的信息。选择第一条捕捉到的信息，点击下方数据头(Headers)选项卡，可以看见登录此页面需要发送的一些数据。有一些网站，对于访问它们的请求需要检查数据头(Headers)，只有数据头信息符合要求才允许访问。在登录图书馆系统时，可以先尝试不发数据头，如果能顺利访问则说明没有Headers检查这一环节。数据发送的方法为GET，即只需要将要发送的数据信息加在登陆请求的后面。在Headers选项卡的Request-Line属性中，问号前面的即为登陆请求”GET /lib/opacAction.do”，加上IP地址之后真实的请求URL为”<a href="http://202.118.250.131/lib/opacAction.do&quot;，问号后面的即为登陆需要的数据，包括账号、密码等信息。" target="_blank" rel="noopener">http://202.118.250.131/lib/opacAction.do&quot;，问号后面的即为登陆需要的数据，包括账号、密码等信息。</a></p><p>　　接下来点开QueryString选项卡，查看由GET方法传送的数据：</p><div style="text-align: center"><br><img src="/images/201612/2016121904.png"><br></div><p>　　需要传送的数据包括5项，以字典类型将其储存，经过urlencode()方法编码之后直接加在登陆URL之后即可，所以最后向服务器发送的请求(request)为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"> </span><br><span class="line">loginURL = <span class="string">'http://202.118.250.131/lib/opacAction.do'</span></span><br><span class="line">queryString = urllib.urlencode(&#123;</span><br><span class="line">            <span class="string">'method'</span>:<span class="string">'DoAjax'</span>,</span><br><span class="line">            <span class="string">'dispatch'</span>:<span class="string">'login'</span>,</span><br><span class="line">            <span class="string">'registerName'</span>:<span class="string">''</span>,</span><br><span class="line">            <span class="string">'rcardNo'</span>:<span class="string">'16S137028 0'</span>,</span><br><span class="line">            <span class="string">'pwd'</span>:<span class="string">'******'</span></span><br><span class="line">        &#125;)</span><br><span class="line">requestURL = self.loginURL + <span class="string">'?'</span> + self.queryString</span><br></pre></td></tr></table></figure><p>　　得到请求URL之后就可以模拟登陆图书馆系统了，在模拟登陆的过程中需要用到前面讲到的cookie，否则无法进行后续的访问。在编代码过程中，定义一个library类，使访问过程变成一个面向对象的过程，可以根据需要实例化多个library对象，分别对多个实例进行操作。首先分析，该library类应该有一个初始化方法(<strong>init</strong>)以及一个获取页面的方法(getPage)，在打开网页是，应使用上文提到opener实例，自动捕获并储存cookie:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">library</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.loginURL=<span class="string">'http://202.118.250.131/lib/opacAction.do'</span></span><br><span class="line">        self.queryString = urllib.urlencode(&#123;</span><br><span class="line">            <span class="string">'method'</span>:<span class="string">'DoAjax'</span>,</span><br><span class="line">            <span class="string">'dispatch'</span>:<span class="string">'login'</span>,</span><br><span class="line">            <span class="string">'registerName'</span>:<span class="string">''</span>,</span><br><span class="line">            <span class="string">'rcardNo'</span>:<span class="string">'16S137028 0'</span>,</span><br><span class="line">            <span class="string">'pwd'</span>:<span class="string">'114477yan'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        self.requestURL = self.loginURL + <span class="string">'?'</span> + self.queryString</span><br><span class="line">        self.cookies=cookielib.CookieJar()</span><br><span class="line">        self.handler=urllib2.HTTPCookieProcessor(self.cookies)</span><br><span class="line">        self.opener=urllib2.build_opener(self.handler)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(self)</span>:</span></span><br><span class="line">        request1 = urllib2.Request(self.requestURL)</span><br><span class="line">        request2 = urllib2.Request(<span class="string">' http://202.118.250.131/lib/opacAction.do?method=init&amp;seq=301 '</span>)</span><br><span class="line">        result = self.opener.open(request1)</span><br><span class="line">        result = self.opener.open(request2)</span><br><span class="line">        <span class="keyword">return</span> result.read()</span><br><span class="line"></span><br><span class="line">lib = library()</span><br><span class="line"><span class="keyword">print</span> lib.getPage()</span><br></pre></td></tr></table></figure><p>　　上述代码中，先是进行登录<code>result = self.opener.open(request1)</code> ,登录没有异常，说明登录过程不用检查数据头；然后再用此<code>self.opener</code>打开借阅查询页面<br><code>http://202.118.250.131/lib/opacAction.do?method=init&amp;seq=301</code>，所以这段代码将打印借阅查询界面的HTML代码，下图是部分打印结果：</p><div style="text-align: center"><br><img src="/images/201612/2016121905.png"><br></div><h3 id="5-获取借阅信息"><a href="#5-获取借阅信息" class="headerlink" title="5 获取借阅信息"></a>5 获取借阅信息</h3><p>　　抓取了页面信息之后，接下来就是根据自己的需要匹配、储存信息了。在匹配页面信息时，这里用的是正则表达式的方式进行匹配，正则表达式的支持由Python的Re模块提供支持，关于如何使用正则表达式，可以参考这里：Python正则表达式指南</p><p>　　使用Re模块进行匹配时，往往先将正则表达式字符串编译(compile)成一个Pattern实例，再利用Re模块中的re.findall(pattern , string)，将字符串string中和正则表达式匹配的数据以列表的形式返回。如果在pattern中有超过一个组(group)，则返回的结果将是一个元组列表，如此正则表达式：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table.*?id="tb.*?width="50%"&gt;&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;tr&gt;.*?&lt;tr&gt;.*?&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;/TABLE&gt;</span><br></pre></td></tr></table></figure></p><p>式中，每一个<code>(.*?)</code>代表一个组，即此式中有3个组，则匹配时，返回一个元组列表，其中每一个元组又有3个数据。</p><p>　　在library类中，定义一个获取信息的方法(getInformation)，以通过正则表达式匹配的方式获取所需数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInformation</span><span class="params">(self)</span>:</span></span><br><span class="line">        page = self.getPage()</span><br><span class="line">        pattern = re.compile(<span class="string">'&lt;table.*?id="tb.*?width="50%"&gt;&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;tr&gt;.*?&lt;tr&gt;.*?'</span>+</span><br><span class="line">                        <span class="string">'&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;/TABLE&gt;'</span>,re.S)</span><br><span class="line">        items = re.findall(pattern,page)</span><br></pre></td></tr></table></figure><p>　　获取所需数据之后，接下来就是将数据写入文本文件(txt)储存，以读写模式(W+)打开一个文件(library.txt)，然后通过write()方法将数据一条一条的写入文件。不过，在信息写入之前，需要对抓取到的信息做一些小处理，刚才说过了，findall()方法返回的是一个元组列表，即<code>[[a,b,c],[d,e,f],[g,h,i]]</code>的形式，write()方法是不能对元组进行操作的，所以需要手动将元组翻译成一条条字符串，再保存到一个列表里，通过遍历将每条字符串写入文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInformation</span><span class="params">(self)</span>:</span></span><br><span class="line">        page = self.getPage()</span><br><span class="line">        pattern = re.compile(<span class="string">'&lt;table.*?id="tb.*?width="50%"&gt;&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;tr&gt;.*?&lt;tr&gt;.*?'</span>+</span><br><span class="line">                        <span class="string">'&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;/TABLE&gt;'</span>,re.S)</span><br><span class="line">        items = re.findall(pattern,page)</span><br><span class="line"></span><br><span class="line">        contents = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            content = item[<span class="number">0</span>]+<span class="string">'    from   '</span>+item[<span class="number">1</span>]+<span class="string">'   to   '</span>+item[<span class="number">2</span>]+<span class="string">'\n'</span></span><br><span class="line">            contents.append(content)</span><br><span class="line">        self.writeData(contents)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeData</span><span class="params">(self,contents)</span>:</span></span><br><span class="line">        file = open(<span class="string">'libraryBooks.txt'</span>,<span class="string">'w+'</span>)</span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> contents:</span><br><span class="line">            file.write(content)</span><br><span class="line">        file.close()</span><br></pre></td></tr></table></figure><p>　　至此，整个爬虫就算完成了，下面贴上完整代码：</p><h3 id="6-大功告成"><a href="#6-大功告成" class="headerlink" title="6 大功告成"></a>6 大功告成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">__author__=<span class="string">'Victor'</span></span><br><span class="line"><span class="comment">#_*_ coding:'utf-8' _*_</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">library</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.loginURL=<span class="string">'http://202.118.250.131/lib/opacAction.do'</span></span><br><span class="line">        self.queryString = urllib.urlencode(&#123;</span><br><span class="line">            <span class="string">'method'</span>:<span class="string">'DoAjax'</span>,</span><br><span class="line">            <span class="string">'dispatch'</span>:<span class="string">'login'</span>,</span><br><span class="line">            <span class="string">'registerName'</span>:<span class="string">''</span>,</span><br><span class="line">            <span class="string">'rcardNo'</span>:<span class="string">'16S137028 0'</span>,</span><br><span class="line">            <span class="string">'pwd'</span>:<span class="string">'******'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        self.requestURL = self.loginURL + <span class="string">'?'</span> + self.queryString</span><br><span class="line">        self.cookies=cookielib.CookieJar()</span><br><span class="line">        self.handler=urllib2.HTTPCookieProcessor(self.cookies)</span><br><span class="line">        self.opener=urllib2.build_opener(self.handler)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(self)</span>:</span></span><br><span class="line">        request1 = urllib2.Request(self.requestURL)</span><br><span class="line">        request2 = urllib2.Request(<span class="string">'http://202.118.250.131/lib/opacAction.do?method=init&amp;seq=301'</span>)</span><br><span class="line">        result = self.opener.open(request1)</span><br><span class="line">        result = self.opener.open(request2)</span><br><span class="line">        <span class="keyword">return</span> result.read()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getInformation</span><span class="params">(self)</span>:</span></span><br><span class="line">        page = self.getPage()</span><br><span class="line">        pattern = re.compile(<span class="string">'&lt;table.*?id="tb.*?width="50%"&gt;&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;tr&gt;.*?&lt;tr&gt;.*?'</span>+</span><br><span class="line">                        <span class="string">'&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;font size=2&gt;(.*?)&lt;/font&gt;.*?&lt;/TABLE&gt;'</span>,re.S)</span><br><span class="line">        items = re.findall(pattern,page)</span><br><span class="line"></span><br><span class="line">        contents = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            content = item[<span class="number">0</span>]+<span class="string">'    from   '</span>+item[<span class="number">1</span>]+<span class="string">'   to   '</span>+item[<span class="number">2</span>]+<span class="string">'\n'</span></span><br><span class="line">            contents.append(content)</span><br><span class="line">        self.writeData(contents)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeData</span><span class="params">(self,contents)</span>:</span></span><br><span class="line">        file = open(<span class="string">'libraryBooks.txt'</span>,<span class="string">'w+'</span>)</span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> contents:</span><br><span class="line">            file.write(content)</span><br><span class="line">        file.close()</span><br><span class="line"></span><br><span class="line">lib = library()</span><br><span class="line">lib.getInformation()</span><br></pre></td></tr></table></figure><p>　　下面就是抓到的借阅信息，不得不说效果不怎么样，不过还是凑合着看把：</p><div style="text-align: center"><br><img src="/images/201612/2016121906.png"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/KGoing/p/6150555.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接：Python爬虫
      
    
    </summary>
    
      <category term="Repost" scheme="http://blog.duanxu.tech/categories/Repost/"/>
    
    
      <category term="Python" scheme="http://blog.duanxu.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>[转]用更合理的方式写 JavaScript</title>
    <link href="http://blog.duanxu.tech/2016/11/23/2016/2016-11-23-%E8%BD%AC-%E7%94%A8%E6%9B%B4%E5%90%88%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F%E5%86%99%20JavaScript/"/>
    <id>http://blog.duanxu.tech/2016/11/23/2016/2016-11-23-转-用更合理的方式写 JavaScript/</id>
    <published>2016-11-23T10:49:30.000Z</published>
    <updated>2018-12-07T12:36:30.119Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h1 id="Airbnb-JavaScript-Style-Guide"><a href="#Airbnb-JavaScript-Style-Guide" class="headerlink" title="Airbnb JavaScript Style Guide() {"></a>Airbnb JavaScript Style Guide() {</h1><p><em>用更合理的方式写 JavaScript</em> <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">原文链接</a></p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li><p><strong>原始值</strong>: 存取直接作用于它自身。</p><ul><li><code>string</code></li><li><code>number</code></li><li><code>boolean</code></li><li><code>null</code></li><li><code>undefined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure></li><li><p><strong>复杂类型</strong>: 存取时作用于它自身值的引用。</p><ul><li><code>object</code></li><li><code>array</code></li><li><code>function</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul><li><p>使用直接量创建对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>不要使用<a href="http://es5.github.io/#x7.6.1" target="_blank" rel="noopener">保留字</a>作为键名，它们在 IE8 下不工作。<a href="https://github.com/airbnb/javascript/issues/61" target="_blank" rel="noopener">更多信息</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  <span class="keyword">default</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</span><br><span class="line">  private: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  defaults: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</span><br><span class="line">  hidden: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用同义词替换需要使用的保留字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  class: 'alien'</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  klass: <span class="string">'alien'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  type: <span class="string">'alien'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>使用直接量创建数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> items = [];</span><br></pre></td></tr></table></figure></li><li><p>向数组增加元素时使用 Array#push 来替代直接赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someStack = [];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">'abracadabra'</span>);</span><br></pre></td></tr></table></figure></li><li><p>当你需要拷贝数组时，使用 Array#slice。<a href="http://jsperf.com/converting-arguments-to-an-array/7" target="_blank" rel="noopener">jsPerf</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len = items.length;</span><br><span class="line"><span class="keyword">var</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">itemsCopy = items.slice();</span><br></pre></td></tr></table></figure></li><li><p>使用 Array#slice 将类数组对象转换成数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>使用单引号 <code>&#39;&#39;</code> 包裹字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob Parr"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Bob Parr'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">"Bob "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">'Bob '</span> + <span class="keyword">this</span>.lastName;</span><br></pre></td></tr></table></figure></li><li><p>超过 100 个字符的字符串应该使用连接符写成多行。</p></li><li><p>注：若过度使用，通过连接符连接的长字符串可能会影响性能。<a href="http://jsperf.com/ya-string-concat" target="_blank" rel="noopener">jsPerf</a> &amp; <a href="https://github.com/airbnb/javascript/issues/40" target="_blank" rel="noopener">讨论</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span></span><br><span class="line"><span class="string">of Batman. When you stop to think about how Batman had anything to do \</span></span><br><span class="line"><span class="string">with this, you would get nowhere \</span></span><br><span class="line"><span class="string">fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</span><br><span class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</span><br><span class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</span><br></pre></td></tr></table></figure></li><li><p>程序化生成的字符串使用 Array#join 连接而不是使用连接符。尤其是 IE 下：<a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="noopener">jsPerf</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items;</span><br><span class="line"><span class="keyword">var</span> messages;</span><br><span class="line"><span class="keyword">var</span> length;</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"></span><br><span class="line">messages = [&#123;</span><br><span class="line">  state: <span class="string">'success'</span>,</span><br><span class="line">  message: <span class="string">'This one worked.'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  state: <span class="string">'success'</span>,</span><br><span class="line">  message: <span class="string">'This one worked as well.'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  state: <span class="string">'error'</span>,</span><br><span class="line">  message: <span class="string">'This one did not work.'</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">length = messages.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</span><br><span class="line">  items = <span class="string">'&lt;ul&gt;'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    items += <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> items + <span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</span><br><span class="line">  items = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="comment">// use direct assignment in this case because we're micro-optimizing.</span></span><br><span class="line">    items[i] = <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;ul&gt;'</span> + items.join(<span class="string">''</span>) + <span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>函数表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数表达式</span></span><br><span class="line"><span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名函数表达式</span></span><br><span class="line"><span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即调用的函数表达式（IIFE）</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></li><li><p>永远不要在一个非函数代码块（if、while 等）中声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但它们的解析表现不一致。</p></li><li><p><strong>注：</strong> ECMA-262 把 <code>块</code> 定义为一组语句。函数声明不是语句。<a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="noopener">阅读对 ECMA-262 这个问题的说明</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  test = <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>永远不要把参数命名为 <code>arguments</code>。这将取代函数作用域内的 <code>arguments</code> 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span>(<span class="params">name, options, arguments</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span>(<span class="params">name, options, args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li><p>使用 <code>.</code> 来访问对象的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> isJedi = luke[<span class="string">'jedi'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> isJedi = luke.jedi;</span><br></pre></td></tr></table></figure></li><li><p>当通过变量访问属性时使用中括号 <code>[]</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> luke[prop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isJedi = getProp(<span class="string">'jedi'</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>总是使用 <code>var</code> 来声明变量。不这么做将导致产生全局变量。我们要避免污染全局命名空间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">superPower = <span class="keyword">new</span> SuperPower();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superPower = <span class="keyword">new</span> SuperPower();</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>var</code> 声明每一个变量。<br>这样做的好处是增加新变量将变的更加容易，而且你永远不用再担心调换错 <code>;</code> 跟 <code>,</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// （跟上面的代码比较一下，看看哪里错了）</span></span><br><span class="line"><span class="keyword">var</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> items = getItems();</span><br><span class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> dragonball = <span class="string">'z'</span>;</span><br></pre></td></tr></table></figure></li><li><p>最后再声明未赋值的变量。当你需要引用前面的变量赋值时这将变的很有用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> i, len, dragonball,</span><br><span class="line">    items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">var</span> items = getItems();</span><br><span class="line"><span class="keyword">var</span> dragonball;</span><br><span class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> items = getItems();</span><br><span class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> dragonball;</span><br><span class="line"><span class="keyword">var</span> length;</span><br><span class="line"><span class="keyword">var</span> i;</span><br></pre></td></tr></table></figure></li><li><p>在作用域顶部声明变量。这将帮你避免变量声明提升相关的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  test();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//..other stuff..</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = getName();</span><br><span class="line"></span><br><span class="line">  test();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//..other stuff..</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - 不必要的函数调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.setFirstName(name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  name = getName();</span><br><span class="line">  <span class="keyword">this</span>.setFirstName(name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><ul><li><p>变量声明会提升至作用域顶部，但赋值不会。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们知道这样不能正常工作（假设这里没有名为 notDefined 的全局变量）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但由于变量声明提升的原因，在一个变量引用后再创建它的变量声明将可以正常工作。</span></span><br><span class="line"><span class="comment">// 注：变量赋值为 `true` 不会提升。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释器会把变量声明提升到作用域顶部，意味着我们的例子将被重写成：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> declaredButNotAssigned;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名函数表达式会提升它们的变量名，但不会提升函数的赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'anonymous function expression'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命名函数表达式会提升变量名，但不会提升函数名或函数体。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当函数名跟变量名一样时，表现也是如此。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'named'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数声明提升它们的名字和函数体。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  superPower(); <span class="comment">// =&gt; Flying</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>了解更多信息在 <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting" target="_blank" rel="noopener">JavaScript Scoping &amp; Hoisting</a> by <a href="http://www.adequatelygood.com/" target="_blank" rel="noopener">Ben Cherry</a>.</p></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="比较运算符-amp-等号"><a href="#比较运算符-amp-等号" class="headerlink" title="比较运算符 &amp; 等号"></a>比较运算符 &amp; 等号</h2><ul><li>优先使用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code>.</li><li><p>条件表达式例如 <code>if</code> 语句通过抽象方法 <code>ToBoolean</code> 强制计算它们的表达式并且总是遵守下面的规则：</p><ul><li><strong>对象</strong> 被计算为 <strong>true</strong></li><li><strong>Undefined</strong> 被计算为 <strong>false</strong></li><li><strong>Null</strong> 被计算为 <strong>false</strong></li><li><strong>布尔值</strong> 被计算为 <strong>布尔的值</strong></li><li><strong>数字</strong> 如果是 <strong>+0、-0 或 NaN</strong> 被计算为 <strong>false</strong>，否则为 <strong>true</strong></li><li><strong>字符串</strong> 如果是空字符串 <code>&#39;&#39;</code> 被计算为 <strong>false</strong>，否则为 <strong>true</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="number">0</span>]) &#123;</span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// 一个数组就是一个对象，对象被计算为 true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用快捷方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>了解更多信息在 <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="noopener">Truth Equality and JavaScript</a> by Angus Croll.</p></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="块"><a href="#块" class="headerlink" title="块"></a>块</h2><ul><li><p>使用大括号包裹所有的多行代码块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果通过 <code>if</code> 和 <code>else</code> 使用多行代码块，把 <code>else</code> 放在 <code>if</code> 代码块关闭括号的同一行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>使用 <code>/** ... */</code> 作为多行注释。包含描述、指定所有参数和返回值的类型和值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// make() returns a new element</span></span><br><span class="line"><span class="comment">// based on the passed in tag name</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment">// @return &#123;Element&#125; element</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * make() returns a new element</span></span><br><span class="line"><span class="comment"> * based on the passed in tag name</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment"> * @return &#123;Element&#125; element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>//</code> 作为单行注释。在评论对象上面另起一行使用单行注释。在注释前插入空行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>.type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>.type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给注释增加 <code>FIXME</code> 或 <code>TODO</code> 的前缀可以帮助其他开发者快速了解这是一个需要复查的问题，或是给需要实现的功能提供一个解决方式。这将有别于常见的注释，因为它们是可操作的。使用 <code>FIXME -- need to figure this out</code> 或者 <code>TODO -- need to implement</code>。</p></li><li><p>使用 <code>// FIXME:</code> 标注问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></span><br><span class="line">  total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>// TODO:</code> 标注问题的解决方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></span><br><span class="line">  <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h2><ul><li><p>使用 2 个空格作为缩进。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙∙∙<span class="keyword">var</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">∙<span class="keyword">var</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙<span class="keyword">var</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在大括号前放一个空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>,&#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>, &#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在控制语句（<code>if</code>、<code>while</code> 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(isJedi) &#123;</span><br><span class="line">  fight ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (isJedi) &#123;</span><br><span class="line">  fight();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用空格把运算符隔开。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> x=y+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> x = y + <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>在文件末尾插入一个空行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);↵</span><br><span class="line">↵</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);↵</span><br></pre></td></tr></table></figure></li><li><p>在使用长方法链时进行缩进。使用前面的点 <code>.</code> 强调这是方法调用而不是新语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).</span><br><span class="line">  find(<span class="string">'.selected'</span>).</span><br><span class="line">    highlight().</span><br><span class="line">    end().</span><br><span class="line">  find(<span class="string">'.open'</span>).</span><br><span class="line">    updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">  .find(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end()</span><br><span class="line">  .find(<span class="string">'.open'</span>)</span><br><span class="line">    .updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">  .enter().append(<span class="string">'svg:svg'</span>)</span><br><span class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>)</span><br><span class="line">  .append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br></pre></td></tr></table></figure></li><li><p>在块末和新语句前插入空行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h2><ul><li><p>行首逗号: <strong>不需要</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> story = [</span><br><span class="line">    once</span><br><span class="line">  , upon</span><br><span class="line">  , aTime</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> story = [</span><br><span class="line">  once,</span><br><span class="line">  upon,</span><br><span class="line">  aTime</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Bob'</span></span><br><span class="line">  , <span class="attr">lastName</span>: <span class="string">'Parr'</span></span><br><span class="line">  , <span class="attr">heroName</span>: <span class="string">'Mr. Incredible'</span></span><br><span class="line">  , <span class="attr">superPower</span>: <span class="string">'strength'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Bob'</span>,</span><br><span class="line">  lastName: <span class="string">'Parr'</span>,</span><br><span class="line">  heroName: <span class="string">'Mr. Incredible'</span>,</span><br><span class="line">  superPower: <span class="string">'strength'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>额外的行末逗号：<strong>不需要</strong>。这样做会在 IE6/7 和 IE9 怪异模式下引起问题。同样，多余的逗号在某些 ES3 的实现里会增加数组的长度。在 ES5 中已经澄清了 (<a href="http://es5.github.io/#D" target="_blank" rel="noopener">source</a>)：</p><blockquote><p>Edition 5 clarifies the fact that a trailing comma at the end of an ArrayInitialiser does not add to the length of the array. This is not a semantic change from Edition 3 but some implementations may have previously misinterpreted this.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Kevin'</span>,</span><br><span class="line">  lastName: <span class="string">'Flynn'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Kevin'</span>,</span><br><span class="line">  lastName: <span class="string">'Flynn'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><ul><li><p><strong>使用分号。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span></span><br><span class="line">  <span class="keyword">return</span> name</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (防止函数在两个 IIFE 合并时被当成一个参数</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="http://stackoverflow.com/a/7365214/1712802" target="_blank" rel="noopener">了解更多</a>.</p></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>在语句开始时执行类型转换。</li><li><p>字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>parseInt</code> 转换数字时总是带上类型转换的基数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inputValue = <span class="string">'4'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = +inputValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li><li><p>如果因为某些原因 <code>parseInt</code> 成为你所做的事的瓶颈而需要使用位操作解决<a href="http://jsperf.com/coercion-vs-casting/3" target="_blank" rel="noopener">性能问题</a>时，留个注释说清楚原因和你的目的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parseInt was the reason my code was slow.</span></span><br><span class="line"><span class="comment"> * Bitshifting the String to coerce it to a</span></span><br><span class="line"><span class="comment"> * Number made it a lot faster.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>注：</strong> 小心使用位操作运算符。数字会被当成 <a href="http://es5.github.io/#x4.3.19" target="_blank" rel="noopener">64 位值</a>，但是位操作运算符总是返回 32 位的整数（<a href="http://es5.github.io/#x11.7" target="_blank" rel="noopener">source</a>）。位操作处理大于 32 位的整数值时还会导致意料之外的行为。<a href="https://github.com/airbnb/javascript/issues/109" target="_blank" rel="noopener">讨论</a>。最大的 32 位整数是 2,147,483,647：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></span><br><span class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></span><br><span class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></span><br></pre></td></tr></table></figure></li><li><p>布尔:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hasAge = <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hasAge = !!age;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul><li><p>避免单字母命名。命名应具备描述性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ..stuff..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用驼峰式命名对象、函数和实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> OBJEcttsssss = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> this_is_my_object = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> thisIsMyObject = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用帕斯卡式命名构造函数或类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bad = <span class="keyword">new</span> user(&#123;</span><br><span class="line">  name: <span class="string">'nope'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> good = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  name: <span class="string">'yup'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>不要使用下划线前/后缀。</p><blockquote><p>为什么？JavaScript 并没有私有属性或私有方法的概念。虽然使用下划线是表示「私有」的一种共识，但实际上这些属性是完全公开的，它本身就是你公共接口的一部分。这种习惯或许会导致开发者错误的认为改动它不会造成破坏或者不需要去测试。长话短说：如果你想要某处为「私有」，它必须不能是显式提出的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">this</span>.firstName = <span class="string">'Panda'</span>;</span><br></pre></td></tr></table></figure></li><li><p>不要保存 <code>this</code> 的引用。使用 Function#bind。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(that);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(_this);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给函数命名。这在做堆栈轨迹时很有帮助。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>注：</strong> IE8 及以下版本对命名函数表达式的处理有些怪异。了解更多信息到 <a href="http://kangax.github.io/nfe/" target="_blank" rel="noopener">http://kangax.github.io/nfe/</a>。</p></li><li><p>如果你的文件导出一个类，你的文件名应该与类名完全相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file contents</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in some other file</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./checkBox'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./check_box'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./CheckBox'</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2><ul><li>属性的存取函数不是必须的。</li><li><p>如果你需要存取函数时使用 <code>getVal()</code> 和 <code>setVal(&#39;hello&#39;)</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">dragon.age();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dragon.getAge();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dragon.age(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dragon.setAge(<span class="number">25</span>);</span><br></pre></td></tr></table></figure></li><li><p>如果属性是布尔值，使用 <code>isVal()</code> 或 <code>hasVal()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 get() 和 set() 函数是可以的，但要保持一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options || (options = &#123;&#125;);</span><br><span class="line">  <span class="keyword">var</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</span><br><span class="line">  <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.set = <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">key, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>[key] = val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>[key];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li><p>给对象原型分配方法，而不是使用一个新对象覆盖原型。覆盖原型将导致继承出现问题：重设原型将覆盖原有原型！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'new jedi'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype = &#123;</span><br><span class="line">  fight: <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  block: <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">Jedi.prototype.fight = <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.block = <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>方法可以返回 <code>this</code> 来实现方法链式使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump()</span><br><span class="line">  .setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure></li><li><p>写一个自定义的 <code>toString()</code> 方法是可以的，但是确保它可以正常工作且不会产生副作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options || (options = &#123;&#125;);</span><br><span class="line">  <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Jedi - '</span> + <span class="keyword">this</span>.getName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li><p>当给事件附加数据时（无论是 DOM 事件还是私有事件），传入一个哈希而不是原始值。这样可以让后面的贡献者增加更多数据到事件数据而无需找出并更新事件的每一个处理器。例如，不好的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, listingId</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更好的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span> : listing.id &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with data.listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p></li></ul><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul><li>模块应该以 <code>!</code> 开始。这样确保了当一个不好的模块忘记包含最后的分号时，在合并代码到生产环境后不会产生错误。<a href="https://github.com/airbnb/javascript/issues/44#issuecomment-13063933" target="_blank" rel="noopener">详细说明</a></li><li>文件应该以驼峰式命名，并放在同名的文件夹里，且与导出的名字一致。</li><li>增加一个名为 <code>noConflict()</code> 的方法来设置导出的模块为前一个版本并返回它。</li><li><p>永远在模块顶部声明 <code>&#39;use strict&#39;;</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fancyInput/fancyInput.js</span></span><br><span class="line"></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> previousFancyInput = global.FancyInput;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  FancyInput.noConflict = <span class="function"><span class="keyword">function</span> <span class="title">noConflict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    global.FancyInput = previousFancyInput;</span><br><span class="line">    <span class="keyword">return</span> FancyInput;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  global.FancyInput = FancyInput;</span><br><span class="line">&#125;(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><ul><li><p>使用 <code>$</code> 作为存储 jQuery 对象的变量名前缀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br></pre></td></tr></table></figure></li><li><p>缓存 jQuery 查询。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line">  $sidebar.hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $sidebar.css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对 DOM 查询使用层叠 <code>$(&#39;.sidebar ul&#39;)</code> 或 父元素 &gt; 子元素 <code>$(&#39;.sidebar &gt; ul&#39;)</code>。 <a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="noopener">jsPerf</a></p></li><li><p>对有作用域的 jQuery 对象查询使用 <code>find</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'ul'</span>, <span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$sidebar.find(<span class="string">'ul'</span>).hide();</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="ECMAScript-5-兼容性"><a href="#ECMAScript-5-兼容性" class="headerlink" title="ECMAScript 5 兼容性"></a>ECMAScript 5 兼容性</h2><ul><li>参考 <a href="https://twitter.com/kangax/" target="_blank" rel="noopener">Kangax</a> 的 ES5 <a href="http://kangax.github.com/es5-compat-table/" target="_blank" rel="noopener">兼容表</a>.</li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li><p><strong>Yup.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ul><li><a href="http://kellegous.com/j/2013/01/26/layout-performance/" target="_blank" rel="noopener">On Layout &amp; Web Performance</a></li><li><a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="noopener">String vs Array Concat</a></li><li><a href="http://jsperf.com/try-catch-in-loop-cost" target="_blank" rel="noopener">Try/Catch Cost In a Loop</a></li><li><a href="http://jsperf.com/bang-function" target="_blank" rel="noopener">Bang Function</a></li><li><a href="http://jsperf.com/jquery-find-vs-context-sel/13" target="_blank" rel="noopener">jQuery Find vs Context, Selector</a></li><li><a href="http://jsperf.com/innerhtml-vs-textcontent-for-script-text" target="_blank" rel="noopener">innerHTML vs textContent for script text</a></li><li><a href="http://jsperf.com/ya-string-concat" target="_blank" rel="noopener">Long String Concatenation</a></li><li>Loading…</li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><strong>推荐阅读</strong></p><ul><li><a href="http://es5.github.com/" target="_blank" rel="noopener">Annotated ECMAScript 5.1</a></li></ul><p><strong>工具</strong></p><ul><li>Code Style Linters<ul><li><a href="http://www.jshint.com/" target="_blank" rel="noopener">JSHint</a> - <a href="https://github.com/airbnb/javascript/blob/master/linters/.jshintrc" target="_blank" rel="noopener">Airbnb Style .jshintrc</a></li><li><a href="https://github.com/jscs-dev/node-jscs" target="_blank" rel="noopener">JSCS</a> - <a href="https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json" target="_blank" rel="noopener">Airbnb Style Preset</a></li></ul></li></ul><p><strong>其它风格指南</strong></p><ul><li><a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml" target="_blank" rel="noopener">Google JavaScript Style Guide</a></li><li><a href="http://docs.jquery.com/JQuery_Core_Style_Guidelines" target="_blank" rel="noopener">jQuery Core Style Guidelines</a></li><li><a href="https://github.com/rwldrn/idiomatic.js/" target="_blank" rel="noopener">Principles of Writing Consistent, Idiomatic JavaScript</a></li><li><a href="https://github.com/feross/standard" target="_blank" rel="noopener">JavaScript Standard Style</a></li></ul><p><strong>其它风格</strong></p><ul><li><a href="https://gist.github.com/4135065" target="_blank" rel="noopener">Naming this in nested functions</a> - Christian Johansen</li><li><a href="https://github.com/airbnb/javascript/issues/52" target="_blank" rel="noopener">Conditional Callbacks</a> - Ross Allen</li><li><a href="http://sideeffect.kr/popularconvention/#javascript" target="_blank" rel="noopener">Popular JavaScript Coding Conventions on Github</a> - JeongHoon Byun</li><li><a href="http://benalman.com/news/2012/05/multiple-var-statements-javascript/" target="_blank" rel="noopener">Multiple var statements in JavaScript, not superfluous</a> - Ben Alman</li></ul><p><strong>进一步阅读</strong></p><ul><li><a href="http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/" target="_blank" rel="noopener">Understanding JavaScript Closures</a> - Angus Croll</li><li><a href="http://www.2ality.com/2013/06/basic-javascript.html" target="_blank" rel="noopener">Basic JavaScript for the impatient programmer</a> - Dr. Axel Rauschmayer</li><li><a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">You Might Not Need jQuery</a> - Zack Bloom &amp; Adam Schwartz</li><li><a href="https://github.com/lukehoban/es6features" target="_blank" rel="noopener">ES6 Features</a> - Luke Hoban</li><li><a href="https://github.com/bendc/frontend-guidelines" target="_blank" rel="noopener">Frontend Guidelines</a> - Benjamin De Cock</li></ul><p><strong>书籍</strong></p><ul><li><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742" target="_blank" rel="noopener">JavaScript: The Good Parts</a> - Douglas Crockford</li><li><a href="http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752" target="_blank" rel="noopener">JavaScript Patterns</a> - Stoyan Stefanov</li><li><a href="http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X" target="_blank" rel="noopener">Pro JavaScript Design Patterns</a>  - Ross Harmes and Dustin Diaz</li><li><a href="http://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309" target="_blank" rel="noopener">High Performance Web Sites: Essential Knowledge for Front-End Engineers</a> - Steve Souders</li><li><a href="http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680" target="_blank" rel="noopener">Maintainable JavaScript</a> - Nicholas C. Zakas</li><li><a href="http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X" target="_blank" rel="noopener">JavaScript Web Applications</a> - Alex MacCaw</li><li><a href="http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273" target="_blank" rel="noopener">Pro JavaScript Techniques</a> - John Resig</li><li><a href="http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595" target="_blank" rel="noopener">Smashing Node.js: JavaScript Everywhere</a> - Guillermo Rauch</li><li><a href="http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X" target="_blank" rel="noopener">Secrets of the JavaScript Ninja</a> - John Resig and Bear Bibeault</li><li><a href="http://humanjavascript.com/" target="_blank" rel="noopener">Human JavaScript</a> - Henrik Joreteg</li><li><a href="http://superherojs.com/" target="_blank" rel="noopener">Superhero.js</a> - Kim Joar Bekkelund, Mads Mobæk, &amp; Olav Bjorkoy</li><li><a href="http://jsbooks.revolunet.com/" target="_blank" rel="noopener">JSBooks</a> - Julien Bouquillon</li><li><a href="http://manning.com/vinegar/" target="_blank" rel="noopener">Third Party JavaScript</a> - Ben Vinegar and Anton Kovalyov</li><li><a href="http://amzn.com/0321812182" target="_blank" rel="noopener">Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript</a> - David Herman</li><li><a href="http://eloquentjavascript.net" target="_blank" rel="noopener">Eloquent JavaScript</a> - Marijn Haverbeke</li><li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="noopener">You Don’t Know JS</a> - Kyle Simpson</li></ul><p><strong>博客</strong></p><ul><li><a href="http://dailyjs.com/" target="_blank" rel="noopener">DailyJS</a></li><li><a href="http://javascriptweekly.com/" target="_blank" rel="noopener">JavaScript Weekly</a></li><li><a href="http://javascriptweblog.wordpress.com/" target="_blank" rel="noopener">JavaScript, JavaScript…</a></li><li><a href="http://weblog.bocoup.com/" target="_blank" rel="noopener">Bocoup Weblog</a></li><li><a href="http://www.adequatelygood.com/" target="_blank" rel="noopener">Adequately Good</a></li><li><a href="http://www.nczonline.net/" target="_blank" rel="noopener">NCZOnline</a></li><li><a href="http://perfectionkills.com/" target="_blank" rel="noopener">Perfection Kills</a></li><li><a href="http://benalman.com/" target="_blank" rel="noopener">Ben Alman</a></li><li><a href="http://dmitry.baranovskiy.com/" target="_blank" rel="noopener">Dmitry Baranovskiy</a></li><li><a href="http://dustindiaz.com/" target="_blank" rel="noopener">Dustin Diaz</a></li><li><a href="http://net.tutsplus.com/?s=javascript" target="_blank" rel="noopener">nettuts</a></li></ul><p><strong>播客</strong></p><ul><li><a href="http://devchat.tv/js-jabber/" target="_blank" rel="noopener">JavaScript Jabber</a></li></ul><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h2 id="谁在使用"><a href="#谁在使用" class="headerlink" title="谁在使用"></a>谁在使用</h2><p>  这是一个使用本风格指南的组织列表。给我们发 pull request 或开一个 issue 让我们将你增加到列表上。</p><ul><li><strong>Aan Zee</strong>: <a href="https://github.com/AanZee/javascript" target="_blank" rel="noopener">AanZee/javascript</a></li><li><strong>Adult Swim</strong>: <a href="https://github.com/adult-swim/javascript" target="_blank" rel="noopener">adult-swim/javascript</a></li><li><strong>Airbnb</strong>: <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb/javascript</a></li><li><strong>Apartmint</strong>: <a href="https://github.com/apartmint/javascript" target="_blank" rel="noopener">apartmint/javascript</a></li><li><strong>Avalara</strong>: <a href="https://github.com/avalara/javascript" target="_blank" rel="noopener">avalara/javascript</a></li><li><strong>Billabong</strong>: <a href="https://github.com/billabong/javascript" target="_blank" rel="noopener">billabong/javascript</a></li><li><strong>Compass Learning</strong>: <a href="https://github.com/compasslearning/javascript-style-guide" target="_blank" rel="noopener">compasslearning/javascript-style-guide</a></li><li><strong>DailyMotion</strong>: <a href="https://github.com/dailymotion/javascript" target="_blank" rel="noopener">dailymotion/javascript</a></li><li><strong>Digitpaint</strong> <a href="https://github.com/digitpaint/javascript" target="_blank" rel="noopener">digitpaint/javascript</a></li><li><strong>Evernote</strong>: <a href="https://github.com/evernote/javascript-style-guide" target="_blank" rel="noopener">evernote/javascript-style-guide</a></li><li><strong>ExactTarget</strong>: <a href="https://github.com/ExactTarget/javascript" target="_blank" rel="noopener">ExactTarget/javascript</a></li><li><strong>Flexberry</strong>: <a href="https://github.com/Flexberry/javascript-style-guide" target="_blank" rel="noopener">Flexberry/javascript-style-guide</a></li><li><strong>Gawker Media</strong>: <a href="https://github.com/gawkermedia/javascript" target="_blank" rel="noopener">gawkermedia/javascript</a></li><li><strong>General Electric</strong>: <a href="https://github.com/GeneralElectric/javascript" target="_blank" rel="noopener">GeneralElectric/javascript</a></li><li><strong>GoodData</strong>: <a href="https://github.com/gooddata/gdc-js-style" target="_blank" rel="noopener">gooddata/gdc-js-style</a></li><li><strong>Grooveshark</strong>: <a href="https://github.com/grooveshark/javascript" target="_blank" rel="noopener">grooveshark/javascript</a></li><li><strong>How About We</strong>: <a href="https://github.com/howaboutwe/javascript" target="_blank" rel="noopener">howaboutwe/javascript</a></li><li><strong>InfoJobs</strong>: <a href="https://github.com/InfoJobs/JavaScript-Style-Guide" target="_blank" rel="noopener">InfoJobs/JavaScript-Style-Guide</a></li><li><strong>Intent Media</strong>: <a href="https://github.com/intentmedia/javascript" target="_blank" rel="noopener">intentmedia/javascript</a></li><li><strong>Jam3</strong>: <a href="https://github.com/Jam3/Javascript-Code-Conventions" target="_blank" rel="noopener">Jam3/Javascript-Code-Conventions</a></li><li><strong>JSSolutions</strong>: <a href="https://github.com/JSSolutions/javascript" target="_blank" rel="noopener">JSSolutions/javascript</a></li><li><strong>Kinetica Solutions</strong>: <a href="https://github.com/kinetica/javascript" target="_blank" rel="noopener">kinetica/javascript</a></li><li><strong>Mighty Spring</strong>: <a href="https://github.com/mightyspring/javascript" target="_blank" rel="noopener">mightyspring/javascript</a></li><li><strong>MinnPost</strong>: <a href="https://github.com/MinnPost/javascript" target="_blank" rel="noopener">MinnPost/javascript</a></li><li><strong>ModCloth</strong>: <a href="https://github.com/modcloth/javascript" target="_blank" rel="noopener">modcloth/javascript</a></li><li><strong>Money Advice Service</strong>: <a href="https://github.com/moneyadviceservice/javascript" target="_blank" rel="noopener">moneyadviceservice/javascript</a></li><li><strong>Muber</strong>: <a href="https://github.com/muber/javascript" target="_blank" rel="noopener">muber/javascript</a></li><li><strong>National Geographic</strong>: <a href="https://github.com/natgeo/javascript" target="_blank" rel="noopener">natgeo/javascript</a></li><li><strong>National Park Service</strong>: <a href="https://github.com/nationalparkservice/javascript" target="_blank" rel="noopener">nationalparkservice/javascript</a></li><li><strong>Nimbl3</strong>: <a href="https://github.com/nimbl3/javascript" target="_blank" rel="noopener">nimbl3/javascript</a></li><li><strong>Nordic Venture Family</strong>: <a href="https://github.com/CodeDistillery/javascript" target="_blank" rel="noopener">CodeDistillery/javascript</a></li><li><strong>Orion Health</strong>: <a href="https://github.com/orionhealth/javascript" target="_blank" rel="noopener">orionhealth/javascript</a></li><li><strong>Peerby</strong>: <a href="https://github.com/Peerby/javascript" target="_blank" rel="noopener">Peerby/javascript</a></li><li><strong>Razorfish</strong>: <a href="https://github.com/razorfish/javascript-style-guide" target="_blank" rel="noopener">razorfish/javascript-style-guide</a></li><li><strong>reddit</strong>: <a href="https://github.com/reddit/styleguide/tree/master/javascript" target="_blank" rel="noopener">reddit/styleguide/javascript</a></li><li><strong>REI</strong>: <a href="https://github.com/reidev/js-style-guide" target="_blank" rel="noopener">reidev/js-style-guide</a></li><li><strong>Ripple</strong>: <a href="https://github.com/ripple/javascript-style-guide" target="_blank" rel="noopener">ripple/javascript-style-guide</a></li><li><strong>SeekingAlpha</strong>: <a href="https://github.com/seekingalpha/javascript-style-guide" target="_blank" rel="noopener">seekingalpha/javascript-style-guide</a></li><li><strong>Shutterfly</strong>: <a href="https://github.com/shutterfly/javascript" target="_blank" rel="noopener">shutterfly/javascript</a></li><li><strong>StudentSphere</strong>: <a href="https://github.com/studentsphere/javascript" target="_blank" rel="noopener">studentsphere/javascript</a></li><li><strong>Super</strong>: <a href="https://github.com/SuperJobs/javascript" target="_blank" rel="noopener">SuperJobs/javascript</a></li><li><strong>SysGarage</strong>: <a href="https://github.com/sysgarage/javascript-style-guide" target="_blank" rel="noopener">sysgarage/javascript-style-guide</a></li><li><strong>Target</strong>: <a href="https://github.com/target/javascript" target="_blank" rel="noopener">target/javascript</a></li><li><strong>TheLadders</strong>: <a href="https://github.com/TheLadders/javascript" target="_blank" rel="noopener">TheLadders/javascript</a></li><li><strong>T4R Technology</strong>: <a href="https://github.com/T4R-Technology/javascript" target="_blank" rel="noopener">T4R-Technology/javascript</a></li><li><strong>VoxFeed</strong>: <a href="https://github.com/VoxFeed/javascript-style-guide" target="_blank" rel="noopener">VoxFeed/javascript-style-guide</a></li><li><strong>Weggo</strong>: <a href="https://github.com/Weggo/javascript" target="_blank" rel="noopener">Weggo/javascript</a></li><li><strong>Zillow</strong>: <a href="https://github.com/zillow/javascript" target="_blank" rel="noopener">zillow/javascript</a></li><li><strong>ZocDoc</strong>: <a href="https://github.com/ZocDoc/javascript" target="_blank" rel="noopener">ZocDoc/javascript</a></li></ul><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>  这份风格指南也提供了其它语言的版本：</p><ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/armoucar/javascript-style-guide" alt="br](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png) **Brazilian Portuguese**: [armoucar/javascript-style-guide" title="">                </div>                <div class="image-caption">br](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png) **Brazilian Portuguese**: [armoucar/javascript-style-guide</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/borislavvv/javascript" alt="bg](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bulgaria.png) **Bulgarian**: [borislavvv/javascript" title="">                </div>                <div class="image-caption">bg](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bulgaria.png) **Bulgarian**: [borislavvv/javascript</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/fpmweb/javascript-style-guide" alt="ca](https://raw.githubusercontent.com/fpmweb/javascript-style-guide/master/img/catala.png) **Catalan**: [fpmweb/javascript-style-guide" title="">                </div>                <div class="image-caption">ca](https://raw.githubusercontent.com/fpmweb/javascript-style-guide/master/img/catala.png) **Catalan**: [fpmweb/javascript-style-guide</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/jigsawye/javascript" alt="tw](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png) **Chinese(Traditional)**: [jigsawye/javascript" title="">                </div>                <div class="image-caption">tw](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png) **Chinese(Traditional)**: [jigsawye/javascript</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/sivan/javascript" alt="cn](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png) **Chinese(Simplified)**: [sivan/javascript" title="">                </div>                <div class="image-caption">cn](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png) **Chinese(Simplified)**: [sivan/javascript</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/nmussy/javascript-style-guide" alt="fr](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png) **French**: [nmussy/javascript-style-guide" title="">                </div>                <div class="image-caption">fr](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png) **French**: [nmussy/javascript-style-guide</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/timofurrer/javascript-style-guide" alt="de](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png) **German**: [timofurrer/javascript-style-guide" title="">                </div>                <div class="image-caption">de](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png) **German**: [timofurrer/javascript-style-guide</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/sinkswim/javascript-style-guide" alt="it](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png) **Italian**: [sinkswim/javascript-style-guide" title="">                </div>                <div class="image-caption">it](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png) **Italian**: [sinkswim/javascript-style-guide</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/mitsuruog/javacript-style-guide" alt="jp](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png) **Japanese**: [mitsuruog/javacript-style-guide" title="">                </div>                <div class="image-caption">jp](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png) **Japanese**: [mitsuruog/javacript-style-guide</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/tipjs/javascript-style-guide" alt="kr](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png) **Korean**: [tipjs/javascript-style-guide" title="">                </div>                <div class="image-caption">kr](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png) **Korean**: [tipjs/javascript-style-guide</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/mjurczyk/javascript" alt="pl](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png) **Polish**: [mjurczyk/javascript" title="">                </div>                <div class="image-caption">pl](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png) **Polish**: [mjurczyk/javascript</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/uprock/javascript" alt="ru](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png) **Russian**: [uprock/javascript" title="">                </div>                <div class="image-caption">ru](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png) **Russian**: [uprock/javascript</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/paolocarrasco/javascript-style-guide" alt="es](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png) **Spanish**: [paolocarrasco/javascript-style-guide" title="">                </div>                <div class="image-caption">es](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png) **Spanish**: [paolocarrasco/javascript-style-guide</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/lvarayut/javascript-style-guide" alt="th](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Thailand.png) **Thai**: [lvarayut/javascript-style-guide" title="">                </div>                <div class="image-caption">th](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Thailand.png) **Thai**: [lvarayut/javascript-style-guide</div>            </figure></li></ul><h2 id="JavaScript-风格指南说明"><a href="#JavaScript-风格指南说明" class="headerlink" title="JavaScript 风格指南说明"></a>JavaScript 风格指南说明</h2><ul><li><a href="https://github.com/airbnb/javascript/wiki/The-JavaScript-Style-Guide-Guide" target="_blank" rel="noopener">Reference</a></li></ul><h2 id="与我们讨论-JavaScript"><a href="#与我们讨论-JavaScript" class="headerlink" title="与我们讨论 JavaScript"></a>与我们讨论 JavaScript</h2><ul><li>Find us on <a href="https://gitter.im/airbnb/javascript" target="_blank" rel="noopener">gitter</a>.</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><ul><li><a href="https://github.com/airbnb/javascript/graphs/contributors" target="_blank" rel="noopener">View Contributors</a></li></ul><h2 id="许可"><a href="#许可" class="headerlink" title="许可"></a>许可</h2><p>(The MIT License)</p><p>Copyright (c) 2014 Airbnb</p><p>Permission is hereby granted, free of charge, to any person obtaining<br>a copy of this software and associated documentation files (the<br>‘Software’), to deal in the Software without restriction, including<br>without limitation the rights to use, copy, modify, merge, publish,<br>distribute, sublicense, and/or sell copies of the Software, and to<br>permit persons to whom the Software is furnished to do so, subject to<br>the following conditions:</p><p>The above copyright notice and this permission notice shall be<br>included in all copies or substantial portions of the Software.</p><p>THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND,<br>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<br>MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.<br>IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY<br>CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,<br>TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE<br>SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p><p><strong><a href="#airbnb-javascript-style-guide-">⬆ 回到顶部</a></strong></p><h1 id=""><a href="#" class="headerlink" title="};"></a>};</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Airbnb-JavaScript-Style-Guide&quot;&gt;&lt;a href=&quot;#Airbnb-JavaScript-Style-Guide&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Repost" scheme="http://blog.duanxu.tech/categories/Repost/"/>
    
    
      <category term="JavaScript" scheme="http://blog.duanxu.tech/tags/JavaScript/"/>
    
      <category term="Style Guide" scheme="http://blog.duanxu.tech/tags/Style-Guide/"/>
    
  </entry>
  
  <entry>
    <title>树莓派手记(1) 查找并连接</title>
    <link href="http://blog.duanxu.tech/2016/11/02/2016/2016-11-02-%E6%A0%91%E8%8E%93%E6%B4%BE%E6%89%8B%E8%AE%B0(1)-%E6%9F%A5%E6%89%BE%E5%B9%B6%E8%BF%9E%E6%8E%A5/"/>
    <id>http://blog.duanxu.tech/2016/11/02/2016/2016-11-02-树莓派手记(1)-查找并连接/</id>
    <published>2016-11-02T10:49:30.000Z</published>
    <updated>2018-12-07T12:51:58.558Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p>由于不使用GUI交互，只能通过SSH登陆树莓派，所以首先我们需要知道树莓派的IP地址。对于局域网，可以通过 arp-scan 来获取树莓派的 IP 地址。</p><h3 id="1-获取本机网络设备号"><a href="#1-获取本机网络设备号" class="headerlink" title="1 获取本机网络设备号"></a>1 获取本机网络设备号</h3><p>首先，查看本地网卡设备号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ifconfig</span></span><br><span class="line"></span><br><span class="line">enp0s25   Link encap:Ethernet  HWaddr FF:FF:FF:FF:FF:FF  </span><br><span class="line">          inet addr:255.255.255.255  Bcast:255.255.255.255  Mask:255.255.224.0</span><br><span class="line">          inet6 addr: ffff::ffff:ffff:ffff:ffff/64 Scope:Link</span><br><span class="line">          inet6 addr: ffff:ffff:ffff:ffff::ffff:ffff/128 Scope:Global</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:179004 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:495691 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:66530981 (66.5 MB)  TX bytes:587144597 (587.1 MB)</span><br><span class="line">          Interrupt:19 Memory:f0000000-f0020000 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:3776 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:3776 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:591518 (591.5 KB)  TX bytes:591518 (591.5 KB)</span><br></pre></td></tr></table></figure><p>其中 enp0s25 就是我们的有限网路设备的设备号，而 lo 是本地回环设备号。将 enp0s25 记下来用于 arp-scan 使用。</p><h3 id="2-安装-arp-scan"><a href="#2-安装-arp-scan" class="headerlink" title="2 安装 arp-scan"></a>2 安装 arp-scan</h3><p>如果已经安装此软件包，直接跳过即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install arp-scan</span></span><br></pre></td></tr></table></figure><h3 id="3-获取树莓派-IP"><a href="#3-获取树莓派-IP" class="headerlink" title="3 获取树莓派 IP"></a>3 获取树莓派 IP</h3><p>由于树莓派的Mac地址都是b8:27:3b开头的，所以在 arp-scan 中，以 b8:27:3b 开头的 Mac 地址对应的 IP 即为内网树莓派的 IP 地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo arp-scan --interface enp0s25 --localnet | grep b8:27:eb</span></span><br><span class="line"></span><br><span class="line">2XX.X.XX.XXXb8:27:eb:FF:FF:FF(Unknown)</span><br></pre></td></tr></table></figure><h3 id="4-SSH-登录树莓派"><a href="#4-SSH-登录树莓派" class="headerlink" title="4 SSH 登录树莓派"></a>4 SSH 登录树莓派</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh 2XX.X.XX.XXX</span></span><br><span class="line"></span><br><span class="line">XXX@2XX.X.XX.XXX's password: </span><br><span class="line">Welcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.1.19-v7+ armv7l)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">0 packages can be updated.</span><br><span class="line">0 updates are security updates.</span><br><span class="line"></span><br><span class="line">Last login: Wed Nov  2 18:20:58 2016 from 2XX.X.XX.XXX</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于不使用GUI交互，只能通过SSH登陆树莓派，所以首先我们需要知道树莓派的IP地址。对于局域网，可以通过 arp-scan 来获取树莓派的 IP 地址。&lt;/p&gt;
&lt;h3 id=&quot;1-获取本机网络设
      
    
    </summary>
    
      <category term="Raspberry" scheme="http://blog.duanxu.tech/categories/Raspberry/"/>
    
    
      <category term="Linux" scheme="http://blog.duanxu.tech/tags/Linux/"/>
    
      <category term="Raspberry" scheme="http://blog.duanxu.tech/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu+Django+Nginx+uWSGI+Mysql搭建Python Web服务器</title>
    <link href="http://blog.duanxu.tech/2016/10/27/2016/2016-10-27-Ubuntu+Django+Nginx+uWSGI+Mysql%E6%90%AD%E5%BB%BAPython%20Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://blog.duanxu.tech/2016/10/27/2016/2016-10-27-Ubuntu+Django+Nginx+uWSGI+Mysql搭建Python Web服务器/</id>
    <published>2016-10-27T14:09:30.000Z</published>
    <updated>2018-12-07T12:51:53.484Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p><strong>本文转载自<a href="https://segmentfault.com/a/1190000007262187" target="_blank" rel="noopener">SegmentFault</a></strong></p><p>前不久为了部署Django项目，在百度上到处找教程，找到的教程因为这样那样的原因，总是失败，可能是因为作者水平比较高吧，有些细节的东西估计没写出来，造成我这种初学者想照着做都做不成。百度不行就用Google吧，中文不行就找英文的，最后，给我误打误撞的部署成功了。为了加深印象，我用虚拟机再重新部署一次。</p><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h3><p>我使用的系统是Ubuntu14.04.5 LTS(Trusty Tahr) server i386版，官网下载地址：<a href="http://releases.ubuntu.com/14.04.4/ubuntu-14.04.5-server-i386.iso" target="_blank" rel="noopener">http://releases.ubuntu.com/14.04.4/ubuntu-14.04.5-server-i386.iso</a></p><p>安装的时候全部选择英文，记得以前选择中文的时候安装时出了问题，服务器组件一个不选，Ubuntu安装做的很贴心，基本上是一路回车，就不详细说明了。装好以后，首先要更新apt-get，貌似我的ubuntu镜像是在国内站下载的，所以源是国内的地址，所以就不用更换源了。</p><h4 id="1-1-更新apt-get"><a href="#1-1-更新apt-get" class="headerlink" title="1.1 更新apt-get"></a>1.1 更新apt-get</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h4 id="1-2-安装SSH"><a href="#1-2-安装SSH" class="headerlink" title="1.2 安装SSH"></a>1.2 安装SSH</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ssh</span><br></pre></td></tr></table></figure><p>装好以后，用ifconfig查看一下IP地址</p><div style="text-align: center"><br><img src="/images/201610/2016102701.png"><br></div><p>可以看到IP地址是192.168.0.154，下面我们就使用XSHELL连接192.168.0.154进行操作了。</p><h4 id="1-3-安装Git"><a href="#1-3-安装Git" class="headerlink" title="1.3 安装Git"></a>1.3 安装Git</h4><p>这一步不是必须的，因为我的测试项目是放在git.oschina.com上的，安装git获取项目代码就很方便了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="2-安装配置MySQL"><a href="#2-安装配置MySQL" class="headerlink" title="2 安装配置MySQL"></a>2 安装配置MySQL</h3><h4 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>安装过程中会提示让你设置root密码</p><div style="text-align: center"><br><img src="/images/201610/2016102702.png"><br></div><h4 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h4><p>2.2.1 数据库初始化：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_install_db</span><br></pre></td></tr></table></figure><p>2.2.2 运行数据库Mysql安全配置向导</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><p>输入root密码</p><div style="text-align: center"><br><img src="/images/201610/2016102703.png"><br></div><p>是否修改root密码，因为前面已经设置过了，选n</p><div style="text-align: center"><br><img src="/images/201610/2016102704.png"><br></div><p>是否移除匿名用户,肯定是要选y的</p><div style="text-align: center"><br><img src="/images/201610/2016102705.png"><br></div><p>是否允许远程登陆，如果选n的话，只能在本机访问数据库，建议选y</p><div style="text-align: center"><br><img src="/images/201610/2016102706.png"><br></div><p>是否移除test数据库，建议选是</p><div style="text-align: center"><br><img src="/images/201610/2016102707.png"><br></div><p>重新加载权限表，选y</p><div style="text-align: center"><br><img src="/images/201610/2016102708.png"><br></div><p>All done!</p><h3 id="3-安装配置Python环境"><a href="#3-安装配置Python环境" class="headerlink" title="3 安装配置Python环境"></a>3 安装配置Python环境</h3><h4 id="3-1-安装python-dev包"><a href="#3-1-安装python-dev包" class="headerlink" title="3.1 安装python-dev包"></a>3.1 安装python-dev包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev</span><br></pre></td></tr></table></figure><h4 id="3-2-安装pip"><a href="#3-2-安装pip" class="headerlink" title="3.2 安装pip"></a>3.2 安装pip</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure><h4 id="3-3-更换pip源"><a href="#3-3-更换pip源" class="headerlink" title="3.3 更换pip源"></a>3.3 更换pip源</h4><p>因为国内使用默认的pip源速度很慢，所以需要更换,在用户根目录下新建.pip目录，在该目录下新建pip.conf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir ~/.pip</span><br><span class="line">sudo vi ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>然后在文件里写上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h4 id="3-4-安装配置VirtualEnv和VirtualEnvWrapper"><a href="#3-4-安装配置VirtualEnv和VirtualEnvWrapper" class="headerlink" title="3.4 安装配置VirtualEnv和VirtualEnvWrapper"></a>3.4 安装配置VirtualEnv和VirtualEnvWrapper</h4><p>VirtualEnv可以管理多个开发环境，VirtualEnvWrapper使得VirtualEnv变得更好用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv virtualenvwrapper</span><br></pre></td></tr></table></figure><p>安装完成以后，需要在环境变量中加入一些配置：下面这句话是使用python3才需要执行的，python2不需要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3" &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>不管python是什么版本，都要执行下面两句：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo "export WORKON_HOME=~/Env" &gt;&gt; ~/.bashrc</span><br><span class="line">echo "source /usr/local/bin/virtualenvwrapper.sh" &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>可以重启系统激活，也可以运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>然后就可以开始建立一个虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv first</span><br></pre></td></tr></table></figure><p>你会发现，提示符变成(first)user@hostname:~$,表示现在已经进入first的虚拟环境，在此环境下进行的pip等操作，只会在当前环境下生效,当前虚拟环境在/home/siva/Env/first目录下</p><h3 id="4-Django项目配置"><a href="#4-Django项目配置" class="headerlink" title="4 Django项目配置"></a>4 Django项目配置</h3><h4 id="4-1-安装django"><a href="#4-1-安装django" class="headerlink" title="4.1 安装django"></a>4.1 安装django</h4><p>我使用选择版本来安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==1.10.1</span><br></pre></td></tr></table></figure><h4 id="4-2-下载或拷贝项目"><a href="#4-2-下载或拷贝项目" class="headerlink" title="4.2 下载或拷贝项目"></a>4.2 下载或拷贝项目</h4><p>安装完成以后，使用git把项目clone下来,此处填写你自己的地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://git.oschina.net/xxx/Siva_First.git</span><br></pre></td></tr></table></figure><p>此例子的项目名称是Siva_First，路径是在/home/siva/下</p><h4 id="4-3-配置django"><a href="#4-3-配置django" class="headerlink" title="4.3 配置django"></a>4.3 配置django</h4><p>用Mysql建好项目的数据库，然后进入Siva_First目录，用django应用数据模型：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>建立后台超级用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>静态文件安置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><h4 id="4-4-测试项目"><a href="#4-4-测试项目" class="headerlink" title="4.4 测试项目"></a>4.4 测试项目</h4><p>运行开发服务器测试一下是否可以正常运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>这时，用浏览器打开<a href="http://192.168.0.154:8000/可以看到网站" target="_blank" rel="noopener">http://192.168.0.154:8000/可以看到网站</a></p><h4 id="4-5-退出虚拟环境"><a href="#4-5-退出虚拟环境" class="headerlink" title="4.5 退出虚拟环境"></a>4.5 退出虚拟环境</h4><p>因为当前是在first虚拟环境下，为了下一步的安装，必须退出当前的虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><h3 id="5-uWSGI安装和配置"><a href="#5-uWSGI安装和配置" class="headerlink" title="5 uWSGI安装和配置"></a>5 uWSGI安装和配置</h3><h4 id="5-1-安装uWSGI"><a href="#5-1-安装uWSGI" class="headerlink" title="5.1 安装uWSGI"></a>5.1 安装uWSGI</h4><p>pip下安装很简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install uwsgi</span><br></pre></td></tr></table></figure><p>我们可以测试一下uwsgi是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --home /home/siva/Env/first --chdir /home/siva/Siva_First -w Siva_First.wsgi</span><br></pre></td></tr></table></figure><p>上面的命令是使用8000端口，虚拟环境在/home/siva/Env/first，项目在/home/siva/Siva_First下</p><h4 id="5-2-配置uWSGI"><a href="#5-2-配置uWSGI" class="headerlink" title="5.2 配置uWSGI"></a>5.2 配置uWSGI</h4><p>使用上面的命令行来部署网站肯定是不行的，我们需要使用“Emperor mode”，建立一个目录来放配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/uwsgi/sites</span><br><span class="line">cd /etc/uwsgi/sites</span><br></pre></td></tr></table></figure><p>以项目名称来命名这个配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi Siva_First.ini</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">project = Siva_First</span><br><span class="line">base = /home/siva</span><br><span class="line"></span><br><span class="line">chdir = %(base)/%(project)</span><br><span class="line">home = %(base)/Env/%(project)</span><br><span class="line">module = %(project).wsgi:application</span><br><span class="line"></span><br><span class="line">master = true</span><br><span class="line">processes = 5</span><br><span class="line"></span><br><span class="line">socket = %(base)/%(project)/%(project).sock</span><br><span class="line">chmod-socket = 664</span><br><span class="line">vacuum = true</span><br></pre></td></tr></table></figure><p>project是项目名称，base是项目所在位置</p><p>现在，配置文件建好了，但是uwsgi还不能自动运行我们需要在/etc/init目录中建一个启动脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/init/uwsgi.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">description "uWSGI application server in Emperor mode"</span><br><span class="line"></span><br><span class="line">start on runlevel [2345]</span><br><span class="line">stop on runlevel [!2345]</span><br><span class="line"></span><br><span class="line">setuid siva</span><br><span class="line">setgid www-data</span><br><span class="line"></span><br><span class="line">exec /usr/local/bin/uwsgi --emperor /etc/uwsgi/sites</span><br></pre></td></tr></table></figure><p>这一步完成以后，uwsgi还是不能正常启动，是因为www-data用户组还没有创建，等我们装完nginx以后就可以了。</p><h3 id="6-反向代理：Nginx的安装和配置"><a href="#6-反向代理：Nginx的安装和配置" class="headerlink" title="6 反向代理：Nginx的安装和配置"></a>6 反向代理：Nginx的安装和配置</h3><h4 id="6-1-安装"><a href="#6-1-安装" class="headerlink" title="6.1 安装"></a>6.1 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h4 id="6-2-创建配置文件"><a href="#6-2-创建配置文件" class="headerlink" title="6.2 创建配置文件"></a>6.2 创建配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/nginx/sites-available/Siva_First</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 192.168.0.154;</span><br><span class="line"></span><br><span class="line">    location = /favicon.ico &#123; access_log off; log_not_found off; &#125;</span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        root /home/siva/Siva_First;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include         uwsgi_params;</span><br><span class="line">        uwsgi_pass      unix:/home/siva/Siva_First/Siva_First.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把这个配置文件链接到sites-enabled目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/Siva_First /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><p>检查一下配置文件的语法是否有问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx configtest</span><br></pre></td></tr></table></figure><p>如果没问题，那么重启一下nginx和uwsgi的服务就可以访问了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br><span class="line">sudo service uwsgi restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本文转载自&lt;a href=&quot;https://segmentfault.com/a/1190000007262187&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;S
      
    
    </summary>
    
      <category term="Ubuntu" scheme="http://blog.duanxu.tech/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.duanxu.tech/tags/Ubuntu/"/>
    
      <category term="MySQL" scheme="http://blog.duanxu.tech/tags/MySQL/"/>
    
      <category term="Django" scheme="http://blog.duanxu.tech/tags/Django/"/>
    
      <category term="Nginx" scheme="http://blog.duanxu.tech/tags/Nginx/"/>
    
      <category term="Python Web" scheme="http://blog.duanxu.tech/tags/Python-Web/"/>
    
  </entry>
  
  <entry>
    <title>MySQL时区问题</title>
    <link href="http://blog.duanxu.tech/2016/10/10/2016/2016-10-10-MySQL%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98%20/"/>
    <id>http://blog.duanxu.tech/2016/10/10/2016/2016-10-10-MySQL时区问题 /</id>
    <published>2016-10-10T10:57:30.000Z</published>
    <updated>2018-12-07T12:51:50.436Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1 问题描述"></a>1 问题描述</h3><p>Java连接MySQL的出现错误：</p><blockquote><p>ERROR: The server time zone value ‘�й���׼ʱ��’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.</p></blockquote><p>提示说服务器时区设置错误，首先，查看原编码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">'%time_zone%'</span>;</span></span><br><span class="line">+------------------+--------+  </span><br><span class="line">| Variable_name    | Value  |  </span><br><span class="line">+------------------+--------+  </span><br><span class="line">| system_time_zone |        |  </span><br><span class="line">| time_zone        | SYSTEM |  </span><br><span class="line">+------------------+--------+  </span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>发现，<code>system_time_zone</code>一栏为空，需要修改系统时区设置。</p><h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h3><h4 id="2-1-临时解决方法"><a href="#2-1-临时解决方法" class="headerlink" title="2.1 临时解决方法"></a>2.1 临时解决方法</h4><p>那么将<code>system_time_zone</code>改成正确的值即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> system_time_zone=<span class="string">'+8:00'</span>;</span></span><br></pre></td></tr></table></figure><p>之后，便可以正常连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">'%time_zone%'</span>;</span></span><br><span class="line">+------------------+--------+  </span><br><span class="line">| Variable_name    | Value  |  </span><br><span class="line">+------------------+--------+  </span><br><span class="line">| system_time_zone | CST    |  </span><br><span class="line">| time_zone        | +08:00 |  </span><br><span class="line">+------------------+--------+  </span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="2-2-一劳永逸解决方法"><a href="#2-2-一劳永逸解决方法" class="headerlink" title="2.2 一劳永逸解决方法"></a>2.2 一劳永逸解决方法</h4><p>上述解决方法有个缺陷，就是在每次数据库重启之后，所有的工作都丢失了，会发现再次连接依然会提示错误。于是有了如下方案，直接修改 MySQL 的配置文件：</p><h5 id="2-2-1-Linux-环境"><a href="#2-2-1-Linux-环境" class="headerlink" title="2.2.1 Linux 环境"></a>2.2.1 Linux 环境</h5><p>在 Ubuntu 16.04 + MySQL 5.7 环境下，修改 <code>/etc/mysql/my.cnf</code> 配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo vim /etc/mysql/my.cnf</span><br><span class="line">----------------------------------</span><br><span class="line">[mysqld]</span><br><span class="line">default-time-zone = '+8:00'</span><br></pre></td></tr></table></figure><p>之后重启数据库即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><h5 id="2-2-2-Windows-环境"><a href="#2-2-2-Windows-环境" class="headerlink" title="2.2.2 Windows 环境"></a>2.2.2 Windows 环境</h5><p>在 Windows + MySQL 5.7 环境下，修改 <code>%PROGRAMDATA%\MySQL\MySQL Server 5.7\my.ini</code> 配置文件：</p><p>这里的 <code>%PROGRAMDATA%</code> 一般为：<code>C:\ProgramData\</code>，可以通过<code>echo %PROGRAMDATA%</code>查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">default-time-zone = '+8:00'</span><br></pre></td></tr></table></figure><p>之后重启数据库即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1 问题描述&quot;&gt;&lt;/a&gt;1 问题描述&lt;/h3&gt;&lt;p&gt;Java连接MySQL的出现错误
      
    
    </summary>
    
      <category term="Ubuntu" scheme="http://blog.duanxu.tech/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.duanxu.tech/tags/Ubuntu/"/>
    
      <category term="MySQL" scheme="http://blog.duanxu.tech/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中文乱码问号问题</title>
    <link href="http://blog.duanxu.tech/2016/10/10/2016/2016-10-10-MySQL%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E5%8F%B7%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.duanxu.tech/2016/10/10/2016/2016-10-10-MySQL中文乱码问号问题/</id>
    <published>2016-10-10T10:25:30.000Z</published>
    <updated>2018-12-07T12:51:47.211Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p>有时候，向MySQL数据库表插入中文，然后在查找的时候 会出现中文文字变成问号（？？？）的情况。这是由于数据库编码问题导致的。</p><h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1 问题描述"></a>1 问题描述</h3><p>向表内插入数据，然后再 select 的时候，发现中文都变成了问号。</p><p>首先，查看原编码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">'character%'</span>;</span></span><br><span class="line">+--------------------------+----------------------------+ </span><br><span class="line">| Variable_name | Value | </span><br><span class="line">+--------------------------+----------------------------+ </span><br><span class="line">| character_set_client | utf8 | </span><br><span class="line">| character_set_connection | utf8 | </span><br><span class="line">| character_set_database | latin1 | </span><br><span class="line">| character_set_filesystem | binary | </span><br><span class="line">| character_set_results | utf8 | </span><br><span class="line">| character_set_server | latin1 | </span><br><span class="line">| character_set_system | utf8 | </span><br><span class="line">| character_sets_dir | /usr/share/mysql/charsets/ | </span><br><span class="line">+--------------------------+----------------------------+</span><br></pre></td></tr></table></figure><p>发现，<code>character_set_database</code> 和 <code>character_set_server</code> 使用的都是 <code>latin1</code> 编码，因此导致中文在存取过程中的编码错误。</p><h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h3><h4 id="2-1-临时解决方法"><a href="#2-1-临时解决方法" class="headerlink" title="2.1 临时解决方法"></a>2.1 临时解决方法</h4><p>既然上述两个变量值错误，那么将其改成正确的值即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> character_set_database=utf8;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> character_set_server=utf8;</span></span><br></pre></td></tr></table></figure><p>之后，<strong>将乱码的表drop，然后重新插入即可。</strong></p><p>如果还是乱码，就：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET NAMES <span class="string">'utf8'</span>;</span></span><br></pre></td></tr></table></figure><p>然后，应该可以得到正确的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">'character%'</span>;</span></span><br><span class="line">+--------------------------+----------------------------------------+</span><br><span class="line">| Variable_name            | Value                                  |</span><br><span class="line">+--------------------------+----------------------------------------+</span><br><span class="line">| character_set_client     | utf8                                   |</span><br><span class="line">| character_set_connection | utf8                                   |</span><br><span class="line">| character_set_database   | utf8                                   |</span><br><span class="line">| character_set_filesystem | binary                                 |</span><br><span class="line">| character_set_results    | utf8                                   |</span><br><span class="line">| character_set_server     | utf8                                   |</span><br><span class="line">| character_set_system     | utf8                                   |</span><br><span class="line">| character_sets_dir       | /usr/local/mysql/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------------------+</span><br></pre></td></tr></table></figure><p>问题一般会得到解决。</p><h4 id="2-2-一劳永逸解决方法"><a href="#2-2-一劳永逸解决方法" class="headerlink" title="2.2 一劳永逸解决方法"></a>2.2 一劳永逸解决方法</h4><p>上述解决方法有个缺陷，就是在每次数据库重启之后，所有的工作都丢失了，会发现查找的表依旧是乱码。于是有了如下方案，直接修改 MySQL 的配置文件：</p><h5 id="2-2-1-Linux-环境"><a href="#2-2-1-Linux-环境" class="headerlink" title="2.2.1 Linux 环境"></a>2.2.1 Linux 环境</h5><p>在 Ubuntu 16.04 + MySQL 5.7 环境下，修改 <code>/etc/mysql/my.cnf</code> 配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo vim /etc/mysql/my.cnf</span><br><span class="line">----------------------------------</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>之后重启数据库，然后<strong>重新导入数据</strong>即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><h5 id="2-2-2-Windows-环境"><a href="#2-2-2-Windows-环境" class="headerlink" title="2.2.2 Windows 环境"></a>2.2.2 Windows 环境</h5><p>在 Windows + MySQL 5.7 环境下，修改 <code>%PROGRAMDATA%\MySQL\MySQL Server 5.7\my.ini</code> 配置文件：</p><p>这里的 <code>%PROGRAMDATA%</code> 一般为：<code>C:\ProgramData\</code>，可以通过<code>echo %PROGRAMDATA%</code>查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>之后重启数据库，然后<strong>重新导入数据</strong>即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有时候，向MySQL数据库表插入中文，然后在查找的时候 会出现中文文字变成问号（？？？）的情况。这是由于数据库编码问题导致的。&lt;/p&gt;
&lt;h3 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描
      
    
    </summary>
    
      <category term="Ubuntu" scheme="http://blog.duanxu.tech/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.duanxu.tech/tags/Ubuntu/"/>
    
      <category term="MySQL" scheme="http://blog.duanxu.tech/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04 配置 openCV 环境</title>
    <link href="http://blog.duanxu.tech/2016/09/16/2016/2016-09-16-Ubuntu16.04-%E9%85%8D%E7%BD%AEopenCV%E7%8E%AF%E5%A2%83/"/>
    <id>http://blog.duanxu.tech/2016/09/16/2016/2016-09-16-Ubuntu16.04-配置openCV环境/</id>
    <published>2016-09-16T07:03:30.000Z</published>
    <updated>2018-12-07T12:54:20.261Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p>本问主要描述了在 Ubuntu 16.04(x64) 环境下配置openCV，以及运行示例程序的过程。</p><h3 id="1-安装-openCV"><a href="#1-安装-openCV" class="headerlink" title="1 安装 openCV"></a>1 安装 openCV</h3><h4 id="1-1-下载-openCV"><a href="#1-1-下载-openCV" class="headerlink" title="1.1 下载 openCV"></a>1.1 下载 openCV</h4><p>首先下载 <a href="https://github.com/Itseez/opencv/archive/2.4.13.zip" target="_blank" rel="noopener">openCV-2.4.13 安装包</a>，并解压到任意目录</p><h4 id="1-2-安装依赖环境"><a href="#1-2-安装依赖环境" class="headerlink" title="1.2 安装依赖环境"></a>1.2 安装依赖环境</h4><p>编译 openCV包的时候需要安装相应的依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt-get install build-essential libgtk2.0-dev libjpeg-dev libtiff5-dev libjasper-dev libopenexr-dev cmake python-dev</span><br><span class="line">python-numpy python-tk libtbb-dev libeigen3-dev yasm libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev </span><br><span class="line">libvorbis-dev libxvidcore-dev libx264-dev libqt4-dev libqt4-opengl-dev sphinx-common texlive-latex-extra libv4l-dev </span><br><span class="line">libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev default-jdk ant libvtk5-qt4-dev</span><br></pre></td></tr></table></figure><h4 id="1-3-编译选项"><a href="#1-3-编译选项" class="headerlink" title="1.3 编译选项"></a>1.3 编译选项</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON </span><br><span class="line">-D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D WITH_VTK=ON ..</span><br></pre></td></tr></table></figure><h4 id="1-4-编译安装"><a href="#1-4-编译安装" class="headerlink" title="1.4 编译安装"></a>1.4 编译安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>此时，如果提示“无法创建目录 /usr/local/include/opencv2”，那么需要以管理员权限安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h4 id="1-5-添加-library-path"><a href="#1-5-添加-library-path" class="headerlink" title="1.5 添加 library path"></a>1.5 添加 library path</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo touch /etc/ld.so.conf.d/opencv.conf</span><br><span class="line">sudo vi /etc/ld.so.conf.d/opencv.conf</span><br></pre></td></tr></table></figure><p>文件内容为：</p><blockquote><p>/usr/local/lib</p></blockquote><p>最后应用配置即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><h3 id="2-运行示例程序"><a href="#2-运行示例程序" class="headerlink" title="2 运行示例程序"></a>2 运行示例程序</h3><p>首先关闭终端，开启一个新的终端并进入“…/opencv-2.4.13/samples/c”目录下。</p><p>这个目录下面有个“build_all.sh”脚本文件，功能是编译链接该目录下的所有 c/cpp 文件，生成二进制可执行程序。</p><p>首先执行此脚本，如果提示不可执行的话，需要对脚本加权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">chmod +x build_all.sh</span><br><span class="line">./build_all.sh</span><br></pre></td></tr></table></figure><p>等待编译完成之后，便可执行测试程序。</p><h3 id="3-使用-IDE-编译"><a href="#3-使用-IDE-编译" class="headerlink" title="3 使用 IDE 编译"></a>3 使用 IDE 编译</h3><p>在使用 IDE 编译 openCV 程序的时候，需要修改“CMakeLists.txt”文件，向程序添加 openCV 库的支持：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 3.5)</span><br><span class="line">project(openCV)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加openCV</span></span><br><span class="line">FIND_PACKAGE(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CXX_FLAGS "$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置可执行文件生成路径</span></span><br><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)</span><br><span class="line">set(CMAKE_LIBRARY_OUTPUT_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;/bin)</span><br><span class="line">set(CMAKE_RUNTIME_OUTPUT_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line">set(SOURCE_FILES main.cpp)</span><br><span class="line">add_executable(openCV $&#123;SOURCE_FILES&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加openCV</span></span><br><span class="line">target_link_libraries(openCV $&#123;OpenCV_LIBS&#125;)</span><br></pre></td></tr></table></figure><p>需要添加的两行在上面已经注释出来了，添加了库支持之后，便不会提示相应的头文件找不到之类的编译错误了。</p><p>最后，使用编译器自带的编译功能便可运行程序了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本问主要描述了在 Ubuntu 16.04(x64) 环境下配置openCV，以及运行示例程序的过程。&lt;/p&gt;
&lt;h3 id=&quot;1-安装-openCV&quot;&gt;&lt;a href=&quot;#1-安装-openCV&quot;
      
    
    </summary>
    
      <category term="Ubuntu" scheme="http://blog.duanxu.tech/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.duanxu.tech/tags/Ubuntu/"/>
    
      <category term="OpenCV" scheme="http://blog.duanxu.tech/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>JUnit学习(2) JUnit API</title>
    <link href="http://blog.duanxu.tech/2016/08/09/2016/2016-08-09-JUnit-%E5%AD%A6%E4%B9%A0(2)-JUnit-API/"/>
    <id>http://blog.duanxu.tech/2016/08/09/2016/2016-08-09-JUnit-学习(2)-JUnit-API/</id>
    <published>2016-08-09T12:27:30.000Z</published>
    <updated>2018-12-07T12:51:31.016Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h3 id="3-JUnit-API"><a href="#3-JUnit-API" class="headerlink" title="3 JUnit API"></a>3 JUnit API</h3><p><strong>引自<a href="http://wiki.jikexueyuan.com/project/junit/api.html" target="_blank" rel="noopener">“极客学院”</a></strong></p><p>JUnit 中比较重要的类有四个：</p><p>|:—:|:—:|:—:|<br>|序号|类的名称|类的功能|<br>|1|Assert|assert方法的集合|<br>|2|TestCase|定义了运行多重测试的固定装置|<br>|3|TestResult|TestResult 集合了执行测试样例的所有结果|<br>|4|TestSuit|TestSuite 是测试的集合|</p><h4 id="3-1-Assert类"><a href="#3-1-Assert类" class="headerlink" title="3.1 Assert类"></a>3.1 Assert类</h4><p>这个类提供了一系列的编写测试的有用的声明方法。只有失败的声明方法才会被记录。Assert 类的重要方法列式如下：</p><p>|:—:|:—:|:—:|<br>|序号|方法|描述|<br>|1|void assertEquals(boolean expected, boolean actual)|检查两个变量或者等式是否平衡|<br>|2|void assertFalse(boolean condition)|检查条件是假的|<br>|3|void assertNotNull(Object object)|检查对象不是空的|<br>|4|void assertNull(Object object)|检查对象是空的|<br>|5|void assertTrue(boolean condition)|检查条件为真|<br>|6|void fail()|在没有报告的情况下使测试不通过|</p><p>测试类用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJunit1</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//test data</span></span><br><span class="line">      <span class="keyword">int</span> num= <span class="number">5</span>;</span><br><span class="line">      String temp= <span class="keyword">null</span>;</span><br><span class="line">      String str= <span class="string">"Junit is working fine"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//check for equality</span></span><br><span class="line">      assertEquals(<span class="string">"Junit is working fine"</span>, str);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//check for false condition</span></span><br><span class="line">      assertFalse(num &gt; <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//check for not null value</span></span><br><span class="line">      assertNotNull(str);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-TestCase类"><a href="#3-2-TestCase类" class="headerlink" title="3.2 TestCase类"></a>3.2 TestCase类</h4><p>测试样例定义了运行多重测试的固定格式。TestCase 类的一些重要方法列式如下：</p><p>|:—:|:—:|:—:|<br>|序号|方法|描述|<br>|1|int countTestCases()|为被run(TestResult result) 执行的测试案例计数|<br>|2|TestResult createResult()|创建一个默认的 TestResult 对象|<br>|3|String getName()|获取 TestCase 的名称|<br>|4|TestResult run()|一个运行这个测试的方便的方法，收集由TestResult 对象产生的结果|<br>|5|void run(TestResult result)|在 TestResult 中运行测试案例并收集结果|<br>|6|void setName(String name)|设置 TestCase 的名称|<br>|7|void setUp()|创建固定装置，例如，打开一个网络连接|<br>|8|void tearDown()|拆除固定装置，例如，关闭一个网络连接|<br>|9|String toString()|返回测试案例的一个字符串表示|</p><p>测试类用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJunit2</span> <span class="keyword">extends</span> <span class="title">TestCase</span>  </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">double</span> fValue1;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">double</span> fValue2;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      fValue1= <span class="number">2.0</span>;</span><br><span class="line">      fValue2= <span class="number">3.0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//count the number of test cases</span></span><br><span class="line">      System.out.println(<span class="string">"No of Test Case = "</span>+ <span class="keyword">this</span>.countTestCases());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//test getName </span></span><br><span class="line">      String name= <span class="keyword">this</span>.getName();</span><br><span class="line">      System.out.println(<span class="string">"Test Case Name = "</span>+ name);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//test setName</span></span><br><span class="line">      <span class="keyword">this</span>.setName(<span class="string">"testNewAdd"</span>);</span><br><span class="line">      String newName= <span class="keyword">this</span>.getName();</span><br><span class="line">      System.out.println(<span class="string">"Updated Test Case Name = "</span>+ newName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//tearDown used to close the connection or clean up activities</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">(  )</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-TestResult类"><a href="#3-3-TestResult类" class="headerlink" title="3.3 TestResult类"></a>3.3 TestResult类</h4><p>测试样例定义了运行多重测试的固定格式。TestCase 类的一些重要方法列式如下：</p><p>|:—:|:—:|:—:|<br>|序号|方法|描述|<br>|1|void addError(Test test, Throwable t)|在错误列表中加入一个错误|<br>|2|void addFailure(Test test, AssertionFailedError t)|在失败列表中加入一个失败|<br>|3|void endTest(Test test)|显示测试被编译的这个结果|<br>|4|int errorCount()|获取被检测出错误的数量|<br>|5|Enumeration errors()|返回错误的详细信息|<br>|6|int failureCount()|获取被检测出的失败的数量|<br>|7|void run(TestCase test)|运行 TestCase|<br>|8|int int runCount()|获得运行测试的数量|<br>|9|void startTest(Test test)|声明一个测试即将开始|<br>|10|void stop()|标明测试必须停止|</p><p>测试类用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> junit.framework.AssertionFailedError;</span><br><span class="line"><span class="keyword">import</span> junit.framework.TestResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJunit3</span> <span class="keyword">extends</span> <span class="title">TestResult</span> </span>&#123;</span><br><span class="line">   <span class="comment">// add the error</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addError</span><span class="params">(Test test, Throwable t)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.addError((junit.framework.Test) test, t);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// add the failure</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addFailure</span><span class="params">(Test test, AssertionFailedError t)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.addFailure((junit.framework.Test) test, t);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// add any test</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Marks that the test run should stop.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//stop the test here</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-TestSuit类"><a href="#3-4-TestSuit类" class="headerlink" title="3.4 TestSuit类"></a>3.4 TestSuit类</h4><p>TestSuite 类是测试的组成部分。它运行了很多的测试案例。TestSuite 类的一些重要方法列式如下：</p><p>|:—:|:—:|:—:|<br>|序号|方法|描述|<br>|1|void addTest(Test test)|在套中加入测试。|<br>|2|void addTestSuite(Class&lt;? extends TestCase&gt; testClass)|将已经给定的类中的测试加到套中。|<br>|3|int countTestCases()|对这个测试即将运行的测试案例进行计数。|<br>|4|String getName()|返回套的名称。|<br>|5|void run(TestResult result)|在 TestResult 中运行测试并收集结果。|<br>|6|void setName(String name)|设置套的名称。|<br>|7|Test testAt(int index)|在给定的目录中返回测试。|<br>|8|int testCount()|返回套中测试的数量。|<br>|9|static Test warning(String message)|返回会失败的测试并且记录警告信息。|</p><p>测试类用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> junit.framework.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JunitTestSuite</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// add the test's in the suite</span></span><br><span class="line">      TestSuite suite = <span class="keyword">new</span> TestSuite(TestJunit1.class, TestJunit2.class, TestJunit3.class );</span><br><span class="line">      TestResult result = <span class="keyword">new</span> TestResult();</span><br><span class="line">      suite.run(result);</span><br><span class="line">      System.out.println(<span class="string">"Number of test cases = "</span> + result.runCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-JUnit-API&quot;&gt;&lt;a href=&quot;#3-JUnit-API&quot; class=&quot;headerlink&quot; title=&quot;3 JUnit API&quot;&gt;&lt;/a&gt;3 JUnit API&lt;/h3
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.duanxu.tech/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.duanxu.tech/tags/Java/"/>
    
      <category term="JUnit" scheme="http://blog.duanxu.tech/tags/JUnit/"/>
    
  </entry>
  
  <entry>
    <title>JUnit学习(1) 初识JUnit</title>
    <link href="http://blog.duanxu.tech/2016/08/04/2016/2016-08-04-JUnit-%E5%AD%A6%E4%B9%A0(1)-%E5%88%9D%E8%AF%86JUnit/"/>
    <id>http://blog.duanxu.tech/2016/08/04/2016/2016-08-04-JUnit-学习(1)-初识JUnit/</id>
    <published>2016-08-04T12:21:30.000Z</published>
    <updated>2018-12-07T12:51:20.193Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h3 id="1-JUnit简介"><a href="#1-JUnit简介" class="headerlink" title="1 JUnit简介"></a>1 JUnit简介</h3><p><strong>引自<a href="http://baike.baidu.com/item/junit" target="_blank" rel="noopener">“百度百科”</a></strong></p><blockquote><p>JUnit是一个Java语言的单元测试框架。它由Kent Beck和Erich Gamma建立，逐渐成为源于Kent Beck的sUnit的xUnit家族中最为成功的一个。 JUnit有它自己的JUnit扩展生态圈。多数Java的开发环境都已经集成了JUnit作为单元测试的工具。<br>JUnit是由 Erich Gamma 和 Kent Beck 编写的一个回归测试框架（regression testing framework）。Junit测试是程序员测试，即所谓白盒测试，因为程序员知道被测试的软件如何（How）完成功能和完成什么样（What）的功能。Junit是一套框架，继承TestCase类，就可以用Junit进行自动测试了。</p></blockquote><h3 id="2-基础测试"><a href="#2-基础测试" class="headerlink" title="2 基础测试"></a>2 基础测试</h3><h4 id="2-1-测试函数"><a href="#2-1-测试函数" class="headerlink" title="2.1 测试函数"></a>2.1 测试函数</h4><p>测试工具是一整套固定的工具用于基线测试。测试工具的目的是为了确保测试能够在共享且固定的环境中运行，因此保证测试结果的可重复性。它包括：  </p><ul><li>在所有测试调用指令发起前的 setUp() 方法。  </li><li>在测试方法运行后的 tearDown() 方法。  </li></ul><p>所以，我们可以在 setUp() 方法内编写测试的初始化方法，之后在测试函数内部编写测试代码。</p><p>测试程序在执行的时候，会自动识别类内部名称为 test* 的方法，并执行相应的测试。本例中，在 setUp() 方法内部将私有成员初始化，之后在 testInitial 方法内测试初始化的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> science.duanxu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> junit.framework.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JUnitStudyFunction</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        value = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInitial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertTrue(value == <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-测试类"><a href="#2-2-测试类" class="headerlink" title="2.2 测试类"></a>2.2 测试类</h4><p>首先，我们编写一个具有功能的 Complex 类，其中只是最简单的实现了复数相加的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> science.duanxu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Complex</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 为了省去get set方法，这里我们把rel和img设为private</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> rel, img;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Complex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rel = img = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Complex</span><span class="params">(<span class="keyword">double</span> rel, <span class="keyword">double</span> img)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rel = rel;</span><br><span class="line">        <span class="keyword">this</span>.img = img;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Complex <span class="title">add</span><span class="params">(Complex complex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Complex(<span class="keyword">this</span>.rel + complex.rel, <span class="keyword">this</span>.img + complex.img);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        Complex complex = (Complex)object;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.rel == complex.rel &amp;&amp; <span class="keyword">this</span>.img == complex.img;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，我们就可以对这个复数类编写测试类，用来测复数类的执行。本例中，由于只有一个 add 方法，所以我们仅测试这一个方法的执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> science.duanxu.Complex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComplex</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Complex x = <span class="keyword">new</span> Complex(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        Complex y = <span class="keyword">new</span> Complex(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="keyword">new</span> Complex(<span class="number">4</span>,<span class="number">6</span>), x.add(y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，在测试执行的时候，进入测试类 TestComplex，然后执行 @Test 注解的 testAdd() 方法。进入testAdd() 方法之后，通过 assertEquals 方法返回测试结果（调用了Complex类内部的 equals 方法）。</p><h4 id="2-3-批量测试"><a href="#2-3-批量测试" class="headerlink" title="2.3 批量测试"></a>2.3 批量测试</h4><p>有些时候，我们需要同时测试很多类的执行情况，于是分别给这些类编写了相应的测试类，之后我们便可以通过“测试套件”的方法来统一测试这些类。</p><p>以上面编写的 JUnitStudyFunction 类和 TestComplex 类为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"><span class="keyword">import</span> science.duanxu.JUnitStudyFunction;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite.class)</span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(&#123;</span><br><span class="line">        TestComplex.class,</span><br><span class="line">        JUnitStudyFunction.class,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAll</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将所有的类名加入到 SuitClasses 列表内部，然后执行类 TestAll 即可自动完成所有的测试工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-JUnit简介&quot;&gt;&lt;a href=&quot;#1-JUnit简介&quot; class=&quot;headerlink&quot; title=&quot;1 JUnit简介&quot;&gt;&lt;/a&gt;1 JUnit简介&lt;/h3&gt;&lt;p&gt;&lt;str
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.duanxu.tech/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.duanxu.tech/tags/Java/"/>
    
      <category term="JUnit" scheme="http://blog.duanxu.tech/tags/JUnit/"/>
    
  </entry>
  
  <entry>
    <title>FreeMarker 学习（Java）</title>
    <link href="http://blog.duanxu.tech/2016/07/29/2016/2016-07-29-FreeMarker-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://blog.duanxu.tech/2016/07/29/2016/2016-07-29-FreeMarker-学习/</id>
    <published>2016-07-29T04:10:23.000Z</published>
    <updated>2018-12-07T12:51:17.032Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h3 id="1-FreeMarker简介"><a href="#1-FreeMarker简介" class="headerlink" title="1 FreeMarker简介"></a>1 FreeMarker简介</h3><p><strong>引自<a href="http://baike.baidu.com/view/1278430.htm" target="_blank" rel="noopener">“百度百科”</a></strong></p><blockquote><p>FreeMarker是一款模板引擎： 即一种基于模板和要改变的数据，并用来生成输出文本（HTML网页、电子邮件、配置文件、源代码等）的通用工具。它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。<br>FreeMarker是免费的，基于Apache许可证2.0版本发布。其模板编写为FreeMarker Template Language（FTL），属于简单、专用的语言。需要准备数据在真实编程语言中来显示，比如数据库查询和业务运算，之后模板显示已经准备好的数据。在模板中，主要用于如何展现数据，而在模板之外注意于要展示什么数据。</p></blockquote><h3 id="2-导入FreeMarker"><a href="#2-导入FreeMarker" class="headerlink" title="2 导入FreeMarker"></a>2 导入FreeMarker</h3><p>FreeMarker提供了一个jar包，在Java工程里，只要引入这个jar包即可：</p><div style="text-align: center"><br><img src="/images/201607/2016072901.png"><br></div><p>点击“Add as Library”便可以在程序中使用FreeMarker的各种功能了。</p><h3 id="3-FreeMarker基本语法"><a href="#3-FreeMarker基本语法" class="headerlink" title="3 FreeMarker基本语法"></a>3 FreeMarker基本语法</h3><p>FreeMarker在使用过程中主要包含两部分，一部分是模板文件，另一部分就是程序执行代码。首先编写一个符合FreeMarker语法的模板文件，然后在Java程序中编译这个模板文件，即可生成我们需要的文件。</p><p>FreeMarker模板文件主要由如下4个部分组成:   </p><ol><li>文本:直接输出的部分   </li><li>注释:&lt;#– … –&gt;格式部分,不会输出   </li><li>插值:即${…}或#{…}格式的部分,将使用数据模型中的部分替代输出   </li><li>FTL指令:FreeMarker指定,和HTML标记类似,名字前加#予以区分,不会输出   </li></ol><h4 id="3-1-插值规则"><a href="#3-1-插值规则" class="headerlink" title="3.1 插值规则"></a>3.1 插值规则</h4><p>插值有如下两种类型:</p><p>(1)通用插值${expr} : 如果，expr==10，那么插值“${expr}”，将被直接替换成“10”。</p><p>(2)数字格式化插值${expr;format} : format基本格式为“mXMY”，分别代表小数部分最少为X位，小数部分最大为Y位。即如果，expr==10，那么插值“${expr;m1}”，将被直接替换成“10.0”。</p><h4 id="3-2-FTL指令"><a href="#3-2-FTL指令" class="headerlink" title="3.2 FTL指令"></a>3.2 FTL指令</h4><p>FreeMarker使用FTL标签来使用指令其标签和HTML标签类似：   </p><ol><li>开始标签:&lt;#oper arg&gt;   </li><li>结束标签:&lt;/#oper&gt;   </li><li>空标签:&lt;#oper arg/&gt;   </li></ol><h3 id="4-以编写JavaBean为例"><a href="#4-以编写JavaBean为例" class="headerlink" title="4 以编写JavaBean为例"></a>4 以编写JavaBean为例</h3><p>本小结中，将通过模板文件生成一个JavaBeans。</p><h4 id="4-1-模板文件"><a href="#4-1-模板文件" class="headerlink" title="4.1 模板文件"></a>4.1 模板文件</h4><p>首先，是JavaBeans的基本结构。JavaBeans是Java中一种特殊的类，可以将多个对象封装到一个对象（bean）中。特点是可序列化，提供无参构造器，提供getter方法和setter方法访问对象的属性。</p><p>基本结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 包名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line"><span class="keyword">private</span> 类型 名称;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> 类名() &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> 类型 get名称() &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> set名称(类型 参数) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据此我们可以编写模板如下（其中cap_first意为将字符串首字符改为大写）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> $&#123;<span class="keyword">package</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;<span class="class"><span class="keyword">class</span>&#125; </span>&#123;</span><br><span class="line">&lt;#list attrs as attr&gt;</span><br><span class="line"><span class="keyword">private</span> $&#123;attr.type&#125; $&#123;attr.name&#125;;</span><br><span class="line">&lt;/#list&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// default constructor</span></span><br><span class="line"><span class="keyword">public</span> $&#123;<span class="class"><span class="keyword">class</span>&#125;() </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#list attrs as attr&gt;</span><br><span class="line"><span class="keyword">public</span> $&#123;attr.type&#125; get$&#123;attr.name?cap_first&#125;() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.$&#123;attr.name&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> set$&#123;attr.name?cap_first&#125;($&#123;attr.type&#125; $&#123;attr.name&#125;) &#123;</span><br><span class="line"><span class="keyword">this</span>.$&#123;attr.name&#125; = $&#123;attr.name&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/#list&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-程序文件"><a href="#4-2-程序文件" class="headerlink" title="4.2 程序文件"></a>4.2 程序文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> science.duanxu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.DefaultObjectWrapper;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">            conf.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(<span class="string">"."</span>));</span><br><span class="line">            conf.setObjectWrapper(<span class="keyword">new</span> DefaultObjectWrapper());</span><br><span class="line">            <span class="comment">//conf.setDefaultEncoding("UTF-8");</span></span><br><span class="line"></span><br><span class="line">            Template template = conf.getTemplate(<span class="string">"./Student.ftl"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// parms 中存贮的key值即为模板中可以直接获取的值</span></span><br><span class="line">            Map&lt;String, Object&gt; parms = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            parms.put(<span class="string">"package"</span>, <span class="string">"science.duanxu"</span>);</span><br><span class="line">            parms.put(<span class="string">"class"</span>, <span class="string">"Student"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取子属性值需要通过一个 JavaBean 来获取</span></span><br><span class="line">            List&lt;Attr&gt; attrs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            attrs.add(<span class="keyword">new</span> Attr(<span class="string">"String"</span>, <span class="string">"name"</span>));</span><br><span class="line">            attrs.add(<span class="keyword">new</span> Attr(<span class="string">"String"</span>, <span class="string">"address"</span>));</span><br><span class="line">            attrs.add(<span class="keyword">new</span> Attr(<span class="string">"Integer"</span>, <span class="string">"age"</span>));</span><br><span class="line">            parms.put(<span class="string">"attrs"</span>, attrs);</span><br><span class="line"></span><br><span class="line">            Writer writer = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"Student.java"</span>));</span><br><span class="line">            template.process(parms, writer);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Attr</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String type;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Attr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Attr</span><span class="params">(String type, String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.type = type;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.type = type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-输出结果"><a href="#4-3-输出结果" class="headerlink" title="4.3 输出结果"></a>4.3 输出结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> science.duanxu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// default constructor</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h3><ol><li>FreeMarker可以很方便的根据模板构造输出文件</li><li>还有很多更加灵活的使用技巧，需要学习如何使用。</li><li>上述实例中，可以将一些路径信息和成员变量信息事先写入到一个配置文件内，通过读取配置文件，便可以更加方便的输出文件。</li><li>在实际应用中，通过FreeMarker可以很方便的编写自动测试花用例，从而提高测试效率。</li><li>…</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-FreeMarker简介&quot;&gt;&lt;a href=&quot;#1-FreeMarker简介&quot; class=&quot;headerlink&quot; title=&quot;1 FreeMarker简介&quot;&gt;&lt;/a&gt;1 Free
      
    
    </summary>
    
      <category term="Java" scheme="http://blog.duanxu.tech/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.duanxu.tech/tags/Java/"/>
    
      <category term="FreeMarker" scheme="http://blog.duanxu.tech/tags/FreeMarker/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 双屏分辨率设置</title>
    <link href="http://blog.duanxu.tech/2016/07/26/2016/2016-07-26-Ubuntu-%E5%8F%8C%E5%B1%8F%E5%88%86%E8%BE%A8%E7%8E%87%E8%AE%BE%E7%BD%AE/"/>
    <id>http://blog.duanxu.tech/2016/07/26/2016/2016-07-26-Ubuntu-双屏分辨率设置/</id>
    <published>2016-07-26T12:07:23.000Z</published>
    <updated>2018-12-07T12:50:28.090Z</updated>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>在使用Ubuntu写代码的时候，使用双屏会更爽一些，但是这也带来了很多问题。比如在显卡驱动支持性不是很好的时候，第二块显示器有时的分辨率不是很理想，会出现分辨率低于显示器标准分辨率的情况。在设置选项里面，第二块显示器识别为“未知的显示器”。在这种情况下，需要我们手工设置显示器的分辨率。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><h4 id="主要通过-xrandr-命令"><a href="#主要通过-xrandr-命令" class="headerlink" title="主要通过 xrandr 命令"></a>主要通过 xrandr 命令</h4><p>假设我们现有的两块显示器分辨率均为“1920*1080”</p><p>首先，直接运行xrandr查看下分辨率的情况：</p><blockquote><p>$ xrandr<br>Screen 0: minimum 320 x 200, current 3360 x 1050, maximum 8192 x 8192<br>DisplayPort-0 connected primary 1680x1050+0+0 (normal left inverted right x axis y axis) 0mm x 0mm<br>   1024x768      60.00<br>   800x600       60.32    56.25<br>   848x480       60.00<br>   640x480       59.94<br>   1440x900      59.89<em><br>DVI-0 connected 1680x1050+1680+0 (normal left inverted right x axis y axis) 473mm x 296mm<br>   1680x1050     59.95</em>+<br>   1600x1000     60.01<br>   1280x1024     75.02    60.02<br>   1440x900      59.89<br>   1280x960      60.00<br>   1152x864      75.00<br>   1024x768      75.08    60.00<br>   832x624       74.55<br>   800x600       75.00    60.32<br>   640x480       75.00    60.00<br>   720x400       70.08  </p></blockquote><p>发现，我们接在 DP接口上显示器没有工作在正常的分辨率上（其中标星号的是我们正在使用的分辨率）。</p><blockquote><p>$ xrandr<br>Screen 0: minimum 320 x 200, current 3360 x 1050, maximum 8192 x 8192<br>DisplayPort-0 connected primary 1680x1050+0+0 (normal left inverted right x axis y axis) 0mm x 0mm<br>   1024x768      60.00<br>   800x600       60.32    56.25<br>   848x480       60.00<br>   640x480       59.94<br>   1440x900_60.00  59.89<br>   1680x1050_60.00  59.95<em><br>DVI-0 connected 1680x1050+1680+0 (normal left inverted right x axis y axis) 473mm x 296mm<br>   1680x1050     59.95</em>+<br>   1600x1000     60.01<br>   1280x1024     75.02    60.02<br>   1440x900      59.89<br>   1280x960      60.00<br>   1152x864      75.00<br>   1024x768      75.08    60.00<br>   832x624       74.55<br>   800x600       75.00    60.32<br>   640x480       75.00    60.00<br>   720x400       70.08  </p></blockquote><h4 id="写成脚本"><a href="#写成脚本" class="headerlink" title="写成脚本"></a>写成脚本</h4><p>上述方法有个问题，就是每次重启之后需要再次设置分辨率，这里我们将其写为脚本，每次设置的时候只要运行一下脚本即可：</p><p>首先新建一个脚本文件： vi display.sh</p><p>然后将命令写入脚本文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> screen resolution to 1400 * 900</span></span><br><span class="line"></span><br><span class="line">xrandr --newmode "1680x1050_60.00"  146.25  1680 1784 1960 2240  1050 1053 1059 1089 -hsync +vsync;</span><br><span class="line">xrandr --addmode DisplayPort-0 "1680x1050_60.00";</span><br><span class="line">xrandr --output DisplayPort-0 --mode 1680x1050_60.00;</span><br><span class="line">xrandr --output DisplayPort-0 --right-of --down DVI-0;</span><br></pre></td></tr></table></figure><p>至此，每次修改分辨率的时候，只要执行 display.sh 脚本即可自动修改。另外将其加入开机启动项，那么每次开机的时候便会自动执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;content&lt;br&gt;{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;p&gt;在使用Ubuntu写代码的时候，使用双屏
      
    
    </summary>
    
      <category term="Other" scheme="http://blog.duanxu.tech/categories/Other/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.duanxu.tech/tags/Ubuntu/"/>
    
      <category term="双屏" scheme="http://blog.duanxu.tech/tags/%E5%8F%8C%E5%B1%8F/"/>
    
      <category term="分辨率" scheme="http://blog.duanxu.tech/tags/%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    
  </entry>
  
</feed>
